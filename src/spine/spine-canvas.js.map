{
  "version": 3,
  "sources": ["../../src/index.ts", "../../../spine-core/src/Utils.ts", "../../../spine-core/src/attachments/Attachment.ts", "../../../spine-core/src/attachments/Sequence.ts", "../../../spine-core/src/Animation.ts", "../../../spine-core/src/AnimationState.ts", "../../../spine-core/src/AnimationStateData.ts", "../../../spine-core/src/attachments/BoundingBoxAttachment.ts", "../../../spine-core/src/attachments/ClippingAttachment.ts", "../../../spine-core/src/Texture.ts", "../../../spine-core/src/TextureAtlas.ts", "../../../spine-core/src/attachments/MeshAttachment.ts", "../../../spine-core/src/attachments/PathAttachment.ts", "../../../spine-core/src/attachments/PointAttachment.ts", "../../../spine-core/src/attachments/RegionAttachment.ts", "../../../spine-core/src/AtlasAttachmentLoader.ts", "../../../spine-core/src/BoneData.ts", "../../../spine-core/src/Bone.ts", "../../../spine-core/src/ConstraintData.ts", "../../../spine-core/src/AssetManagerBase.ts", "../../../spine-core/src/Event.ts", "../../../spine-core/src/EventData.ts", "../../../spine-core/src/IkConstraint.ts", "../../../spine-core/src/IkConstraintData.ts", "../../../spine-core/src/PathConstraintData.ts", "../../../spine-core/src/PathConstraint.ts", "../../../spine-core/src/Slot.ts", "../../../spine-core/src/TransformConstraint.ts", "../../../spine-core/src/Skeleton.ts", "../../../spine-core/src/SkeletonData.ts", "../../../spine-core/src/Skin.ts", "../../../spine-core/src/SlotData.ts", "../../../spine-core/src/TransformConstraintData.ts", "../../../spine-core/src/SkeletonBinary.ts", "../../../spine-core/src/SkeletonBounds.ts", "../../../spine-core/src/Triangulator.ts", "../../../spine-core/src/SkeletonClipping.ts", "../../../spine-core/src/SkeletonJson.ts", "../../../spine-core/src/polyfills.ts", "../../src/CanvasTexture.ts", "../../src/AssetManager.ts", "../../src/SkeletonRenderer.ts"],
  "sourcesContent": ["export * from \"./AssetManager.js\";\r\nexport * from \"./CanvasTexture.js\";\r\nexport * from \"./SkeletonRenderer.js\";\r\nexport * from \"@esotericsoftware/spine-core\"", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { MixBlend } from \"./Animation.js\";\r\n\r\nexport interface StringMap<T> {\r\n\t[key: string]: T;\r\n}\r\n\r\nexport class IntSet {\r\n\tarray = new Array<number | undefined>();\r\n\r\n\tadd (value: number): boolean {\r\n\t\tlet contains = this.contains(value);\r\n\t\tthis.array[value | 0] = value | 0;\r\n\t\treturn !contains;\r\n\t}\r\n\r\n\tcontains (value: number) {\r\n\t\treturn this.array[value | 0] != undefined;\r\n\t}\r\n\r\n\tremove (value: number) {\r\n\t\tthis.array[value | 0] = undefined;\r\n\t}\r\n\r\n\tclear () {\r\n\t\tthis.array.length = 0;\r\n\t}\r\n}\r\n\r\nexport class StringSet {\r\n\tentries: StringMap<boolean> = {};\r\n\tsize = 0;\r\n\r\n\tadd (value: string): boolean {\r\n\t\tlet contains = this.entries[value];\r\n\t\tthis.entries[value] = true;\r\n\t\tif (!contains) {\r\n\t\t\tthis.size++;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\taddAll (values: string[]): boolean {\r\n\t\tlet oldSize = this.size;\r\n\t\tfor (var i = 0, n = values.length; i < n; i++)\r\n\t\t\tthis.add(values[i]);\r\n\t\treturn oldSize != this.size;\r\n\t}\r\n\r\n\tcontains (value: string) {\r\n\t\treturn this.entries[value];\r\n\t}\r\n\r\n\tclear () {\r\n\t\tthis.entries = {};\r\n\t\tthis.size = 0;\r\n\t}\r\n}\r\n\r\nexport interface NumberArrayLike {\r\n\treadonly length: number;\r\n\t[n: number]: number;\r\n}\r\n\r\nexport interface Disposable {\r\n\tdispose (): void;\r\n}\r\n\r\nexport interface Restorable {\r\n\trestore (): void;\r\n}\r\n\r\nexport class Color {\r\n\tpublic static WHITE = new Color(1, 1, 1, 1);\r\n\tpublic static RED = new Color(1, 0, 0, 1);\r\n\tpublic static GREEN = new Color(0, 1, 0, 1);\r\n\tpublic static BLUE = new Color(0, 0, 1, 1);\r\n\tpublic static MAGENTA = new Color(1, 0, 1, 1);\r\n\r\n\tconstructor (public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 0) {\r\n\t}\r\n\r\n\tset (r: number, g: number, b: number, a: number) {\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\t\tthis.a = a;\r\n\t\treturn this.clamp();\r\n\t}\r\n\r\n\tsetFromColor (c: Color) {\r\n\t\tthis.r = c.r;\r\n\t\tthis.g = c.g;\r\n\t\tthis.b = c.b;\r\n\t\tthis.a = c.a;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetFromString (hex: string) {\r\n\t\thex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\r\n\t\tthis.r = parseInt(hex.substr(0, 2), 16) / 255;\r\n\t\tthis.g = parseInt(hex.substr(2, 2), 16) / 255;\r\n\t\tthis.b = parseInt(hex.substr(4, 2), 16) / 255;\r\n\t\tthis.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tadd (r: number, g: number, b: number, a: number) {\r\n\t\tthis.r += r;\r\n\t\tthis.g += g;\r\n\t\tthis.b += b;\r\n\t\tthis.a += a;\r\n\t\treturn this.clamp();\r\n\t}\r\n\r\n\tclamp () {\r\n\t\tif (this.r < 0) this.r = 0;\r\n\t\telse if (this.r > 1) this.r = 1;\r\n\r\n\t\tif (this.g < 0) this.g = 0;\r\n\t\telse if (this.g > 1) this.g = 1;\r\n\r\n\t\tif (this.b < 0) this.b = 0;\r\n\t\telse if (this.b > 1) this.b = 1;\r\n\r\n\t\tif (this.a < 0) this.a = 0;\r\n\t\telse if (this.a > 1) this.a = 1;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tstatic rgba8888ToColor (color: Color, value: number) {\r\n\t\tcolor.r = ((value & 0xff000000) >>> 24) / 255;\r\n\t\tcolor.g = ((value & 0x00ff0000) >>> 16) / 255;\r\n\t\tcolor.b = ((value & 0x0000ff00) >>> 8) / 255;\r\n\t\tcolor.a = ((value & 0x000000ff)) / 255;\r\n\t}\r\n\r\n\tstatic rgb888ToColor (color: Color, value: number) {\r\n\t\tcolor.r = ((value & 0x00ff0000) >>> 16) / 255;\r\n\t\tcolor.g = ((value & 0x0000ff00) >>> 8) / 255;\r\n\t\tcolor.b = ((value & 0x000000ff)) / 255;\r\n\t}\r\n\r\n\tstatic fromString (hex: string): Color {\r\n\t\treturn new Color().setFromString(hex);\r\n\t}\r\n}\r\n\r\nexport class MathUtils {\r\n\tstatic PI = 3.1415927;\r\n\tstatic PI2 = MathUtils.PI * 2;\r\n\tstatic radiansToDegrees = 180 / MathUtils.PI;\r\n\tstatic radDeg = MathUtils.radiansToDegrees;\r\n\tstatic degreesToRadians = MathUtils.PI / 180;\r\n\tstatic degRad = MathUtils.degreesToRadians;\r\n\r\n\tstatic clamp (value: number, min: number, max: number) {\r\n\t\tif (value < min) return min;\r\n\t\tif (value > max) return max;\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic cosDeg (degrees: number) {\r\n\t\treturn Math.cos(degrees * MathUtils.degRad);\r\n\t}\r\n\r\n\tstatic sinDeg (degrees: number) {\r\n\t\treturn Math.sin(degrees * MathUtils.degRad);\r\n\t}\r\n\r\n\tstatic signum (value: number): number {\r\n\t\treturn value > 0 ? 1 : value < 0 ? -1 : 0;\r\n\t}\r\n\r\n\tstatic toInt (x: number) {\r\n\t\treturn x > 0 ? Math.floor(x) : Math.ceil(x);\r\n\t}\r\n\r\n\tstatic cbrt (x: number) {\r\n\t\tlet y = Math.pow(Math.abs(x), 1 / 3);\r\n\t\treturn x < 0 ? -y : y;\r\n\t}\r\n\r\n\tstatic randomTriangular (min: number, max: number): number {\r\n\t\treturn MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\r\n\t}\r\n\r\n\tstatic randomTriangularWith (min: number, max: number, mode: number): number {\r\n\t\tlet u = Math.random();\r\n\t\tlet d = max - min;\r\n\t\tif (u <= (mode - min) / d) return min + Math.sqrt(u * d * (mode - min));\r\n\t\treturn max - Math.sqrt((1 - u) * d * (max - mode));\r\n\t}\r\n\r\n\tstatic isPowerOfTwo (value: number) {\r\n\t\treturn value && (value & (value - 1)) === 0;\r\n\t}\r\n}\r\n\r\nexport abstract class Interpolation {\r\n\tprotected abstract applyInternal (a: number): number;\r\n\tapply (start: number, end: number, a: number): number {\r\n\t\treturn start + (end - start) * this.applyInternal(a);\r\n\t}\r\n}\r\n\r\nexport class Pow extends Interpolation {\r\n\tprotected power = 2;\r\n\r\n\tconstructor (power: number) {\r\n\t\tsuper();\r\n\t\tthis.power = power;\r\n\t}\r\n\r\n\tapplyInternal (a: number): number {\r\n\t\tif (a <= 0.5) return Math.pow(a * 2, this.power) / 2;\r\n\t\treturn Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\r\n\t}\r\n}\r\n\r\nexport class PowOut extends Pow {\r\n\tconstructor (power: number) {\r\n\t\tsuper(power);\r\n\t}\r\n\r\n\tapplyInternal (a: number): number {\r\n\t\treturn Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\r\n\t}\r\n}\r\n\r\nexport class Utils {\r\n\tstatic SUPPORTS_TYPED_ARRAYS = typeof (Float32Array) !== \"undefined\";\r\n\r\n\tstatic arrayCopy<T> (source: ArrayLike<T>, sourceStart: number, dest: ArrayLike<T>, destStart: number, numElements: number) {\r\n\t\tfor (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\r\n\t\t\tdest[j] = source[i];\r\n\t\t}\r\n\t}\r\n\r\n\tstatic arrayFill<T> (array: ArrayLike<T>, fromIndex: number, toIndex: number, value: T) {\r\n\t\tfor (let i = fromIndex; i < toIndex; i++)\r\n\t\t\tarray[i] = value;\r\n\t}\r\n\r\n\tstatic setArraySize<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\r\n\t\tlet oldSize = array.length;\r\n\t\tif (oldSize == size) return array;\r\n\t\tarray.length = size;\r\n\t\tif (oldSize < size) {\r\n\t\t\tfor (let i = oldSize; i < size; i++) array[i] = value;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tstatic ensureArrayCapacity<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\r\n\t\tif (array.length >= size) return array;\r\n\t\treturn Utils.setArraySize(array, size, value);\r\n\t}\r\n\r\n\tstatic newArray<T> (size: number, defaultValue: T): Array<T> {\r\n\t\tlet array = new Array<T>(size);\r\n\t\tfor (let i = 0; i < size; i++) array[i] = defaultValue;\r\n\t\treturn array;\r\n\t}\r\n\r\n\tstatic newFloatArray (size: number): NumberArrayLike {\r\n\t\tif (Utils.SUPPORTS_TYPED_ARRAYS)\r\n\t\t\treturn new Float32Array(size)\r\n\t\telse {\r\n\t\t\tlet array = new Array<number>(size);\r\n\t\t\tfor (let i = 0; i < array.length; i++) array[i] = 0;\r\n\t\t\treturn array;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic newShortArray (size: number): NumberArrayLike {\r\n\t\tif (Utils.SUPPORTS_TYPED_ARRAYS)\r\n\t\t\treturn new Int16Array(size)\r\n\t\telse {\r\n\t\t\tlet array = new Array<number>(size);\r\n\t\t\tfor (let i = 0; i < array.length; i++) array[i] = 0;\r\n\t\t\treturn array;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic toFloatArray (array: Array<number>) {\r\n\t\treturn Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\r\n\t}\r\n\r\n\tstatic toSinglePrecision (value: number) {\r\n\t\treturn Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;\r\n\t}\r\n\r\n\t// This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\r\n\tstatic webkit602BugfixHelper (alpha: number, blend: MixBlend) {\r\n\t}\r\n\r\n\tstatic contains<T> (array: Array<T>, element: T, identity = true) {\r\n\t\tfor (var i = 0; i < array.length; i++)\r\n\t\t\tif (array[i] == element) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstatic enumValue (type: any, name: string) {\r\n\t\treturn type[name[0].toUpperCase() + name.slice(1)];\r\n\t}\r\n}\r\n\r\nexport class DebugUtils {\r\n\tstatic logBones (skeleton: Skeleton) {\r\n\t\tfor (let i = 0; i < skeleton.bones.length; i++) {\r\n\t\t\tlet bone = skeleton.bones[i];\r\n\t\t\tconsole.log(bone.data.name + \", \" + bone.a + \", \" + bone.b + \", \" + bone.c + \", \" + bone.d + \", \" + bone.worldX + \", \" + bone.worldY);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Pool<T> {\r\n\tprivate items = new Array<T>();\r\n\tprivate instantiator: () => T;\r\n\r\n\tconstructor (instantiator: () => T) {\r\n\t\tthis.instantiator = instantiator;\r\n\t}\r\n\r\n\tobtain () {\r\n\t\treturn this.items.length > 0 ? this.items.pop()! : this.instantiator();\r\n\t}\r\n\r\n\tfree (item: T) {\r\n\t\tif ((item as any).reset) (item as any).reset();\r\n\t\tthis.items.push(item);\r\n\t}\r\n\r\n\tfreeAll (items: ArrayLike<T>) {\r\n\t\tfor (let i = 0; i < items.length; i++)\r\n\t\t\tthis.free(items[i]);\r\n\t}\r\n\r\n\tclear () {\r\n\t\tthis.items.length = 0;\r\n\t}\r\n}\r\n\r\nexport class Vector2 {\r\n\tconstructor (public x = 0, public y = 0) {\r\n\t}\r\n\r\n\tset (x: number, y: number): Vector2 {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tlength () {\r\n\t\tlet x = this.x;\r\n\t\tlet y = this.y;\r\n\t\treturn Math.sqrt(x * x + y * y);\r\n\t}\r\n\r\n\tnormalize () {\r\n\t\tlet len = this.length();\r\n\t\tif (len != 0) {\r\n\t\t\tthis.x /= len;\r\n\t\t\tthis.y /= len;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport class TimeKeeper {\r\n\tmaxDelta = 0.064;\r\n\tframesPerSecond = 0;\r\n\tdelta = 0;\r\n\ttotalTime = 0;\r\n\r\n\tprivate lastTime = Date.now() / 1000;\r\n\tprivate frameCount = 0;\r\n\tprivate frameTime = 0;\r\n\r\n\tupdate () {\r\n\t\tlet now = Date.now() / 1000;\r\n\t\tthis.delta = now - this.lastTime;\r\n\t\tthis.frameTime += this.delta;\r\n\t\tthis.totalTime += this.delta;\r\n\t\tif (this.delta > this.maxDelta) this.delta = this.maxDelta;\r\n\t\tthis.lastTime = now;\r\n\r\n\t\tthis.frameCount++;\r\n\t\tif (this.frameTime > 1) {\r\n\t\t\tthis.framesPerSecond = this.frameCount / this.frameTime;\r\n\t\t\tthis.frameTime = 0;\r\n\t\t\tthis.frameCount = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport interface ArrayLike<T> {\r\n\tlength: number;\r\n\t[n: number]: T;\r\n}\r\n\r\nexport class WindowedMean {\r\n\tvalues: Array<number>;\r\n\taddedValues = 0;\r\n\tlastValue = 0;\r\n\tmean = 0;\r\n\tdirty = true;\r\n\r\n\tconstructor (windowSize: number = 32) {\r\n\t\tthis.values = new Array<number>(windowSize);\r\n\t}\r\n\r\n\thasEnoughData () {\r\n\t\treturn this.addedValues >= this.values.length;\r\n\t}\r\n\r\n\taddValue (value: number) {\r\n\t\tif (this.addedValues < this.values.length) this.addedValues++;\r\n\t\tthis.values[this.lastValue++] = value;\r\n\t\tif (this.lastValue > this.values.length - 1) this.lastValue = 0;\r\n\t\tthis.dirty = true;\r\n\t}\r\n\r\n\tgetMean () {\r\n\t\tif (this.hasEnoughData()) {\r\n\t\t\tif (this.dirty) {\r\n\t\t\t\tlet mean = 0;\r\n\t\t\t\tfor (let i = 0; i < this.values.length; i++)\r\n\t\t\t\t\tmean += this.values[i];\r\n\t\t\t\tthis.mean = mean / this.values.length;\r\n\t\t\t\tthis.dirty = false;\r\n\t\t\t}\r\n\t\t\treturn this.mean;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Slot } from \"../Slot.js\";\r\nimport { NumberArrayLike, Utils } from \"../Utils.js\";\r\n\r\n/** The base class for all attachments. */\r\nexport abstract class Attachment {\r\n\tname: string;\r\n\r\n\tconstructor (name: string) {\r\n\t\tif (!name) throw new Error(\"name cannot be null.\");\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tabstract copy (): Attachment;\r\n}\r\n\r\n/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\r\n * {@link Slot#deform}. */\r\nexport abstract class VertexAttachment extends Attachment {\r\n\tprivate static nextID = 0;\r\n\r\n\t/** The unique ID for this attachment. */\r\n\tid = VertexAttachment.nextID++;\r\n\r\n\t/** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\r\n\t * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\r\n\t * if this attachment has no weights. */\r\n\tbones: Array<number> | null = null;\r\n\r\n\t/** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\r\n\t * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\r\n\t * each vertex. */\r\n\tvertices: NumberArrayLike = [];\r\n\r\n\t/** The maximum number of world vertex values that can be output by\r\n\t * {@link #computeWorldVertices()} using the `count` parameter. */\r\n\tworldVerticesLength = 0;\r\n\r\n\t/** Timelines for the timeline attachment are also applied to this attachment.\r\n\t * May be null if no attachment-specific timelines should be applied. */\r\n\ttimelineAttachment: Attachment = this;\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\t/** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\r\n\t * not empty, it is used to deform the vertices.\r\n\t *\r\n\t * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n\t * Runtimes Guide.\r\n\t * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\r\n\t * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\r\n\t * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\r\n\t *           `stride` / 2.\r\n\t * @param offset The `worldVertices` index to begin writing values.\r\n\t * @param stride The number of `worldVertices` entries between the value pairs written. */\r\n\tcomputeWorldVertices (slot: Slot, start: number, count: number, worldVertices: NumberArrayLike, offset: number, stride: number) {\r\n\t\tcount = offset + (count >> 1) * stride;\r\n\t\tlet skeleton = slot.bone.skeleton;\r\n\t\tlet deformArray = slot.deform;\r\n\t\tlet vertices = this.vertices;\r\n\t\tlet bones = this.bones;\r\n\t\tif (!bones) {\r\n\t\t\tif (deformArray.length > 0) vertices = deformArray;\r\n\t\t\tlet bone = slot.bone;\r\n\t\t\tlet x = bone.worldX;\r\n\t\t\tlet y = bone.worldY;\r\n\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\r\n\t\t\tfor (let v = start, w = offset; w < count; v += 2, w += stride) {\r\n\t\t\t\tlet vx = vertices[v], vy = vertices[v + 1];\r\n\t\t\t\tworldVertices[w] = vx * a + vy * b + x;\r\n\t\t\t\tworldVertices[w + 1] = vx * c + vy * d + y;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet v = 0, skip = 0;\r\n\t\tfor (let i = 0; i < start; i += 2) {\r\n\t\t\tlet n = bones[v];\r\n\t\t\tv += n + 1;\r\n\t\t\tskip += n;\r\n\t\t}\r\n\t\tlet skeletonBones = skeleton.bones;\r\n\t\tif (deformArray.length == 0) {\r\n\t\t\tfor (let w = offset, b = skip * 3; w < count; w += stride) {\r\n\t\t\t\tlet wx = 0, wy = 0;\r\n\t\t\t\tlet n = bones[v++];\r\n\t\t\t\tn += v;\r\n\t\t\t\tfor (; v < n; v++, b += 3) {\r\n\t\t\t\t\tlet bone = skeletonBones[bones[v]];\r\n\t\t\t\t\tlet vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\r\n\t\t\t\t\twx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\r\n\t\t\t\t\twy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\r\n\t\t\t\t}\r\n\t\t\t\tworldVertices[w] = wx;\r\n\t\t\t\tworldVertices[w + 1] = wy;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet deform = deformArray;\r\n\t\t\tfor (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\r\n\t\t\t\tlet wx = 0, wy = 0;\r\n\t\t\t\tlet n = bones[v++];\r\n\t\t\t\tn += v;\r\n\t\t\t\tfor (; v < n; v++, b += 3, f += 2) {\r\n\t\t\t\t\tlet bone = skeletonBones[bones[v]];\r\n\t\t\t\t\tlet vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\r\n\t\t\t\t\twx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\r\n\t\t\t\t\twy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\r\n\t\t\t\t}\r\n\t\t\t\tworldVertices[w] = wx;\r\n\t\t\t\tworldVertices[w + 1] = wy;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** Does not copy id (generated) or name (set on construction). **/\r\n\tcopyTo (attachment: VertexAttachment) {\r\n\t\tif (this.bones) {\r\n\t\t\tattachment.bones = new Array<number>(this.bones.length);\r\n\t\t\tUtils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\r\n\t\t} else\r\n\t\t\tattachment.bones = null;\r\n\r\n\t\tif (this.vertices) {\r\n\t\t\tattachment.vertices = Utils.newFloatArray(this.vertices.length);\r\n\t\t\tUtils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\r\n\t\t}\r\n\r\n\t\tattachment.worldVerticesLength = this.worldVerticesLength;\r\n\t\tattachment.timelineAttachment = this.timelineAttachment;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { TextureRegion } from \"../Texture.js\";\r\nimport { Slot } from \"../Slot.js\";\r\nimport { HasTextureRegion } from \"./HasTextureRegion.js\";\r\nimport { Utils } from \"../Utils.js\";\r\n\r\n\r\nexport class Sequence {\r\n\tprivate static _nextID = 0;\r\n\r\n\tid = Sequence.nextID();\r\n\tregions: TextureRegion[];\r\n\tstart = 0;\r\n\tdigits = 0;\r\n\t/** The index of the region to show for the setup pose. */\r\n\tsetupIndex = 0;\r\n\r\n\tconstructor (count: number) {\r\n\t\tthis.regions = new Array<TextureRegion>(count);\r\n\t}\r\n\r\n\tcopy (): Sequence {\r\n\t\tlet copy = new Sequence(this.regions.length);\r\n\t\tUtils.arrayCopy(this.regions, 0, copy.regions, 0, this.regions.length);\r\n\t\tcopy.start = this.start;\r\n\t\tcopy.digits = this.digits;\r\n\t\tcopy.setupIndex = this.setupIndex;\r\n\t\treturn copy;\r\n\t}\r\n\r\n\tapply (slot: Slot, attachment: HasTextureRegion) {\r\n\t\tlet index = slot.sequenceIndex;\r\n\t\tif (index == -1) index = this.setupIndex;\r\n\t\tif (index >= this.regions.length) index = this.regions.length - 1;\r\n\t\tlet region = this.regions[index];\r\n\t\tif (attachment.region != region) {\r\n\t\t\tattachment.region = region;\r\n\t\t\tattachment.updateRegion();\r\n\t\t}\r\n\t}\r\n\r\n\tgetPath (basePath: string, index: number): string {\r\n\t\tlet result = basePath;\r\n\t\tlet frame = (this.start + index).toString();\r\n\t\tfor (let i = this.digits - frame.length; i > 0; i--)\r\n\t\t\tresult += \"0\";\r\n\t\tresult += frame;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate static nextID (): number {\r\n\t\treturn Sequence._nextID++;\r\n\t}\r\n}\r\n\r\nexport enum SequenceMode {\r\n\thold = 0,\r\n\tonce = 1,\r\n\tloop = 2,\r\n\tpingpong = 3,\r\n\tonceReverse = 4,\r\n\tloopReverse = 5,\r\n\tpingpongReverse = 6\r\n}\r\n\r\nexport const SequenceModeValues = [\r\n\tSequenceMode.hold,\r\n\tSequenceMode.once,\r\n\tSequenceMode.loop,\r\n\tSequenceMode.pingpong,\r\n\tSequenceMode.onceReverse,\r\n\tSequenceMode.loopReverse,\r\n\tSequenceMode.pingpongReverse\r\n];\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { VertexAttachment, Attachment } from \"./attachments/Attachment.js\";\r\nimport { IkConstraint } from \"./IkConstraint.js\";\r\nimport { PathConstraint } from \"./PathConstraint.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { Slot } from \"./Slot.js\";\r\nimport { TransformConstraint } from \"./TransformConstraint.js\";\r\nimport { StringSet, Utils, MathUtils, NumberArrayLike } from \"./Utils.js\";\r\nimport { Event } from \"./Event.js\";\r\nimport { HasTextureRegion } from \"./attachments/HasTextureRegion.js\";\r\nimport { SequenceMode, SequenceModeValues } from \"./attachments/Sequence.js\";\r\n\r\n/** A simple container for a list of timelines and a name. */\r\nexport class Animation {\r\n\t/** The animation's name, which is unique across all animations in the skeleton. */\r\n\tname: string;\r\n\ttimelines: Array<Timeline> = [];\r\n\ttimelineIds: StringSet = new StringSet();\r\n\r\n\t/** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */\r\n\tduration: number;\r\n\r\n\tconstructor (name: string, timelines: Array<Timeline>, duration: number) {\r\n\t\tif (!name) throw new Error(\"name cannot be null.\");\r\n\t\tthis.name = name;\r\n\t\tthis.setTimelines(timelines);\r\n\t\tthis.duration = duration;\r\n\t}\r\n\r\n\tsetTimelines (timelines: Array<Timeline>) {\r\n\t\tif (!timelines) throw new Error(\"timelines cannot be null.\");\r\n\t\tthis.timelines = timelines;\r\n\t\tthis.timelineIds.clear();\r\n\t\tfor (var i = 0; i < timelines.length; i++)\r\n\t\t\tthis.timelineIds.addAll(timelines[i].getPropertyIds());\r\n\t}\r\n\r\n\thasTimeline (ids: string[]): boolean {\r\n\t\tfor (let i = 0; i < ids.length; i++)\r\n\t\t\tif (this.timelineIds.contains(ids[i])) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** Applies all the animation's timelines to the specified skeleton.\r\n\t *\r\n\t * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\r\n\t * @param loop If true, the animation repeats after {@link #getDuration()}.\r\n\t * @param events May be null to ignore fired events. */\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, loop: boolean, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\r\n\t\tif (loop && this.duration != 0) {\r\n\t\t\ttime %= this.duration;\r\n\t\t\tif (lastTime > 0) lastTime %= this.duration;\r\n\t\t}\r\n\r\n\t\tlet timelines = this.timelines;\r\n\t\tfor (let i = 0, n = timelines.length; i < n; i++)\r\n\t\t\ttimelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\r\n\t}\r\n}\r\n\r\n/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\r\n * < 1.\r\n *\r\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\r\nexport enum MixBlend {\r\n\t/** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\r\n\t * value is set. */\r\n\tsetup,\r\n\t/** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\r\n\t * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\r\n\t * {@link AttachmentTimeline}, use the setup value before the first key.\r\n\t *\r\n\t * `first` is intended for the first animations applied, not for animations layered on top of those. */\r\n\tfirst,\r\n\t/** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\r\n\t * kept until the first key).\r\n\t *\r\n\t * `replace` is intended for animations layered on top of others, not for the first animations applied. */\r\n\treplace,\r\n\t/** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\r\n\t * (the current value is kept until the first key).\r\n\t *\r\n\t * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\r\n\t * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\r\n\t * the property values will increase continually. */\r\n\tadd\r\n}\r\n\r\n/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\r\n * mixing in toward 1 (the timeline's value).\r\n *\r\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\r\nexport enum MixDirection {\r\n\tmixIn, mixOut\r\n}\r\n\r\nconst Property = {\r\n\trotate: 0,\r\n\tx: 1,\r\n\ty: 2,\r\n\tscaleX: 3,\r\n\tscaleY: 4,\r\n\tshearX: 5,\r\n\tshearY: 6,\r\n\r\n\trgb: 7,\r\n\talpha: 8,\r\n\trgb2: 9,\r\n\r\n\tattachment: 10,\r\n\tdeform: 11,\r\n\r\n\tevent: 12,\r\n\tdrawOrder: 13,\r\n\r\n\tikConstraint: 14,\r\n\ttransformConstraint: 15,\r\n\r\n\tpathConstraintPosition: 16,\r\n\tpathConstraintSpacing: 17,\r\n\tpathConstraintMix: 18,\r\n\r\n\tsequence: 19\r\n}\r\n\r\n/** The interface for all timelines. */\r\nexport abstract class Timeline {\r\n\tpropertyIds: string[];\r\n\tframes: NumberArrayLike;\r\n\r\n\tconstructor (frameCount: number, propertyIds: string[]) {\r\n\t\tthis.propertyIds = propertyIds;\r\n\t\tthis.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());\r\n\t}\r\n\r\n\tgetPropertyIds () {\r\n\t\treturn this.propertyIds;\r\n\t}\r\n\r\n\tgetFrameEntries (): number {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tgetFrameCount () {\r\n\t\treturn this.frames.length / this.getFrameEntries();\r\n\t}\r\n\r\n\tgetDuration (): number {\r\n\t\treturn this.frames[this.frames.length - this.getFrameEntries()];\r\n\t}\r\n\r\n\tabstract apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event> | null, alpha: number, blend: MixBlend, direction: MixDirection): void;\r\n\r\n\tstatic search1 (frames: NumberArrayLike, time: number) {\r\n\t\tlet n = frames.length;\r\n\t\tfor (let i = 1; i < n; i++)\r\n\t\t\tif (frames[i] > time) return i - 1;\r\n\t\treturn n - 1;\r\n\t}\r\n\r\n\tstatic search (frames: NumberArrayLike, time: number, step: number) {\r\n\t\tlet n = frames.length;\r\n\t\tfor (let i = step; i < n; i += step)\r\n\t\t\tif (frames[i] > time) return i - step;\r\n\t\treturn n - step;\r\n\t}\r\n}\r\n\r\nexport interface BoneTimeline {\r\n\t/** The index of the bone in {@link Skeleton#bones} that will be changed. */\r\n\tboneIndex: number;\r\n}\r\n\r\nexport interface SlotTimeline {\r\n\t/** The index of the slot in {@link Skeleton#slots} that will be changed. */\r\n\tslotIndex: number;\r\n}\r\n\r\n/** The base class for timelines that use interpolation between key frame values. */\r\nexport abstract class CurveTimeline extends Timeline {\r\n\tprotected curves: NumberArrayLike; // type, x, y, ...\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, propertyIds: string[]) {\r\n\t\tsuper(frameCount, propertyIds);\r\n\t\tthis.curves = Utils.newFloatArray(frameCount + bezierCount * 18/*BEZIER_SIZE*/);\r\n\t\tthis.curves[frameCount - 1] = 1/*STEPPED*/;\r\n\t}\r\n\r\n\t/** Sets the specified key frame to linear interpolation. */\r\n\tsetLinear (frame: number) {\r\n\t\tthis.curves[frame] = 0/*LINEAR*/;\r\n\t}\r\n\r\n\t/** Sets the specified key frame to stepped interpolation. */\r\n\tsetStepped (frame: number) {\r\n\t\tthis.curves[frame] = 1/*STEPPED*/;\r\n\t}\r\n\r\n\t/** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\r\n\t * than the actual number of Bezier curves. */\r\n\tshrink (bezierCount: number) {\r\n\t\tlet size = this.getFrameCount() + bezierCount * 18/*BEZIER_SIZE*/;\r\n\t\tif (this.curves.length > size) {\r\n\t\t\tlet newCurves = Utils.newFloatArray(size);\r\n\t\t\tUtils.arrayCopy(this.curves, 0, newCurves, 0, size);\r\n\t\t\tthis.curves = newCurves;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\r\n\t * one curve per frame.\r\n\t * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\r\n\t *           in the constructor), inclusive.\r\n\t * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\r\n\t * @param value The index of the value for this frame that this curve is used for.\r\n\t * @param time1 The time for the first key.\r\n\t * @param value1 The value for the first key.\r\n\t * @param cx1 The time for the first Bezier handle.\r\n\t * @param cy1 The value for the first Bezier handle.\r\n\t * @param cx2 The time of the second Bezier handle.\r\n\t * @param cy2 The value for the second Bezier handle.\r\n\t * @param time2 The time for the second key.\r\n\t * @param value2 The value for the second key. */\r\n\tsetBezier (bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\r\n\t\tcy2: number, time2: number, value2: number) {\r\n\t\tlet curves = this.curves;\r\n\t\tlet i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\r\n\t\tif (value == 0) curves[frame] = 2/*BEZIER*/ + i;\r\n\t\tlet tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = (value1 - cy1 * 2 + cy2) * 0.03;\r\n\t\tlet dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;\r\n\t\tlet ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\r\n\t\tlet dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;\r\n\t\tlet x = time1 + dx, y = value1 + dy;\r\n\t\tfor (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\r\n\t\t\tcurves[i] = x;\r\n\t\t\tcurves[i + 1] = y;\r\n\t\t\tdx += ddx;\r\n\t\t\tdy += ddy;\r\n\t\t\tddx += dddx;\r\n\t\t\tddy += dddy;\r\n\t\t\tx += dx;\r\n\t\t\ty += dy;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Returns the Bezier interpolated value for the specified time.\r\n\t * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\r\n\t * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\r\n\t * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */\r\n\tgetBezierValue (time: number, frameIndex: number, valueOffset: number, i: number) {\r\n\t\tlet curves = this.curves;\r\n\t\tif (curves[i] > time) {\r\n\t\t\tlet x = this.frames[frameIndex], y = this.frames[frameIndex + valueOffset];\r\n\t\t\treturn y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n\t\t}\r\n\t\tlet n = i + 18/*BEZIER_SIZE*/;\r\n\t\tfor (i += 2; i < n; i += 2) {\r\n\t\t\tif (curves[i] >= time) {\r\n\t\t\t\tlet x = curves[i - 2], y = curves[i - 1];\r\n\t\t\t\treturn y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tframeIndex += this.getFrameEntries();\r\n\t\tlet x = curves[n - 2], y = curves[n - 1];\r\n\t\treturn y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);\r\n\t}\r\n}\r\n\r\nexport abstract class CurveTimeline1 extends CurveTimeline {\r\n\tconstructor (frameCount: number, bezierCount: number, propertyId: string) {\r\n\t\tsuper(frameCount, bezierCount, [propertyId]);\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 2/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** Sets the time and value for the specified frame.\r\n\t * @param frame Between 0 and <code>frameCount</code>, inclusive.\r\n\t * @param time The frame time in seconds. */\r\n\tsetFrame (frame: number, time: number, value: number) {\r\n\t\tframe <<= 1;\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.frames[frame + 1/*VALUE*/] = value;\r\n\t}\r\n\r\n\t/** Returns the interpolated value for the specified time. */\r\n\tgetCurveValue (time: number) {\r\n\t\tlet frames = this.frames;\r\n\t\tlet i = frames.length - 2;\r\n\t\tfor (let ii = 2; ii <= i; ii += 2) {\r\n\t\t\tif (frames[ii] > time) {\r\n\t\t\t\ti = ii - 2;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet curveType = this.curves[i >> 1];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i], value = frames[i + 1/*VALUE*/];\r\n\t\t\t\treturn value + (time - before) / (frames[i + 2/*ENTRIES*/] - before) * (frames[i + 2/*ENTRIES*/ + 1/*VALUE*/] - value);\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\treturn frames[i + 1/*VALUE*/];\r\n\t\t}\r\n\t\treturn this.getBezierValue(time, i, 1/*VALUE*/, curveType - 2/*BEZIER*/);\r\n\t}\r\n}\r\n\r\n/** The base class for a {@link CurveTimeline} which sets two properties. */\r\nexport abstract class CurveTimeline2 extends CurveTimeline {\r\n\t/** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\r\n\t * @param propertyIds Unique identifiers for the properties the timeline modifies. */\r\n\tconstructor (frameCount: number, bezierCount: number, propertyId1: string, propertyId2: string) {\r\n\t\tsuper(frameCount, bezierCount, [propertyId1, propertyId2]);\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 3/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** Sets the time and values for the specified frame.\r\n\t * @param frame Between 0 and <code>frameCount</code>, inclusive.\r\n\t * @param time The frame time in seconds. */\r\n\tsetFrame (frame: number, time: number, value1: number, value2: number) {\r\n\t\tframe *= 3/*ENTRIES*/;\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.frames[frame + 1/*VALUE1*/] = value1;\r\n\t\tthis.frames[frame + 2/*VALUE2*/] = value2;\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#rotation}. */\r\nexport class RotateTimeline extends CurveTimeline1 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.rotate + \"|\" + boneIndex);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event> | null, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.rotation = bone.data.rotation;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.rotation += (bone.data.rotation - bone.rotation) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet r = this.getCurveValue(time);\r\n\t\tswitch (blend) {\r\n\t\t\tcase MixBlend.setup:\r\n\t\t\t\tbone.rotation = bone.data.rotation + r * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.first:\r\n\t\t\tcase MixBlend.replace:\r\n\t\t\t\tr += bone.data.rotation - bone.rotation;\r\n\t\t\tcase MixBlend.add:\r\n\t\t\t\tbone.rotation += r * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */\r\nexport class TranslateTimeline extends CurveTimeline2 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount,\r\n\t\t\tProperty.x + \"|\" + boneIndex,\r\n\t\t\tProperty.y + \"|\" + boneIndex,\r\n\t\t);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.x = bone.data.x;\r\n\t\t\t\t\tbone.y = bone.data.y;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.x += (bone.data.x - bone.x) * alpha;\r\n\t\t\t\t\tbone.y += (bone.data.y - bone.y) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet x = 0, y = 0;\r\n\t\tlet i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i / 3/*ENTRIES*/];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\r\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n\t\t\t\tx += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n\t\t\t\ty += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\r\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tx = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\ty = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t}\r\n\r\n\t\tswitch (blend) {\r\n\t\t\tcase MixBlend.setup:\r\n\t\t\t\tbone.x = bone.data.x + x * alpha;\r\n\t\t\t\tbone.y = bone.data.y + y * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.first:\r\n\t\t\tcase MixBlend.replace:\r\n\t\t\t\tbone.x += (bone.data.x + x - bone.x) * alpha;\r\n\t\t\t\tbone.y += (bone.data.y + y - bone.y) * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.add:\r\n\t\t\t\tbone.x += x * alpha;\r\n\t\t\t\tbone.y += y * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x}. */\r\nexport class TranslateXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.x + \"|\" + boneIndex);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.x = bone.data.x;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.x += (bone.data.x - bone.x) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet x = this.getCurveValue(time);\r\n\t\tswitch (blend) {\r\n\t\t\tcase MixBlend.setup:\r\n\t\t\t\tbone.x = bone.data.x + x * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.first:\r\n\t\t\tcase MixBlend.replace:\r\n\t\t\t\tbone.x += (bone.data.x + x - bone.x) * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.add:\r\n\t\t\t\tbone.x += x * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#x}. */\r\nexport class TranslateYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.y + \"|\" + boneIndex);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.y = bone.data.y;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.y += (bone.data.y - bone.y) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet y = this.getCurveValue(time);\r\n\t\tswitch (blend) {\r\n\t\t\tcase MixBlend.setup:\r\n\t\t\t\tbone.y = bone.data.y + y * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.first:\r\n\t\t\tcase MixBlend.replace:\r\n\t\t\t\tbone.y += (bone.data.y + y - bone.y) * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.add:\r\n\t\t\t\tbone.y += y * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\r\nexport class ScaleTimeline extends CurveTimeline2 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount,\r\n\t\t\tProperty.scaleX + \"|\" + boneIndex,\r\n\t\t\tProperty.scaleY + \"|\" + boneIndex\r\n\t\t);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.scaleX = bone.data.scaleX;\r\n\t\t\t\t\tbone.scaleY = bone.data.scaleY;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\r\n\t\t\t\t\tbone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet x, y;\r\n\t\tlet i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i / 3/*ENTRIES*/];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\r\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n\t\t\t\tx += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n\t\t\t\ty += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\r\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tx = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\ty = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t}\r\n\t\tx *= bone.data.scaleX;\r\n\t\ty *= bone.data.scaleY;\r\n\r\n\t\tif (alpha == 1) {\r\n\t\t\tif (blend == MixBlend.add) {\r\n\t\t\t\tbone.scaleX += x - bone.data.scaleX;\r\n\t\t\t\tbone.scaleY += y - bone.data.scaleY;\r\n\t\t\t} else {\r\n\t\t\t\tbone.scaleX = x;\r\n\t\t\t\tbone.scaleY = y;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet bx = 0, by = 0;\r\n\t\t\tif (direction == MixDirection.mixOut) {\r\n\t\t\t\tswitch (blend) {\r\n\t\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\t\tbx = bone.data.scaleX;\r\n\t\t\t\t\t\tby = bone.data.scaleY;\r\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\t\tbx = bone.scaleX;\r\n\t\t\t\t\t\tby = bone.scaleY;\r\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\t\tbone.scaleX += (x - bone.data.scaleX) * alpha;\r\n\t\t\t\t\t\tbone.scaleY += (y - bone.data.scaleY) * alpha;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tswitch (blend) {\r\n\t\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\t\tbx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\r\n\t\t\t\t\t\tby = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\r\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\r\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\t\tbx = Math.abs(bone.scaleX) * MathUtils.signum(x);\r\n\t\t\t\t\t\tby = Math.abs(bone.scaleY) * MathUtils.signum(y);\r\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\r\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\t\tbone.scaleX += (x - bone.data.scaleX) * alpha;\r\n\t\t\t\t\t\tbone.scaleY += (y - bone.data.scaleY) * alpha;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\r\nexport class ScaleXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.scaleX = bone.data.scaleX;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet x = this.getCurveValue(time) * bone.data.scaleX;\r\n\t\tif (alpha == 1) {\r\n\t\t\tif (blend == MixBlend.add)\r\n\t\t\t\tbone.scaleX += x - bone.data.scaleX;\r\n\t\t\telse\r\n\t\t\t\tbone.scaleX = x;\r\n\t\t} else {\r\n\t\t\t// Mixing out uses sign of setup or current pose, else use sign of key.\r\n\t\t\tlet bx = 0;\r\n\t\t\tif (direction == MixDirection.mixOut) {\r\n\t\t\t\tswitch (blend) {\r\n\t\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\t\tbx = bone.data.scaleX;\r\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\t\tbx = bone.scaleX;\r\n\t\t\t\t\t\tbone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\t\tbone.scaleX += (x - bone.data.scaleX) * alpha;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tswitch (blend) {\r\n\t\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\t\tbx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\r\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\t\tbx = Math.abs(bone.scaleX) * MathUtils.signum(x);\r\n\t\t\t\t\t\tbone.scaleX = bx + (x - bx) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\t\tbone.scaleX += (x - bone.data.scaleX) * alpha;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\r\nexport class ScaleYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.scaleY + \"|\" + boneIndex);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.scaleY = bone.data.scaleY;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet y = this.getCurveValue(time) * bone.data.scaleY;\r\n\t\tif (alpha == 1) {\r\n\t\t\tif (blend == MixBlend.add)\r\n\t\t\t\tbone.scaleY += y - bone.data.scaleY;\r\n\t\t\telse\r\n\t\t\t\tbone.scaleY = y;\r\n\t\t} else {\r\n\t\t\t// Mixing out uses sign of setup or current pose, else use sign of key.\r\n\t\t\tlet by = 0;\r\n\t\t\tif (direction == MixDirection.mixOut) {\r\n\t\t\t\tswitch (blend) {\r\n\t\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\t\tby = bone.data.scaleY;\r\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\t\tby = bone.scaleY;\r\n\t\t\t\t\t\tbone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\t\tbone.scaleY += (y - bone.data.scaleY) * alpha;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tswitch (blend) {\r\n\t\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\t\tby = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\r\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\t\tby = Math.abs(bone.scaleY) * MathUtils.signum(y);\r\n\t\t\t\t\t\tbone.scaleY = by + (y - by) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\t\tbone.scaleY += (y - bone.data.scaleY) * alpha;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\r\nexport class ShearTimeline extends CurveTimeline2 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount,\r\n\t\t\tProperty.shearX + \"|\" + boneIndex,\r\n\t\t\tProperty.shearY + \"|\" + boneIndex\r\n\t\t);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.shearX = bone.data.shearX;\r\n\t\t\t\t\tbone.shearY = bone.data.shearY;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.shearX += (bone.data.shearX - bone.shearX) * alpha;\r\n\t\t\t\t\tbone.shearY += (bone.data.shearY - bone.shearY) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet x = 0, y = 0;\r\n\t\tlet i = Timeline.search(frames, time, 3/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i / 3/*ENTRIES*/];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\r\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 3/*ENTRIES*/] - before);\r\n\t\t\t\tx += (frames[i + 3/*ENTRIES*/ + 1/*VALUE1*/] - x) * t;\r\n\t\t\t\ty += (frames[i + 3/*ENTRIES*/ + 2/*VALUE2*/] - y) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tx = frames[i + 1/*VALUE1*/];\r\n\t\t\t\ty = frames[i + 2/*VALUE2*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tx = this.getBezierValue(time, i, 1/*VALUE1*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\ty = this.getBezierValue(time, i, 2/*VALUE2*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t}\r\n\r\n\t\tswitch (blend) {\r\n\t\t\tcase MixBlend.setup:\r\n\t\t\t\tbone.shearX = bone.data.shearX + x * alpha;\r\n\t\t\t\tbone.shearY = bone.data.shearY + y * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.first:\r\n\t\t\tcase MixBlend.replace:\r\n\t\t\t\tbone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\r\n\t\t\t\tbone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.add:\r\n\t\t\t\tbone.shearX += x * alpha;\r\n\t\t\t\tbone.shearY += y * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\r\nexport class ShearXTimeline extends CurveTimeline1 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.shearX = bone.data.shearX;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.shearX += (bone.data.shearX - bone.shearX) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet x = this.getCurveValue(time);\r\n\t\tswitch (blend) {\r\n\t\t\tcase MixBlend.setup:\r\n\t\t\t\tbone.shearX = bone.data.shearX + x * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.first:\r\n\t\t\tcase MixBlend.replace:\r\n\t\t\t\tbone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.add:\r\n\t\t\t\tbone.shearX += x * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\r\nexport class ShearYTimeline extends CurveTimeline1 implements BoneTimeline {\r\n\tboneIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, boneIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.shearY + \"|\" + boneIndex);\r\n\t\tthis.boneIndex = boneIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet bone = skeleton.bones[this.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.shearY = bone.data.shearY;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tbone.shearY += (bone.data.shearY - bone.shearY) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet y = this.getCurveValue(time);\r\n\t\tswitch (blend) {\r\n\t\t\tcase MixBlend.setup:\r\n\t\t\t\tbone.shearY = bone.data.shearY + y * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.first:\r\n\t\t\tcase MixBlend.replace:\r\n\t\t\t\tbone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\r\n\t\t\t\tbreak;\r\n\t\t\tcase MixBlend.add:\r\n\t\t\t\tbone.shearY += y * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color}. */\r\nexport class RGBATimeline extends CurveTimeline implements SlotTimeline {\r\n\tslotIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.rgb + \"|\" + slotIndex,\r\n\t\t\tProperty.alpha + \"|\" + slotIndex\r\n\t\t]);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 5/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\r\n\tsetFrame (frame: number, time: number, r: number, g: number, b: number, a: number) {\r\n\t\tframe *= 5/*ENTRIES*/;\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.frames[frame + 1/*R*/] = r;\r\n\t\tthis.frames[frame + 2/*G*/] = g;\r\n\t\tthis.frames[frame + 3/*B*/] = b;\r\n\t\tthis.frames[frame + 4/*A*/] = a;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tlet color = slot.color;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tlet setup = slot.data.color;\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tcolor.setFromColor(setup);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcolor.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha,\r\n\t\t\t\t\t\t(setup.a - color.a) * alpha);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet r = 0, g = 0, b = 0, a = 0;\r\n\t\tlet i = Timeline.search(frames, time, 5/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i / 5/*ENTRIES*/];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\ta = frames[i + 4/*A*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 5/*ENTRIES*/] - before);\r\n\t\t\t\tr += (frames[i + 5/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n\t\t\t\tg += (frames[i + 5/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n\t\t\t\tb += (frames[i + 5/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n\t\t\t\ta += (frames[i + 5/*ENTRIES*/ + 4/*A*/] - a) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\ta = frames[i + 4/*A*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n\t\t\t\ta = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n\t\t}\r\n\t\tif (alpha == 1)\r\n\t\t\tcolor.set(r, g, b, a);\r\n\t\telse {\r\n\t\t\tif (blend == MixBlend.setup) color.setFromColor(slot.data.color);\r\n\t\t\tcolor.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color}. */\r\nexport class RGBTimeline extends CurveTimeline implements SlotTimeline {\r\n\tslotIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.rgb + \"|\" + slotIndex\r\n\t\t]);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 4/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\r\n\tsetFrame (frame: number, time: number, r: number, g: number, b: number) {\r\n\t\tframe <<= 2;\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.frames[frame + 1/*R*/] = r;\r\n\t\tthis.frames[frame + 2/*G*/] = g;\r\n\t\tthis.frames[frame + 3/*B*/] = b;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tlet color = slot.color;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tlet setup = slot.data.color;\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tcolor.r = setup.r;\r\n\t\t\t\t\tcolor.g = setup.g;\r\n\t\t\t\t\tcolor.b = setup.b;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcolor.r += (setup.r - color.r) * alpha;\r\n\t\t\t\t\tcolor.g += (setup.g - color.g) * alpha;\r\n\t\t\t\t\tcolor.b += (setup.b - color.b) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet r = 0, g = 0, b = 0;\r\n\t\tlet i = Timeline.search(frames, time, 4/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i >> 2];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\r\n\t\t\t\tr += (frames[i + 4/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n\t\t\t\tg += (frames[i + 4/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n\t\t\t\tb += (frames[i + 4/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n\t\t}\r\n\t\tif (alpha == 1) {\r\n\t\t\tcolor.r = r;\r\n\t\t\tcolor.g = g;\r\n\t\t\tcolor.b = b;\r\n\t\t} else {\r\n\t\t\tif (blend == MixBlend.setup) {\r\n\t\t\t\tlet setup = slot.data.color;\r\n\t\t\t\tcolor.r = setup.r;\r\n\t\t\t\tcolor.g = setup.g;\r\n\t\t\t\tcolor.b = setup.b;\r\n\t\t\t}\r\n\t\t\tcolor.r += (r - color.r) * alpha;\r\n\t\t\tcolor.g += (g - color.g) * alpha;\r\n\t\t\tcolor.b += (b - color.b) * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\r\nexport class AlphaTimeline extends CurveTimeline1 implements SlotTimeline {\r\n\tslotIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.alpha + \"|\" + slotIndex);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\r\n\t\tlet color = slot.color;\r\n\t\tif (time < this.frames[0]) { // Time is before first frame.\r\n\t\t\tlet setup = slot.data.color;\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tcolor.a = setup.a;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcolor.a += (setup.a - color.a) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet a = this.getCurveValue(time);\r\n\t\tif (alpha == 1)\r\n\t\t\tcolor.a = a;\r\n\t\telse {\r\n\t\t\tif (blend == MixBlend.setup) color.a = slot.data.color.a;\r\n\t\t\tcolor.a += (a - color.a) * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\r\nexport class RGBA2Timeline extends CurveTimeline implements SlotTimeline {\r\n\tslotIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.rgb + \"|\" + slotIndex,\r\n\t\t\tProperty.alpha + \"|\" + slotIndex,\r\n\t\t\tProperty.rgb2 + \"|\" + slotIndex\r\n\t\t]);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 8/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** Sets the time in seconds, light, and dark colors for the specified key frame. */\r\n\tsetFrame (frame: number, time: number, r: number, g: number, b: number, a: number, r2: number, g2: number, b2: number) {\r\n\t\tframe <<= 3;\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.frames[frame + 1/*R*/] = r;\r\n\t\tthis.frames[frame + 2/*G*/] = g;\r\n\t\tthis.frames[frame + 3/*B*/] = b;\r\n\t\tthis.frames[frame + 4/*A*/] = a;\r\n\t\tthis.frames[frame + 5/*R2*/] = r2;\r\n\t\tthis.frames[frame + 6/*G2*/] = g2;\r\n\t\tthis.frames[frame + 7/*B2*/] = b2;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tlet light = slot.color, dark = slot.darkColor!;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tlet setupLight = slot.data.color, setupDark = slot.data.darkColor!;\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tlight.setFromColor(setupLight);\r\n\t\t\t\t\tdark.r = setupDark.r;\r\n\t\t\t\t\tdark.g = setupDark.g;\r\n\t\t\t\t\tdark.b = setupDark.b;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tlight.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha,\r\n\t\t\t\t\t\t(setupLight.a - light.a) * alpha);\r\n\t\t\t\t\tdark.r += (setupDark.r - dark.r) * alpha;\r\n\t\t\t\t\tdark.g += (setupDark.g - dark.g) * alpha;\r\n\t\t\t\t\tdark.b += (setupDark.b - dark.b) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\r\n\t\tlet i = Timeline.search(frames, time, 8/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i >> 3];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\ta = frames[i + 4/*A*/];\r\n\t\t\t\tr2 = frames[i + 5/*R2*/];\r\n\t\t\t\tg2 = frames[i + 6/*G2*/];\r\n\t\t\t\tb2 = frames[i + 7/*B2*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 8/*ENTRIES*/] - before);\r\n\t\t\t\tr += (frames[i + 8/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n\t\t\t\tg += (frames[i + 8/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n\t\t\t\tb += (frames[i + 8/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n\t\t\t\ta += (frames[i + 8/*ENTRIES*/ + 4/*A*/] - a) * t;\r\n\t\t\t\tr2 += (frames[i + 8/*ENTRIES*/ + 5/*R2*/] - r2) * t;\r\n\t\t\t\tg2 += (frames[i + 8/*ENTRIES*/ + 6/*G2*/] - g2) * t;\r\n\t\t\t\tb2 += (frames[i + 8/*ENTRIES*/ + 7/*B2*/] - b2) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\ta = frames[i + 4/*A*/];\r\n\t\t\t\tr2 = frames[i + 5/*R2*/];\r\n\t\t\t\tg2 = frames[i + 6/*G2*/];\r\n\t\t\t\tb2 = frames[i + 7/*B2*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n\t\t\t\ta = this.getBezierValue(time, i, 4/*A*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n\t\t\t\tr2 = this.getBezierValue(time, i, 5/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n\t\t\t\tg2 = this.getBezierValue(time, i, 6/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n\t\t\t\tb2 = this.getBezierValue(time, i, 7/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 6 - 2/*BEZIER*/);\r\n\t\t}\r\n\r\n\t\tif (alpha == 1) {\r\n\t\t\tlight.set(r, g, b, a);\r\n\t\t\tdark.r = r2;\r\n\t\t\tdark.g = g2;\r\n\t\t\tdark.b = b2;\r\n\t\t} else {\r\n\t\t\tif (blend == MixBlend.setup) {\r\n\t\t\t\tlight.setFromColor(slot.data.color);\r\n\t\t\t\tlet setupDark = slot.data.darkColor!;\r\n\t\t\t\tdark.r = setupDark.r;\r\n\t\t\t\tdark.g = setupDark.g;\r\n\t\t\t\tdark.b = setupDark.b;\r\n\t\t\t}\r\n\t\t\tlight.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\r\n\t\t\tdark.r += (r2 - dark.r) * alpha;\r\n\t\t\tdark.g += (g2 - dark.g) * alpha;\r\n\t\t\tdark.b += (b2 - dark.b) * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\r\nexport class RGB2Timeline extends CurveTimeline implements SlotTimeline {\r\n\tslotIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, slotIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.rgb + \"|\" + slotIndex,\r\n\t\t\tProperty.rgb2 + \"|\" + slotIndex\r\n\t\t]);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 7/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** Sets the time in seconds, light, and dark colors for the specified key frame. */\r\n\tsetFrame (frame: number, time: number, r: number, g: number, b: number, r2: number, g2: number, b2: number) {\r\n\t\tframe *= 7/*ENTRIES*/;\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.frames[frame + 1/*R*/] = r;\r\n\t\tthis.frames[frame + 2/*G*/] = g;\r\n\t\tthis.frames[frame + 3/*B*/] = b;\r\n\t\tthis.frames[frame + 4/*R2*/] = r2;\r\n\t\tthis.frames[frame + 5/*G2*/] = g2;\r\n\t\tthis.frames[frame + 6/*B2*/] = b2;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tlet light = slot.color, dark = slot.darkColor!;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tlet setupLight = slot.data.color, setupDark = slot.data.darkColor!;\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tlight.r = setupLight.r;\r\n\t\t\t\t\tlight.g = setupLight.g;\r\n\t\t\t\t\tlight.b = setupLight.b;\r\n\t\t\t\t\tdark.r = setupDark.r;\r\n\t\t\t\t\tdark.g = setupDark.g;\r\n\t\t\t\t\tdark.b = setupDark.b;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tlight.r += (setupLight.r - light.r) * alpha;\r\n\t\t\t\t\tlight.g += (setupLight.g - light.g) * alpha;\r\n\t\t\t\t\tlight.b += (setupLight.b - light.b) * alpha;\r\n\t\t\t\t\tdark.r += (setupDark.r - dark.r) * alpha;\r\n\t\t\t\t\tdark.g += (setupDark.g - dark.g) * alpha;\r\n\t\t\t\t\tdark.b += (setupDark.b - dark.b) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\r\n\t\tlet i = Timeline.search(frames, time, 7/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i / 7/*ENTRIES*/];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\tr2 = frames[i + 4/*R2*/];\r\n\t\t\t\tg2 = frames[i + 5/*G2*/];\r\n\t\t\t\tb2 = frames[i + 6/*B2*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\r\n\t\t\t\tr += (frames[i + 7/*ENTRIES*/ + 1/*R*/] - r) * t;\r\n\t\t\t\tg += (frames[i + 7/*ENTRIES*/ + 2/*G*/] - g) * t;\r\n\t\t\t\tb += (frames[i + 7/*ENTRIES*/ + 3/*B*/] - b) * t;\r\n\t\t\t\tr2 += (frames[i + 7/*ENTRIES*/ + 4/*R2*/] - r2) * t;\r\n\t\t\t\tg2 += (frames[i + 7/*ENTRIES*/ + 5/*G2*/] - g2) * t;\r\n\t\t\t\tb2 += (frames[i + 7/*ENTRIES*/ + 6/*B2*/] - b2) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tr = frames[i + 1/*R*/];\r\n\t\t\t\tg = frames[i + 2/*G*/];\r\n\t\t\t\tb = frames[i + 3/*B*/];\r\n\t\t\t\tr2 = frames[i + 4/*R2*/];\r\n\t\t\t\tg2 = frames[i + 5/*G2*/];\r\n\t\t\t\tb2 = frames[i + 6/*B2*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tr = this.getBezierValue(time, i, 1/*R*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\tg = this.getBezierValue(time, i, 2/*G*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t\t\tb = this.getBezierValue(time, i, 3/*B*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n\t\t\t\tr2 = this.getBezierValue(time, i, 4/*R2*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n\t\t\t\tg2 = this.getBezierValue(time, i, 5/*G2*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n\t\t\t\tb2 = this.getBezierValue(time, i, 6/*B2*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n\t\t}\r\n\r\n\t\tif (alpha == 1) {\r\n\t\t\tlight.r = r;\r\n\t\t\tlight.g = g;\r\n\t\t\tlight.b = b;\r\n\t\t\tdark.r = r2;\r\n\t\t\tdark.g = g2;\r\n\t\t\tdark.b = b2;\r\n\t\t} else {\r\n\t\t\tif (blend == MixBlend.setup) {\r\n\t\t\t\tlet setupLight = slot.data.color, setupDark = slot.data.darkColor!;\r\n\t\t\t\tlight.r = setupLight.r;\r\n\t\t\t\tlight.g = setupLight.g;\r\n\t\t\t\tlight.b = setupLight.b;\r\n\t\t\t\tdark.r = setupDark.r;\r\n\t\t\t\tdark.g = setupDark.g;\r\n\t\t\t\tdark.b = setupDark.b;\r\n\t\t\t}\r\n\t\t\tlight.r += (r - light.r) * alpha;\r\n\t\t\tlight.g += (g - light.g) * alpha;\r\n\t\t\tlight.b += (b - light.b) * alpha;\r\n\t\t\tdark.r += (r2 - dark.r) * alpha;\r\n\t\t\tdark.g += (g2 - dark.g) * alpha;\r\n\t\t\tdark.b += (b2 - dark.b) * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a slot's {@link Slot#attachment}. */\r\nexport class AttachmentTimeline extends Timeline implements SlotTimeline {\r\n\tslotIndex = 0;\r\n\r\n\t/** The attachment name for each key frame. May contain null values to clear the attachment. */\r\n\tattachmentNames: Array<string | null>;\r\n\r\n\tconstructor (frameCount: number, slotIndex: number) {\r\n\t\tsuper(frameCount, [\r\n\t\t\tProperty.attachment + \"|\" + slotIndex\r\n\t\t]);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t\tthis.attachmentNames = new Array<string>(frameCount);\r\n\t}\r\n\r\n\tgetFrameCount () {\r\n\t\treturn this.frames.length;\r\n\t}\r\n\r\n\t/** Sets the time in seconds and the attachment name for the specified key frame. */\r\n\tsetFrame (frame: number, time: number, attachmentName: string | null) {\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.attachmentNames[frame] = attachmentName;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\r\n\t\tif (direction == MixDirection.mixOut) {\r\n\t\t\tif (blend == MixBlend.setup) this.setAttachment(skeleton, slot, slot.data.attachmentName);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (time < this.frames[0]) {\r\n\t\t\tif (blend == MixBlend.setup || blend == MixBlend.first) this.setAttachment(skeleton, slot, slot.data.attachmentName);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.setAttachment(skeleton, slot, this.attachmentNames[Timeline.search1(this.frames, time)]);\r\n\t}\r\n\r\n\tsetAttachment (skeleton: Skeleton, slot: Slot, attachmentName: string | null) {\r\n\t\tslot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\r\n\t}\r\n}\r\n\r\n/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */\r\nexport class DeformTimeline extends CurveTimeline implements SlotTimeline {\r\n\tslotIndex = 0;\r\n\r\n\t/** The attachment that will be deformed. */\r\n\tattachment: VertexAttachment;\r\n\r\n\t/** The vertices for each key frame. */\r\n\tvertices: Array<NumberArrayLike>;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, slotIndex: number, attachment: VertexAttachment) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.deform + \"|\" + slotIndex + \"|\" + attachment.id\r\n\t\t]);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t\tthis.attachment = attachment;\r\n\t\tthis.vertices = new Array<NumberArrayLike>(frameCount);\r\n\t}\r\n\r\n\tgetFrameCount () {\r\n\t\treturn this.frames.length;\r\n\t}\r\n\r\n\t/** Sets the time in seconds and the vertices for the specified key frame.\r\n\t * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\r\n\tsetFrame (frame: number, time: number, vertices: NumberArrayLike) {\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.vertices[frame] = vertices;\r\n\t}\r\n\r\n\t/** @param value1 Ignored (0 is used for a deform timeline).\r\n\t * @param value2 Ignored (1 is used for a deform timeline). */\r\n\tsetBezier (bezier: number, frame: number, value: number, time1: number, value1: number, cx1: number, cy1: number, cx2: number,\r\n\t\tcy2: number, time2: number, value2: number) {\r\n\t\tlet curves = this.curves;\r\n\t\tlet i = this.getFrameCount() + bezier * 18/*BEZIER_SIZE*/;\r\n\t\tif (value == 0) curves[frame] = 2/*BEZIER*/ + i;\r\n\t\tlet tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = cy2 * 0.03 - cy1 * 0.06;\r\n\t\tlet dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = (cy1 - cy2 + 0.33333333) * 0.018;\r\n\t\tlet ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\r\n\t\tlet dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;\r\n\t\tlet x = time1 + dx, y = dy;\r\n\t\tfor (let n = i + 18/*BEZIER_SIZE*/; i < n; i += 2) {\r\n\t\t\tcurves[i] = x;\r\n\t\t\tcurves[i + 1] = y;\r\n\t\t\tdx += ddx;\r\n\t\t\tdy += ddy;\r\n\t\t\tddx += dddx;\r\n\t\t\tddy += dddy;\r\n\t\t\tx += dx;\r\n\t\t\ty += dy;\r\n\t\t}\r\n\t}\r\n\r\n\tgetCurvePercent (time: number, frame: number) {\r\n\t\tlet curves = this.curves;\r\n\t\tlet i = curves[frame];\r\n\t\tswitch (i) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet x = this.frames[frame];\r\n\t\t\t\treturn (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t\ti -= 2/*BEZIER*/;\r\n\t\tif (curves[i] > time) {\r\n\t\t\tlet x = this.frames[frame];\r\n\t\t\treturn curves[i + 1] * (time - x) / (curves[i] - x);\r\n\t\t}\r\n\t\tlet n = i + 18/*BEZIER_SIZE*/;\r\n\t\tfor (i += 2; i < n; i += 2) {\r\n\t\t\tif (curves[i] >= time) {\r\n\t\t\t\tlet x = curves[i - 2], y = curves[i - 1];\r\n\t\t\t\treturn y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet x = curves[n - 2], y = curves[n - 1];\r\n\t\treturn y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot: Slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\t\tlet slotAttachment: Attachment | null = slot.getAttachment();\r\n\t\tif (!slotAttachment) return;\r\n\t\tif (!(slotAttachment instanceof VertexAttachment) || (<VertexAttachment>slotAttachment).timelineAttachment != this.attachment) return;\r\n\r\n\t\tlet deform: Array<number> = slot.deform;\r\n\t\tif (deform.length == 0) blend = MixBlend.setup;\r\n\r\n\t\tlet vertices = this.vertices;\r\n\t\tlet vertexCount = vertices[0].length;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tdeform.length = 0;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tif (alpha == 1) {\r\n\t\t\t\t\t\tdeform.length = 0;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdeform.length = vertexCount;\r\n\t\t\t\t\tlet vertexAttachment = <VertexAttachment>slotAttachment;\r\n\t\t\t\t\tif (!vertexAttachment.bones) {\r\n\t\t\t\t\t\t// Unweighted vertex positions.\r\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\r\n\t\t\t\t\t\tfor (var i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\tdeform[i] += (setupVertices[i] - deform[i]) * alpha;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Weighted deform offsets.\r\n\t\t\t\t\t\talpha = 1 - alpha;\r\n\t\t\t\t\t\tfor (var i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\tdeform[i] *= alpha;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdeform.length = vertexCount;\r\n\t\tif (time >= frames[frames.length - 1]) { // Time is after last frame.\r\n\t\t\tlet lastVertices = vertices[frames.length - 1];\r\n\t\t\tif (alpha == 1) {\r\n\t\t\t\tif (blend == MixBlend.add) {\r\n\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\r\n\t\t\t\t\tif (!vertexAttachment.bones) {\r\n\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\r\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\r\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\tdeform[i] += lastVertices[i] - setupVertices[i];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Weighted deform offsets, with alpha.\r\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\tdeform[i] += lastVertices[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else\r\n\t\t\t\t\tUtils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\r\n\t\t\t} else {\r\n\t\t\t\tswitch (blend) {\r\n\t\t\t\t\tcase MixBlend.setup: {\r\n\t\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\r\n\t\t\t\t\t\tif (!vertexAttachment.bones) {\r\n\t\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\r\n\t\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\r\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\t\t\tlet setup = setupVertices[i];\r\n\t\t\t\t\t\t\t\tdeform[i] = setup + (lastVertices[i] - setup) * alpha;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Weighted deform offsets, with alpha.\r\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\t\tdeform[i] = lastVertices[i] * alpha;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\tdeform[i] += (lastVertices[i] - deform[i]) * alpha;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\r\n\t\t\t\t\t\tif (!vertexAttachment.bones) {\r\n\t\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\r\n\t\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\r\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\t\tdeform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Weighted deform offsets, with alpha.\r\n\t\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++)\r\n\t\t\t\t\t\t\t\tdeform[i] += lastVertices[i] * alpha;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Interpolate between the previous frame and the current frame.\r\n\t\tlet frame = Timeline.search1(frames, time);\r\n\t\tlet percent = this.getCurvePercent(time, frame);\r\n\t\tlet prevVertices = vertices[frame];\r\n\t\tlet nextVertices = vertices[frame + 1];\r\n\r\n\t\tif (alpha == 1) {\r\n\t\t\tif (blend == MixBlend.add) {\r\n\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\r\n\t\t\t\tif (!vertexAttachment.bones) {\r\n\t\t\t\t\t// Unweighted vertex positions, with alpha.\r\n\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\r\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\tlet prev = prevVertices[i];\r\n\t\t\t\t\t\tdeform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Weighted deform offsets, with alpha.\r\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\tlet prev = prevVertices[i];\r\n\t\t\t\t\t\tdeform[i] += prev + (nextVertices[i] - prev) * percent;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\tlet prev = prevVertices[i];\r\n\t\t\t\t\tdeform[i] = prev + (nextVertices[i] - prev) * percent;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup: {\r\n\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\r\n\t\t\t\t\tif (!vertexAttachment.bones) {\r\n\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\r\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\r\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\t\tlet prev = prevVertices[i], setup = setupVertices[i];\r\n\t\t\t\t\t\t\tdeform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Weighted deform offsets, with alpha.\r\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\t\tlet prev = prevVertices[i];\r\n\t\t\t\t\t\t\tdeform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\tcase MixBlend.replace:\r\n\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\tlet prev = prevVertices[i];\r\n\t\t\t\t\t\tdeform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MixBlend.add:\r\n\t\t\t\t\tlet vertexAttachment = slotAttachment as VertexAttachment;\r\n\t\t\t\t\tif (!vertexAttachment.bones) {\r\n\t\t\t\t\t\t// Unweighted vertex positions, with alpha.\r\n\t\t\t\t\t\tlet setupVertices = vertexAttachment.vertices;\r\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\t\tlet prev = prevVertices[i];\r\n\t\t\t\t\t\t\tdeform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Weighted deform offsets, with alpha.\r\n\t\t\t\t\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\t\t\tlet prev = prevVertices[i];\r\n\t\t\t\t\t\t\tdeform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Fires an {@link Event} when specific animation times are reached. */\r\nexport class EventTimeline extends Timeline {\r\n\tstatic propertyIds = [\"\" + Property.event];\r\n\r\n\t/** The event for each key frame. */\r\n\tevents: Array<Event>;\r\n\r\n\tconstructor (frameCount: number) {\r\n\t\tsuper(frameCount, EventTimeline.propertyIds);\r\n\r\n\t\tthis.events = new Array<Event>(frameCount);\r\n\t}\r\n\r\n\tgetFrameCount () {\r\n\t\treturn this.frames.length;\r\n\t}\r\n\r\n\t/** Sets the time in seconds and the event for the specified key frame. */\r\n\tsetFrame (frame: number, event: Event) {\r\n\t\tthis.frames[frame] = event.time;\r\n\t\tthis.events[frame] = event;\r\n\t}\r\n\r\n\t/** Fires events for frames > `lastTime` and <= `time`. */\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tif (!firedEvents) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tlet frameCount = this.frames.length;\r\n\r\n\t\tif (lastTime > time) { // Fire events after last time for looped animations.\r\n\t\t\tthis.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\r\n\t\t\tlastTime = -1;\r\n\t\t} else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n\t\t\treturn;\r\n\t\tif (time < frames[0]) return; // Time is before first frame.\r\n\r\n\t\tlet i = 0;\r\n\t\tif (lastTime < frames[0])\r\n\t\t\ti = 0;\r\n\t\telse {\r\n\t\t\ti = Timeline.search1(frames, lastTime) + 1;\r\n\t\t\tlet frameTime = frames[i];\r\n\t\t\twhile (i > 0) { // Fire multiple events with the same frame.\r\n\t\t\t\tif (frames[i - 1] != frameTime) break;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (; i < frameCount && time >= frames[i]; i++)\r\n\t\t\tfiredEvents.push(this.events[i]);\r\n\t}\r\n}\r\n\r\n/** Changes a skeleton's {@link Skeleton#drawOrder}. */\r\nexport class DrawOrderTimeline extends Timeline {\r\n\tstatic propertyIds = [\"\" + Property.drawOrder];\r\n\r\n\t/** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */\r\n\tdrawOrders: Array<Array<number> | null>;\r\n\r\n\tconstructor (frameCount: number) {\r\n\t\tsuper(frameCount, DrawOrderTimeline.propertyIds);\r\n\t\tthis.drawOrders = new Array<Array<number> | null>(frameCount);\r\n\t}\r\n\r\n\tgetFrameCount () {\r\n\t\treturn this.frames.length;\r\n\t}\r\n\r\n\t/** Sets the time in seconds and the draw order for the specified key frame.\r\n\t * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\r\n\t *           draw order. */\r\n\tsetFrame (frame: number, time: number, drawOrder: Array<number> | null) {\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.drawOrders[frame] = drawOrder;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tif (direction == MixDirection.mixOut) {\r\n\t\t\tif (blend == MixBlend.setup) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (time < this.frames[0]) {\r\n\t\t\tif (blend == MixBlend.setup || blend == MixBlend.first) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet idx = Timeline.search1(this.frames, time);\r\n\t\tlet drawOrderToSetupIndex = this.drawOrders[idx];\r\n\t\tif (!drawOrderToSetupIndex)\r\n\t\t\tUtils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\r\n\t\telse {\r\n\t\t\tlet drawOrder: Array<Slot> = skeleton.drawOrder;\r\n\t\t\tlet slots: Array<Slot> = skeleton.slots;\r\n\t\t\tfor (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n\t\t\t\tdrawOrder[i] = slots[drawOrderToSetupIndex[i]];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\r\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */\r\nexport class IkConstraintTimeline extends CurveTimeline {\r\n\t/** The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed. */\r\n\tikConstraintIndex: number = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, ikConstraintIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.ikConstraint + \"|\" + ikConstraintIndex\r\n\t\t]);\r\n\t\tthis.ikConstraintIndex = ikConstraintIndex;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 6/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\r\n\tsetFrame (frame: number, time: number, mix: number, softness: number, bendDirection: number, compress: boolean, stretch: boolean) {\r\n\t\tframe *= 6/*ENTRIES*/;\r\n\t\tthis.frames[frame] = time;\r\n\t\tthis.frames[frame + 1/*MIX*/] = mix;\r\n\t\tthis.frames[frame + 2/*SOFTNESS*/] = softness;\r\n\t\tthis.frames[frame + 3/*BEND_DIRECTION*/] = bendDirection;\r\n\t\tthis.frames[frame + 4/*COMPRESS*/] = compress ? 1 : 0;\r\n\t\tthis.frames[frame + 5/*STRETCH*/] = stretch ? 1 : 0;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet constraint: IkConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tconstraint.mix = constraint.data.mix;\r\n\t\t\t\t\tconstraint.softness = constraint.data.softness;\r\n\t\t\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\r\n\t\t\t\t\tconstraint.compress = constraint.data.compress;\r\n\t\t\t\t\tconstraint.stretch = constraint.data.stretch;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tconstraint.mix += (constraint.data.mix - constraint.mix) * alpha;\r\n\t\t\t\t\tconstraint.softness += (constraint.data.softness - constraint.softness) * alpha;\r\n\t\t\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\r\n\t\t\t\t\tconstraint.compress = constraint.data.compress;\r\n\t\t\t\t\tconstraint.stretch = constraint.data.stretch;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet mix = 0, softness = 0;\r\n\t\tlet i = Timeline.search(frames, time, 6/*ENTRIES*/)\r\n\t\tlet curveType = this.curves[i / 6/*ENTRIES*/];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\tmix = frames[i + 1/*MIX*/];\r\n\t\t\t\tsoftness = frames[i + 2/*SOFTNESS*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 6/*ENTRIES*/] - before);\r\n\t\t\t\tmix += (frames[i + 6/*ENTRIES*/ + 1/*MIX*/] - mix) * t;\r\n\t\t\t\tsoftness += (frames[i + 6/*ENTRIES*/ + 2/*SOFTNESS*/] - softness) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\tmix = frames[i + 1/*MIX*/];\r\n\t\t\t\tsoftness = frames[i + 2/*SOFTNESS*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tmix = this.getBezierValue(time, i, 1/*MIX*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\tsoftness = this.getBezierValue(time, i, 2/*SOFTNESS*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t}\r\n\r\n\t\tif (blend == MixBlend.setup) {\r\n\t\t\tconstraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;\r\n\t\t\tconstraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;\r\n\r\n\t\t\tif (direction == MixDirection.mixOut) {\r\n\t\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\r\n\t\t\t\tconstraint.compress = constraint.data.compress;\r\n\t\t\t\tconstraint.stretch = constraint.data.stretch;\r\n\t\t\t} else {\r\n\t\t\t\tconstraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\r\n\t\t\t\tconstraint.compress = frames[i + 4/*COMPRESS*/] != 0;\r\n\t\t\t\tconstraint.stretch = frames[i + 5/*STRETCH*/] != 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconstraint.mix += (mix - constraint.mix) * alpha;\r\n\t\t\tconstraint.softness += (softness - constraint.softness) * alpha;\r\n\t\t\tif (direction == MixDirection.mixIn) {\r\n\t\t\t\tconstraint.bendDirection = frames[i + 3/*BEND_DIRECTION*/];\r\n\t\t\t\tconstraint.compress = frames[i + 4/*COMPRESS*/] != 0;\r\n\t\t\t\tconstraint.stretch = frames[i + 5/*STRETCH*/] != 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\r\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */\r\nexport class TransformConstraintTimeline extends CurveTimeline {\r\n\t/** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */\r\n\ttransformConstraintIndex: number = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, transformConstraintIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.transformConstraint + \"|\" + transformConstraintIndex\r\n\t\t]);\r\n\t\tthis.transformConstraintIndex = transformConstraintIndex;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 7/*ENTRIES*/;\r\n\t}\r\n\r\n\t/** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\r\n\tsetFrame (frame: number, time: number, mixRotate: number, mixX: number, mixY: number, mixScaleX: number, mixScaleY: number,\r\n\t\tmixShearY: number) {\r\n\t\tlet frames = this.frames;\r\n\t\tframe *= 7/*ENTRIES*/;\r\n\t\tframes[frame] = time;\r\n\t\tframes[frame + 1/*ROTATE*/] = mixRotate;\r\n\t\tframes[frame + 2/*X*/] = mixX;\r\n\t\tframes[frame + 3/*Y*/] = mixY;\r\n\t\tframes[frame + 4/*SCALEX*/] = mixScaleX;\r\n\t\tframes[frame + 5/*SCALEY*/] = mixScaleY;\r\n\t\tframes[frame + 6/*SHEARY*/] = mixShearY;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet constraint: TransformConstraint = skeleton.transformConstraints[this.transformConstraintIndex];\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tlet data = constraint.data;\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tconstraint.mixRotate = data.mixRotate;\r\n\t\t\t\t\tconstraint.mixX = data.mixX;\r\n\t\t\t\t\tconstraint.mixY = data.mixY;\r\n\t\t\t\t\tconstraint.mixScaleX = data.mixScaleX;\r\n\t\t\t\t\tconstraint.mixScaleY = data.mixScaleY;\r\n\t\t\t\t\tconstraint.mixShearY = data.mixShearY;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tconstraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;\r\n\t\t\t\t\tconstraint.mixX += (data.mixX - constraint.mixX) * alpha;\r\n\t\t\t\t\tconstraint.mixY += (data.mixY - constraint.mixY) * alpha;\r\n\t\t\t\t\tconstraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;\r\n\t\t\t\t\tconstraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;\r\n\t\t\t\t\tconstraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet rotate, x, y, scaleX, scaleY, shearY;\r\n\t\tlet i = Timeline.search(frames, time, 7/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i / 7/*ENTRIES*/];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\r\n\t\t\t\tx = frames[i + 2/*X*/];\r\n\t\t\t\ty = frames[i + 3/*Y*/];\r\n\t\t\t\tscaleX = frames[i + 4/*SCALEX*/];\r\n\t\t\t\tscaleY = frames[i + 5/*SCALEY*/];\r\n\t\t\t\tshearY = frames[i + 6/*SHEARY*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 7/*ENTRIES*/] - before);\r\n\t\t\t\trotate += (frames[i + 7/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\r\n\t\t\t\tx += (frames[i + 7/*ENTRIES*/ + 2/*X*/] - x) * t;\r\n\t\t\t\ty += (frames[i + 7/*ENTRIES*/ + 3/*Y*/] - y) * t;\r\n\t\t\t\tscaleX += (frames[i + 7/*ENTRIES*/ + 4/*SCALEX*/] - scaleX) * t;\r\n\t\t\t\tscaleY += (frames[i + 7/*ENTRIES*/ + 5/*SCALEY*/] - scaleY) * t;\r\n\t\t\t\tshearY += (frames[i + 7/*ENTRIES*/ + 6/*SHEARY*/] - shearY) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\r\n\t\t\t\tx = frames[i + 2/*X*/];\r\n\t\t\t\ty = frames[i + 3/*Y*/];\r\n\t\t\t\tscaleX = frames[i + 4/*SCALEX*/];\r\n\t\t\t\tscaleY = frames[i + 5/*SCALEY*/];\r\n\t\t\t\tshearY = frames[i + 6/*SHEARY*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\trotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\tx = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t\t\ty = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n\t\t\t\tscaleX = this.getBezierValue(time, i, 4/*SCALEX*/, curveType + 18/*BEZIER_SIZE*/ * 3 - 2/*BEZIER*/);\r\n\t\t\t\tscaleY = this.getBezierValue(time, i, 5/*SCALEY*/, curveType + 18/*BEZIER_SIZE*/ * 4 - 2/*BEZIER*/);\r\n\t\t\t\tshearY = this.getBezierValue(time, i, 6/*SHEARY*/, curveType + 18/*BEZIER_SIZE*/ * 5 - 2/*BEZIER*/);\r\n\t\t}\r\n\r\n\t\tif (blend == MixBlend.setup) {\r\n\t\t\tlet data = constraint.data;\r\n\t\t\tconstraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\r\n\t\t\tconstraint.mixX = data.mixX + (x - data.mixX) * alpha;\r\n\t\t\tconstraint.mixY = data.mixY + (y - data.mixY) * alpha;\r\n\t\t\tconstraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;\r\n\t\t\tconstraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;\r\n\t\t\tconstraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;\r\n\t\t} else {\r\n\t\t\tconstraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\r\n\t\t\tconstraint.mixX += (x - constraint.mixX) * alpha;\r\n\t\t\tconstraint.mixY += (y - constraint.mixY) * alpha;\r\n\t\t\tconstraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;\r\n\t\t\tconstraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;\r\n\t\t\tconstraint.mixShearY += (shearY - constraint.mixShearY) * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a path constraint's {@link PathConstraint#position}. */\r\nexport class PathConstraintPositionTimeline extends CurveTimeline1 {\r\n\t/** The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed. */\r\n\tpathConstraintIndex: number = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.pathConstraintPosition + \"|\" + pathConstraintIndex);\r\n\t\tthis.pathConstraintIndex = pathConstraintIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tconstraint.position = constraint.data.position;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tconstraint.position += (constraint.data.position - constraint.position) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet position = this.getCurveValue(time);\r\n\r\n\t\tif (blend == MixBlend.setup)\r\n\t\t\tconstraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\r\n\t\telse\r\n\t\t\tconstraint.position += (position - constraint.position) * alpha;\r\n\t}\r\n}\r\n\r\n/** Changes a path constraint's {@link PathConstraint#spacing}. */\r\nexport class PathConstraintSpacingTimeline extends CurveTimeline1 {\r\n\t/** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\r\n\tpathConstraintIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, Property.pathConstraintSpacing + \"|\" + pathConstraintIndex);\r\n\t\tthis.pathConstraintIndex = pathConstraintIndex;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tconstraint.spacing = constraint.data.spacing;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tconstraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet spacing = this.getCurveValue(time);\r\n\r\n\t\tif (blend == MixBlend.setup)\r\n\t\t\tconstraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\r\n\t\telse\r\n\t\t\tconstraint.spacing += (spacing - constraint.spacing) * alpha;\r\n\t}\r\n}\r\n\r\n/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\r\n * {@link PathConstraint#getMixY()}. */\r\nexport class PathConstraintMixTimeline extends CurveTimeline {\r\n\t/** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\r\n\tpathConstraintIndex = 0;\r\n\r\n\tconstructor (frameCount: number, bezierCount: number, pathConstraintIndex: number) {\r\n\t\tsuper(frameCount, bezierCount, [\r\n\t\t\tProperty.pathConstraintMix + \"|\" + pathConstraintIndex\r\n\t\t]);\r\n\t\tthis.pathConstraintIndex = pathConstraintIndex;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn 4/*ENTRIES*/;\r\n\t}\r\n\r\n\tsetFrame (frame: number, time: number, mixRotate: number, mixX: number, mixY: number) {\r\n\t\tlet frames = this.frames;\r\n\t\tframe <<= 2;\r\n\t\tframes[frame] = time;\r\n\t\tframes[frame + 1/*ROTATE*/] = mixRotate;\r\n\t\tframes[frame + 2/*X*/] = mixX;\r\n\t\tframes[frame + 3/*Y*/] = mixY;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tconstraint.mixRotate = constraint.data.mixRotate;\r\n\t\t\t\t\tconstraint.mixX = constraint.data.mixX;\r\n\t\t\t\t\tconstraint.mixY = constraint.data.mixY;\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tconstraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;\r\n\t\t\t\t\tconstraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;\r\n\t\t\t\t\tconstraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet rotate, x, y;\r\n\t\tlet i = Timeline.search(frames, time, 4/*ENTRIES*/);\r\n\t\tlet curveType = this.curves[i >> 2];\r\n\t\tswitch (curveType) {\r\n\t\t\tcase 0/*LINEAR*/:\r\n\t\t\t\tlet before = frames[i];\r\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\r\n\t\t\t\tx = frames[i + 2/*X*/];\r\n\t\t\t\ty = frames[i + 3/*Y*/];\r\n\t\t\t\tlet t = (time - before) / (frames[i + 4/*ENTRIES*/] - before);\r\n\t\t\t\trotate += (frames[i + 4/*ENTRIES*/ + 1/*ROTATE*/] - rotate) * t;\r\n\t\t\t\tx += (frames[i + 4/*ENTRIES*/ + 2/*X*/] - x) * t;\r\n\t\t\t\ty += (frames[i + 4/*ENTRIES*/ + 3/*Y*/] - y) * t;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1/*STEPPED*/:\r\n\t\t\t\trotate = frames[i + 1/*ROTATE*/];\r\n\t\t\t\tx = frames[i + 2/*X*/];\r\n\t\t\t\ty = frames[i + 3/*Y*/];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\trotate = this.getBezierValue(time, i, 1/*ROTATE*/, curveType - 2/*BEZIER*/);\r\n\t\t\t\tx = this.getBezierValue(time, i, 2/*X*/, curveType + 18/*BEZIER_SIZE*/ - 2/*BEZIER*/);\r\n\t\t\t\ty = this.getBezierValue(time, i, 3/*Y*/, curveType + 18/*BEZIER_SIZE*/ * 2 - 2/*BEZIER*/);\r\n\t\t}\r\n\r\n\t\tif (blend == MixBlend.setup) {\r\n\t\t\tlet data = constraint.data;\r\n\t\t\tconstraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\r\n\t\t\tconstraint.mixX = data.mixX + (x - data.mixX) * alpha;\r\n\t\t\tconstraint.mixY = data.mixY + (y - data.mixY) * alpha;\r\n\t\t} else {\r\n\t\t\tconstraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\r\n\t\t\tconstraint.mixX += (x - constraint.mixX) * alpha;\r\n\t\t\tconstraint.mixY += (y - constraint.mixY) * alpha;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/** Changes a slot's {@link Slot#getSequenceIndex()} for an attachment's {@link Sequence}. */\r\nexport class SequenceTimeline extends Timeline implements SlotTimeline {\r\n\tstatic ENTRIES = 3;\r\n\tstatic MODE = 1;\r\n\tstatic DELAY = 2;\r\n\r\n\tslotIndex: number;\r\n\tattachment: HasTextureRegion;\r\n\r\n\tconstructor (frameCount: number, slotIndex: number, attachment: HasTextureRegion) {\r\n\t\tsuper(frameCount, [\r\n\t\t\tProperty.sequence + \"|\" + slotIndex + \"|\" + attachment.sequence!.id\r\n\t\t]);\r\n\t\tthis.slotIndex = slotIndex;\r\n\t\tthis.attachment = attachment;\r\n\t}\r\n\r\n\tgetFrameEntries () {\r\n\t\treturn SequenceTimeline.ENTRIES;\r\n\t}\r\n\r\n\tgetSlotIndex () {\r\n\t\treturn this.slotIndex;\r\n\t}\r\n\r\n\tgetAttachment () {\r\n\t\treturn this.attachment as unknown as Attachment;\r\n\t}\r\n\r\n\t/** Sets the time, mode, index, and frame time for the specified frame.\r\n\t * @param frame Between 0 and <code>frameCount</code>, inclusive.\r\n\t * @param time Seconds between frames. */\r\n\tsetFrame (frame: number, time: number, mode: SequenceMode, index: number, delay: number) {\r\n\t\tlet frames = this.frames;\r\n\t\tframe *= SequenceTimeline.ENTRIES;\r\n\t\tframes[frame] = time;\r\n\t\tframes[frame + SequenceTimeline.MODE] = mode | (index << 4);\r\n\t\tframes[frame + SequenceTimeline.DELAY] = delay;\r\n\t}\r\n\r\n\tapply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\r\n\t\tlet slot = skeleton.slots[this.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\t\tlet slotAttachment = slot.attachment;\r\n\t\tlet attachment = this.attachment as unknown as Attachment;\r\n\t\tif (slotAttachment != attachment) {\r\n\t\t\tif (!(slotAttachment instanceof VertexAttachment)\r\n\t\t\t\t|| (slotAttachment as VertexAttachment).timelineAttachment != attachment) return;\r\n\t\t}\r\n\r\n\t\tlet frames = this.frames;\r\n\t\tif (time < frames[0]) { // Time is before first frame.\r\n\t\t\tif (blend == MixBlend.setup || blend == MixBlend.first) slot.sequenceIndex = -1;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet i = Timeline.search(frames, time, SequenceTimeline.ENTRIES);\r\n\t\tlet before = frames[i];\r\n\t\tlet modeAndIndex = frames[i + SequenceTimeline.MODE];\r\n\t\tlet delay = frames[i + SequenceTimeline.DELAY];\r\n\r\n\t\tif (!this.attachment.sequence) return;\r\n\t\tlet index = modeAndIndex >> 4, count = this.attachment.sequence!.regions.length;\r\n\t\tlet mode = SequenceModeValues[modeAndIndex & 0xf];\r\n\t\tif (mode != SequenceMode.hold) {\r\n\t\t\tindex += (((time - before) / delay + 0.00001) | 0);\r\n\t\t\tswitch (mode) {\r\n\t\t\t\tcase SequenceMode.once:\r\n\t\t\t\t\tindex = Math.min(count - 1, index);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SequenceMode.loop:\r\n\t\t\t\t\tindex %= count;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SequenceMode.pingpong: {\r\n\t\t\t\t\tlet n = (count << 1) - 2;\r\n\t\t\t\t\tindex = n == 0 ? 0 : index % n;\r\n\t\t\t\t\tif (index >= count) index = n - index;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase SequenceMode.onceReverse:\r\n\t\t\t\t\tindex = Math.max(count - 1 - index, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SequenceMode.loopReverse:\r\n\t\t\t\t\tindex = count - 1 - (index % count);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SequenceMode.pingpongReverse: {\r\n\t\t\t\t\tlet n = (count << 1) - 2;\r\n\t\t\t\t\tindex = n == 0 ? 0 : (index + count - 1) % n;\r\n\t\t\t\t\tif (index >= count) index = n - index;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tslot.sequenceIndex = index;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Animation, MixBlend, AttachmentTimeline, MixDirection, RotateTimeline, DrawOrderTimeline, Timeline, EventTimeline } from \"./Animation.js\";\r\nimport { AnimationStateData } from \"./AnimationStateData.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { Slot } from \"./Slot.js\";\r\nimport { StringSet, Pool, Utils, MathUtils } from \"./Utils.js\";\r\nimport { Event } from \"./Event.js\";\r\n\r\n\r\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\r\n * multiple animations on top of each other (layering).\r\n *\r\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */\r\nexport class AnimationState {\r\n\tstatic _emptyAnimation = new Animation(\"<empty>\", [], 0);\r\n\tprivate static emptyAnimation (): Animation {\r\n\t\treturn AnimationState._emptyAnimation;\r\n\t}\r\n\r\n\t/** The AnimationStateData to look up mix durations. */\r\n\tdata: AnimationStateData;\r\n\r\n\t/** The list of tracks that currently have animations, which may contain null entries. */\r\n\ttracks = new Array<TrackEntry | null>();\r\n\r\n\t/** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\r\n\t * or faster. Defaults to 1.\r\n\t *\r\n\t * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\r\n\ttimeScale = 1;\r\n\tunkeyedState = 0;\r\n\r\n\tevents = new Array<Event>();\r\n\tlisteners = new Array<AnimationStateListener>();\r\n\tqueue = new EventQueue(this);\r\n\tpropertyIDs = new StringSet();\r\n\tanimationsChanged = false;\r\n\r\n\ttrackEntryPool = new Pool<TrackEntry>(() => new TrackEntry());\r\n\r\n\tconstructor (data: AnimationStateData) {\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\t/** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\r\n\tupdate (delta: number) {\r\n\t\tdelta *= this.timeScale;\r\n\t\tlet tracks = this.tracks;\r\n\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\r\n\t\t\tlet current = tracks[i];\r\n\t\t\tif (!current) continue;\r\n\r\n\t\t\tcurrent.animationLast = current.nextAnimationLast;\r\n\t\t\tcurrent.trackLast = current.nextTrackLast;\r\n\r\n\t\t\tlet currentDelta = delta * current.timeScale;\r\n\r\n\t\t\tif (current.delay > 0) {\r\n\t\t\t\tcurrent.delay -= currentDelta;\r\n\t\t\t\tif (current.delay > 0) continue;\r\n\t\t\t\tcurrentDelta = -current.delay;\r\n\t\t\t\tcurrent.delay = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlet next = current.next;\r\n\t\t\tif (next) {\r\n\t\t\t\t// When the next entry's delay is passed, change to the next entry, preserving leftover time.\r\n\t\t\t\tlet nextTime = current.trackLast - next.delay;\r\n\t\t\t\tif (nextTime >= 0) {\r\n\t\t\t\t\tnext.delay = 0;\r\n\t\t\t\t\tnext.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\r\n\t\t\t\t\tcurrent.trackTime += currentDelta;\r\n\t\t\t\t\tthis.setCurrent(i, next, true);\r\n\t\t\t\t\twhile (next.mixingFrom) {\r\n\t\t\t\t\t\tnext.mixTime += delta;\r\n\t\t\t\t\t\tnext = next.mixingFrom;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\r\n\t\t\t\ttracks[i] = null;\r\n\t\t\t\tthis.queue.end(current);\r\n\t\t\t\tthis.clearNext(current);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (current.mixingFrom && this.updateMixingFrom(current, delta)) {\r\n\t\t\t\t// End mixing from entries once all have completed.\r\n\t\t\t\tlet from: TrackEntry | null = current.mixingFrom;\r\n\t\t\t\tcurrent.mixingFrom = null;\r\n\t\t\t\tif (from) from.mixingTo = null;\r\n\t\t\t\twhile (from) {\r\n\t\t\t\t\tthis.queue.end(from);\r\n\t\t\t\t\tfrom = from.mixingFrom;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcurrent.trackTime += currentDelta;\r\n\t\t}\r\n\r\n\t\tthis.queue.drain();\r\n\t}\r\n\r\n\t/** Returns true when all mixing from entries are complete. */\r\n\tupdateMixingFrom (to: TrackEntry, delta: number): boolean {\r\n\t\tlet from = to.mixingFrom;\r\n\t\tif (!from) return true;\r\n\r\n\t\tlet finished = this.updateMixingFrom(from, delta);\r\n\r\n\t\tfrom.animationLast = from.nextAnimationLast;\r\n\t\tfrom.trackLast = from.nextTrackLast;\r\n\r\n\t\t// Require mixTime > 0 to ensure the mixing from entry was applied at least once.\r\n\t\tif (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\r\n\t\t\t// Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\r\n\t\t\tif (from.totalAlpha == 0 || to.mixDuration == 0) {\r\n\t\t\t\tto.mixingFrom = from.mixingFrom;\r\n\t\t\t\tif (from.mixingFrom) from.mixingFrom.mixingTo = to;\r\n\t\t\t\tto.interruptAlpha = from.interruptAlpha;\r\n\t\t\t\tthis.queue.end(from);\r\n\t\t\t}\r\n\t\t\treturn finished;\r\n\t\t}\r\n\r\n\t\tfrom.trackTime += delta * from.timeScale;\r\n\t\tto.mixTime += delta;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\r\n\t * animation state can be applied to multiple skeletons to pose them identically.\r\n\t * @returns True if any animations were applied. */\r\n\tapply (skeleton: Skeleton): boolean {\r\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\t\tif (this.animationsChanged) this._animationsChanged();\r\n\r\n\t\tlet events = this.events;\r\n\t\tlet tracks = this.tracks;\r\n\t\tlet applied = false;\r\n\r\n\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\r\n\t\t\tlet current = tracks[i];\r\n\t\t\tif (!current || current.delay > 0) continue;\r\n\t\t\tapplied = true;\r\n\t\t\tlet blend: MixBlend = i == 0 ? MixBlend.first : current.mixBlend;\r\n\r\n\t\t\t// Apply mixing from entries first.\r\n\t\t\tlet mix = current.alpha;\r\n\t\t\tif (current.mixingFrom)\r\n\t\t\t\tmix *= this.applyMixingFrom(current, skeleton, blend);\r\n\t\t\telse if (current.trackTime >= current.trackEnd && !current.next)\r\n\t\t\t\tmix = 0;\r\n\r\n\t\t\t// Apply current entry.\r\n\t\t\tlet animationLast = current.animationLast, animationTime = current.getAnimationTime(), applyTime = animationTime;\r\n\t\t\tlet applyEvents: Event[] | null = events;\r\n\t\t\tif (current.reverse) {\r\n\t\t\t\tapplyTime = current.animation!.duration - applyTime;\r\n\t\t\t\tapplyEvents = null;\r\n\t\t\t}\r\n\t\t\tlet timelines = current.animation!.timelines;\r\n\t\t\tlet timelineCount = timelines.length;\r\n\t\t\tif ((i == 0 && mix == 1) || blend == MixBlend.add) {\r\n\t\t\t\tfor (let ii = 0; ii < timelineCount; ii++) {\r\n\t\t\t\t\t// Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\r\n\t\t\t\t\t// to sometimes stop rendering when using color correction, as their RGBA values become NaN.\r\n\t\t\t\t\t// (https://github.com/pixijs/pixi-spine/issues/302)\r\n\t\t\t\t\tUtils.webkit602BugfixHelper(mix, blend);\r\n\t\t\t\t\tvar timeline = timelines[ii];\r\n\t\t\t\t\tif (timeline instanceof AttachmentTimeline)\r\n\t\t\t\t\t\tthis.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\ttimeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, blend, MixDirection.mixIn);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlet timelineMode = current.timelineMode;\r\n\r\n\t\t\t\tlet shortestRotation = current.shortestRotation;\r\n\t\t\t\tlet firstFrame = !shortestRotation && current.timelinesRotation.length != timelineCount << 1;\r\n\t\t\t\tif (firstFrame) current.timelinesRotation.length = timelineCount << 1;\r\n\r\n\t\t\t\tfor (let ii = 0; ii < timelineCount; ii++) {\r\n\t\t\t\t\tlet timeline = timelines[ii];\r\n\t\t\t\t\tlet timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\r\n\t\t\t\t\tif (!shortestRotation && timeline instanceof RotateTimeline) {\r\n\t\t\t\t\t\tthis.applyRotateTimeline(timeline, skeleton, applyTime, mix, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\r\n\t\t\t\t\t} else if (timeline instanceof AttachmentTimeline) {\r\n\t\t\t\t\t\tthis.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\r\n\t\t\t\t\t\tUtils.webkit602BugfixHelper(mix, blend);\r\n\t\t\t\t\t\ttimeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, timelineBlend, MixDirection.mixIn);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.queueEvents(current, animationTime);\r\n\t\t\tevents.length = 0;\r\n\t\t\tcurrent.nextAnimationLast = animationTime;\r\n\t\t\tcurrent.nextTrackLast = current.trackTime;\r\n\t\t}\r\n\r\n\t\t// Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\r\n\t\t// subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\r\n\t\t// the time is before the first key).\r\n\t\tvar setupState = this.unkeyedState + SETUP;\r\n\t\tvar slots = skeleton.slots;\r\n\t\tfor (var i = 0, n = skeleton.slots.length; i < n; i++) {\r\n\t\t\tvar slot = slots[i];\r\n\t\t\tif (slot.attachmentState == setupState) {\r\n\t\t\t\tvar attachmentName = slot.data.attachmentName;\r\n\t\t\t\tslot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\r\n\r\n\t\tthis.queue.drain();\r\n\t\treturn applied;\r\n\t}\r\n\r\n\tapplyMixingFrom (to: TrackEntry, skeleton: Skeleton, blend: MixBlend) {\r\n\t\tlet from = to.mixingFrom!;\r\n\t\tif (from.mixingFrom) this.applyMixingFrom(from, skeleton, blend);\r\n\r\n\t\tlet mix = 0;\r\n\t\tif (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.\r\n\t\t\tmix = 1;\r\n\t\t\tif (blend == MixBlend.first) blend = MixBlend.setup;\r\n\t\t} else {\r\n\t\t\tmix = to.mixTime / to.mixDuration;\r\n\t\t\tif (mix > 1) mix = 1;\r\n\t\t\tif (blend != MixBlend.first) blend = from.mixBlend;\r\n\t\t}\r\n\r\n\t\tlet attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;\r\n\t\tlet timelines = from.animation!.timelines;\r\n\t\tlet timelineCount = timelines.length;\r\n\t\tlet alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);\r\n\t\tlet animationLast = from.animationLast, animationTime = from.getAnimationTime(), applyTime = animationTime;\r\n\t\tlet events = null;\r\n\t\tif (from.reverse)\r\n\t\t\tapplyTime = from.animation!.duration - applyTime;\r\n\t\telse if (mix < from.eventThreshold)\r\n\t\t\tevents = this.events;\r\n\r\n\t\tif (blend == MixBlend.add) {\r\n\t\t\tfor (let i = 0; i < timelineCount; i++)\r\n\t\t\t\ttimelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\r\n\t\t} else {\r\n\t\t\tlet timelineMode = from.timelineMode;\r\n\t\t\tlet timelineHoldMix = from.timelineHoldMix;\r\n\r\n\t\t\tlet shortestRotation = from.shortestRotation;\r\n\t\t\tlet firstFrame = !shortestRotation && from.timelinesRotation.length != timelineCount << 1;\r\n\t\t\tif (firstFrame) from.timelinesRotation.length = timelineCount << 1;\r\n\r\n\t\t\tfrom.totalAlpha = 0;\r\n\t\t\tfor (let i = 0; i < timelineCount; i++) {\r\n\t\t\t\tlet timeline = timelines[i];\r\n\t\t\t\tlet direction = MixDirection.mixOut;\r\n\t\t\t\tlet timelineBlend: MixBlend;\r\n\t\t\t\tlet alpha = 0;\r\n\t\t\t\tswitch (timelineMode[i]) {\r\n\t\t\t\t\tcase SUBSEQUENT:\r\n\t\t\t\t\t\tif (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\r\n\t\t\t\t\t\ttimelineBlend = blend;\r\n\t\t\t\t\t\talpha = alphaMix;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase FIRST:\r\n\t\t\t\t\t\ttimelineBlend = MixBlend.setup;\r\n\t\t\t\t\t\talpha = alphaMix;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase HOLD_SUBSEQUENT:\r\n\t\t\t\t\t\ttimelineBlend = blend;\r\n\t\t\t\t\t\talpha = alphaHold;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase HOLD_FIRST:\r\n\t\t\t\t\t\ttimelineBlend = MixBlend.setup;\r\n\t\t\t\t\t\talpha = alphaHold;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\ttimelineBlend = MixBlend.setup;\r\n\t\t\t\t\t\tlet holdMix = timelineHoldMix[i];\r\n\t\t\t\t\t\talpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tfrom.totalAlpha += alpha;\r\n\r\n\t\t\t\tif (!shortestRotation && timeline instanceof RotateTimeline)\r\n\t\t\t\t\tthis.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);\r\n\t\t\t\telse if (timeline instanceof AttachmentTimeline)\r\n\t\t\t\t\tthis.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments);\r\n\t\t\t\telse {\r\n\t\t\t\t\t// This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\r\n\t\t\t\t\tUtils.webkit602BugfixHelper(alpha, blend);\r\n\t\t\t\t\tif (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)\r\n\t\t\t\t\t\tdirection = MixDirection.mixIn;\r\n\t\t\t\t\ttimeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (to.mixDuration > 0) this.queueEvents(from, animationTime);\r\n\t\tthis.events.length = 0;\r\n\t\tfrom.nextAnimationLast = animationTime;\r\n\t\tfrom.nextTrackLast = from.trackTime;\r\n\r\n\t\treturn mix;\r\n\t}\r\n\r\n\tapplyAttachmentTimeline (timeline: AttachmentTimeline, skeleton: Skeleton, time: number, blend: MixBlend, attachments: boolean) {\r\n\t\tvar slot = skeleton.slots[timeline.slotIndex];\r\n\t\tif (!slot.bone.active) return;\r\n\r\n\t\tif (time < timeline.frames[0]) { // Time is before first frame.\r\n\t\t\tif (blend == MixBlend.setup || blend == MixBlend.first)\r\n\t\t\t\tthis.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\r\n\t\t} else\r\n\t\t\tthis.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\r\n\r\n\t\t// If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\r\n\t\tif (slot.attachmentState <= this.unkeyedState) slot.attachmentState = this.unkeyedState + SETUP;\r\n\t}\r\n\r\n\tsetAttachment (skeleton: Skeleton, slot: Slot, attachmentName: string | null, attachments: boolean) {\r\n\t\tslot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\r\n\t\tif (attachments) slot.attachmentState = this.unkeyedState + CURRENT;\r\n\t}\r\n\r\n\tapplyRotateTimeline (timeline: RotateTimeline, skeleton: Skeleton, time: number, alpha: number, blend: MixBlend,\r\n\t\ttimelinesRotation: Array<number>, i: number, firstFrame: boolean) {\r\n\r\n\t\tif (firstFrame) timelinesRotation[i] = 0;\r\n\r\n\t\tif (alpha == 1) {\r\n\t\t\ttimeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet bone = skeleton.bones[timeline.boneIndex];\r\n\t\tif (!bone.active) return;\r\n\t\tlet frames = timeline.frames;\r\n\t\tlet r1 = 0, r2 = 0;\r\n\t\tif (time < frames[0]) {\r\n\t\t\tswitch (blend) {\r\n\t\t\t\tcase MixBlend.setup:\r\n\t\t\t\t\tbone.rotation = bone.data.rotation;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase MixBlend.first:\r\n\t\t\t\t\tr1 = bone.rotation;\r\n\t\t\t\t\tr2 = bone.data.rotation;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tr1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\r\n\t\t\tr2 = bone.data.rotation + timeline.getCurveValue(time);\r\n\t\t}\r\n\r\n\t\t// Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\r\n\t\tlet total = 0, diff = r2 - r1;\r\n\t\tdiff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\r\n\t\tif (diff == 0) {\r\n\t\t\ttotal = timelinesRotation[i];\r\n\t\t} else {\r\n\t\t\tlet lastTotal = 0, lastDiff = 0;\r\n\t\t\tif (firstFrame) {\r\n\t\t\t\tlastTotal = 0;\r\n\t\t\t\tlastDiff = diff;\r\n\t\t\t} else {\r\n\t\t\t\tlastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\r\n\t\t\t\tlastDiff = timelinesRotation[i + 1]; // Difference between bones.\r\n\t\t\t}\r\n\t\t\tlet current = diff > 0, dir = lastTotal >= 0;\r\n\t\t\t// Detect cross at 0 (not 180).\r\n\t\t\tif (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\r\n\t\t\t\t// A cross after a 360 rotation is a loop.\r\n\t\t\t\tif (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\r\n\t\t\t\tdir = current;\r\n\t\t\t}\r\n\t\t\ttotal = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\r\n\t\t\tif (dir != current) total += 360 * MathUtils.signum(lastTotal);\r\n\t\t\ttimelinesRotation[i] = total;\r\n\t\t}\r\n\t\ttimelinesRotation[i + 1] = diff;\r\n\t\tbone.rotation = r1 + total * alpha;\r\n\t}\r\n\r\n\tqueueEvents (entry: TrackEntry, animationTime: number) {\r\n\t\tlet animationStart = entry.animationStart, animationEnd = entry.animationEnd;\r\n\t\tlet duration = animationEnd - animationStart;\r\n\t\tlet trackLastWrapped = entry.trackLast % duration;\r\n\r\n\t\t// Queue events before complete.\r\n\t\tlet events = this.events;\r\n\t\tlet i = 0, n = events.length;\r\n\t\tfor (; i < n; i++) {\r\n\t\t\tlet event = events[i];\r\n\t\t\tif (event.time < trackLastWrapped) break;\r\n\t\t\tif (event.time > animationEnd) continue; // Discard events outside animation start/end.\r\n\t\t\tthis.queue.event(entry, event);\r\n\t\t}\r\n\r\n\t\t// Queue complete if completed a loop iteration or the animation.\r\n\t\tlet complete = false;\r\n\t\tif (entry.loop)\r\n\t\t\tcomplete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\r\n\t\telse\r\n\t\t\tcomplete = animationTime >= animationEnd && entry.animationLast < animationEnd;\r\n\t\tif (complete) this.queue.complete(entry);\r\n\r\n\t\t// Queue events after complete.\r\n\t\tfor (; i < n; i++) {\r\n\t\t\tlet event = events[i];\r\n\t\t\tif (event.time < animationStart) continue; // Discard events outside animation start/end.\r\n\t\t\tthis.queue.event(entry, event);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Removes all animations from all tracks, leaving skeletons in their current pose.\r\n\t *\r\n\t * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\r\n\t * rather than leaving them in their current pose. */\r\n\tclearTracks () {\r\n\t\tlet oldDrainDisabled = this.queue.drainDisabled;\r\n\t\tthis.queue.drainDisabled = true;\r\n\t\tfor (let i = 0, n = this.tracks.length; i < n; i++)\r\n\t\t\tthis.clearTrack(i);\r\n\t\tthis.tracks.length = 0;\r\n\t\tthis.queue.drainDisabled = oldDrainDisabled;\r\n\t\tthis.queue.drain();\r\n\t}\r\n\r\n\t/** Removes all animations from the track, leaving skeletons in their current pose.\r\n\t *\r\n\t * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\r\n\t * rather than leaving them in their current pose. */\r\n\tclearTrack (trackIndex: number) {\r\n\t\tif (trackIndex >= this.tracks.length) return;\r\n\t\tlet current = this.tracks[trackIndex];\r\n\t\tif (!current) return;\r\n\r\n\t\tthis.queue.end(current);\r\n\r\n\t\tthis.clearNext(current);\r\n\r\n\t\tlet entry = current;\r\n\t\twhile (true) {\r\n\t\t\tlet from = entry.mixingFrom;\r\n\t\t\tif (!from) break;\r\n\t\t\tthis.queue.end(from);\r\n\t\t\tentry.mixingFrom = null;\r\n\t\t\tentry.mixingTo = null;\r\n\t\t\tentry = from;\r\n\t\t}\r\n\r\n\t\tthis.tracks[current.trackIndex] = null;\r\n\r\n\t\tthis.queue.drain();\r\n\t}\r\n\r\n\tsetCurrent (index: number, current: TrackEntry, interrupt: boolean) {\r\n\t\tlet from = this.expandToIndex(index);\r\n\t\tthis.tracks[index] = current;\r\n\t\tcurrent.previous = null;\r\n\r\n\t\tif (from) {\r\n\t\t\tif (interrupt) this.queue.interrupt(from);\r\n\t\t\tcurrent.mixingFrom = from;\r\n\t\t\tfrom.mixingTo = current;\r\n\t\t\tcurrent.mixTime = 0;\r\n\r\n\t\t\t// Store the interrupted mix percentage.\r\n\t\t\tif (from.mixingFrom && from.mixDuration > 0)\r\n\t\t\t\tcurrent.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\r\n\r\n\t\t\tfrom.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\r\n\t\t}\r\n\r\n\t\tthis.queue.start(current);\r\n\t}\r\n\r\n\t/** Sets an animation by name.\r\n\t  *\r\n\t  * See {@link #setAnimationWith()}. */\r\n\tsetAnimation (trackIndex: number, animationName: string, loop: boolean = false) {\r\n\t\tlet animation = this.data.skeletonData.findAnimation(animationName);\r\n\t\tif (!animation) throw new Error(\"Animation not found: \" + animationName);\r\n\t\treturn this.setAnimationWith(trackIndex, animation, loop);\r\n\t}\r\n\r\n\t/** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\r\n\t * applied to a skeleton, it is replaced (not mixed from).\r\n\t * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\r\n\t *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\r\n\t * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n\t *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n\tsetAnimationWith (trackIndex: number, animation: Animation, loop: boolean = false) {\r\n\t\tif (!animation) throw new Error(\"animation cannot be null.\");\r\n\t\tlet interrupt = true;\r\n\t\tlet current = this.expandToIndex(trackIndex);\r\n\t\tif (current) {\r\n\t\t\tif (current.nextTrackLast == -1) {\r\n\t\t\t\t// Don't mix from an entry that was never applied.\r\n\t\t\t\tthis.tracks[trackIndex] = current.mixingFrom;\r\n\t\t\t\tthis.queue.interrupt(current);\r\n\t\t\t\tthis.queue.end(current);\r\n\t\t\t\tthis.clearNext(current);\r\n\t\t\t\tcurrent = current.mixingFrom;\r\n\t\t\t\tinterrupt = false;\r\n\t\t\t} else\r\n\t\t\t\tthis.clearNext(current);\r\n\t\t}\r\n\t\tlet entry = this.trackEntry(trackIndex, animation, loop, current);\r\n\t\tthis.setCurrent(trackIndex, entry, interrupt);\r\n\t\tthis.queue.drain();\r\n\t\treturn entry;\r\n\t}\r\n\r\n\t/** Queues an animation by name.\r\n\t *\r\n\t * See {@link #addAnimationWith()}. */\r\n\taddAnimation (trackIndex: number, animationName: string, loop: boolean = false, delay: number = 0) {\r\n\t\tlet animation = this.data.skeletonData.findAnimation(animationName);\r\n\t\tif (!animation) throw new Error(\"Animation not found: \" + animationName);\r\n\t\treturn this.addAnimationWith(trackIndex, animation, loop, delay);\r\n\t}\r\n\r\n\t/** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\r\n\t * equivalent to calling {@link #setAnimationWith()}.\r\n\t * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\r\n\t *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\r\n\t *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\r\n\t *           previous entry is looping, its next loop completion is used instead of its duration.\r\n\t * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n\t *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n\taddAnimationWith (trackIndex: number, animation: Animation, loop: boolean = false, delay: number = 0) {\r\n\t\tif (!animation) throw new Error(\"animation cannot be null.\");\r\n\r\n\t\tlet last = this.expandToIndex(trackIndex);\r\n\t\tif (last) {\r\n\t\t\twhile (last.next)\r\n\t\t\t\tlast = last.next;\r\n\t\t}\r\n\r\n\t\tlet entry = this.trackEntry(trackIndex, animation, loop, last);\r\n\r\n\t\tif (!last) {\r\n\t\t\tthis.setCurrent(trackIndex, entry, true);\r\n\t\t\tthis.queue.drain();\r\n\t\t} else {\r\n\t\t\tlast.next = entry;\r\n\t\t\tentry.previous = last;\r\n\t\t\tif (delay <= 0) delay += last.getTrackComplete() - entry.mixDuration;\r\n\t\t}\r\n\r\n\t\tentry.delay = delay;\r\n\t\treturn entry;\r\n\t}\r\n\r\n\t/** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\r\n\t * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\r\n\t *\r\n\t * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\r\n\t * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\r\n\t * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\r\n\t * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\r\n\t * 0 still mixes out over one frame.\r\n\t *\r\n\t * Mixing in is done by first setting an empty animation, then adding an animation using\r\n\t * {@link #addAnimation()} and on the returned track entry, set the\r\n\t * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\r\n\t * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\r\n\t * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\r\n\tsetEmptyAnimation (trackIndex: number, mixDuration: number = 0) {\r\n\t\tlet entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\r\n\t\tentry.mixDuration = mixDuration;\r\n\t\tentry.trackEnd = mixDuration;\r\n\t\treturn entry;\r\n\t}\r\n\r\n\t/** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\r\n\t * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\r\n\t * {@link #setEmptyAnimation()}.\r\n\t *\r\n\t * See {@link #setEmptyAnimation()}.\r\n\t * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\r\n\t *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\r\n\t *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\r\n\t *           loop completion is used instead of its duration.\r\n\t * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\r\n\t *         after the {@link AnimationStateListener#dispose()} event occurs. */\r\n\taddEmptyAnimation (trackIndex: number, mixDuration: number = 0, delay: number = 0) {\r\n\t\tlet entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);\r\n\t\tif (delay <= 0) entry.delay += entry.mixDuration - mixDuration;\r\n\t\tentry.mixDuration = mixDuration;\r\n\t\tentry.trackEnd = mixDuration;\r\n\t\treturn entry;\r\n\t}\r\n\r\n\t/** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\r\n\t  * duration. */\r\n\tsetEmptyAnimations (mixDuration: number = 0) {\r\n\t\tlet oldDrainDisabled = this.queue.drainDisabled;\r\n\t\tthis.queue.drainDisabled = true;\r\n\t\tfor (let i = 0, n = this.tracks.length; i < n; i++) {\r\n\t\t\tlet current = this.tracks[i];\r\n\t\t\tif (current) this.setEmptyAnimation(current.trackIndex, mixDuration);\r\n\t\t}\r\n\t\tthis.queue.drainDisabled = oldDrainDisabled;\r\n\t\tthis.queue.drain();\r\n\t}\r\n\r\n\texpandToIndex (index: number) {\r\n\t\tif (index < this.tracks.length) return this.tracks[index];\r\n\t\tUtils.ensureArrayCapacity(this.tracks, index + 1, null);\r\n\t\tthis.tracks.length = index + 1;\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** @param last May be null. */\r\n\ttrackEntry (trackIndex: number, animation: Animation, loop: boolean, last: TrackEntry | null) {\r\n\t\tlet entry = this.trackEntryPool.obtain();\r\n\t\tentry.reset();\r\n\t\tentry.trackIndex = trackIndex;\r\n\t\tentry.animation = animation;\r\n\t\tentry.loop = loop;\r\n\t\tentry.holdPrevious = false;\r\n\r\n\t\tentry.reverse = false;\r\n\t\tentry.shortestRotation = false;\r\n\r\n\t\tentry.eventThreshold = 0;\r\n\t\tentry.attachmentThreshold = 0;\r\n\t\tentry.drawOrderThreshold = 0;\r\n\r\n\t\tentry.animationStart = 0;\r\n\t\tentry.animationEnd = animation.duration;\r\n\t\tentry.animationLast = -1;\r\n\t\tentry.nextAnimationLast = -1;\r\n\r\n\t\tentry.delay = 0;\r\n\t\tentry.trackTime = 0;\r\n\t\tentry.trackLast = -1;\r\n\t\tentry.nextTrackLast = -1;\r\n\t\tentry.trackEnd = Number.MAX_VALUE;\r\n\t\tentry.timeScale = 1;\r\n\r\n\t\tentry.alpha = 1;\r\n\t\tentry.mixTime = 0;\r\n\t\tentry.mixDuration = !last ? 0 : this.data.getMix(last.animation!, animation);\r\n\t\tentry.interruptAlpha = 1;\r\n\t\tentry.totalAlpha = 0;\r\n\t\tentry.mixBlend = MixBlend.replace;\r\n\t\treturn entry;\r\n\t}\r\n\r\n\t/** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\r\n\tclearNext (entry: TrackEntry) {\r\n\t\tlet next = entry.next;\r\n\t\twhile (next) {\r\n\t\t\tthis.queue.dispose(next);\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\tentry.next = null;\r\n\t}\r\n\r\n\t_animationsChanged () {\r\n\t\tthis.animationsChanged = false;\r\n\r\n\t\tthis.propertyIDs.clear();\r\n\t\tlet tracks = this.tracks;\r\n\t\tfor (let i = 0, n = tracks.length; i < n; i++) {\r\n\t\t\tlet entry = tracks[i];\r\n\t\t\tif (!entry) continue;\r\n\t\t\twhile (entry.mixingFrom)\r\n\t\t\t\tentry = entry.mixingFrom;\r\n\t\t\tdo {\r\n\t\t\t\tif (!entry.mixingTo || entry.mixBlend != MixBlend.add) this.computeHold(entry);\r\n\t\t\t\tentry = entry.mixingTo;\r\n\t\t\t} while (entry);\r\n\t\t}\r\n\t}\r\n\r\n\tcomputeHold (entry: TrackEntry) {\r\n\t\tlet to = entry.mixingTo;\r\n\t\tlet timelines = entry.animation!.timelines;\r\n\t\tlet timelinesCount = entry.animation!.timelines.length;\r\n\t\tlet timelineMode = entry.timelineMode;\r\n\t\ttimelineMode.length = timelinesCount;\r\n\t\tlet timelineHoldMix = entry.timelineHoldMix;\r\n\t\ttimelineHoldMix.length = 0;\r\n\t\tlet propertyIDs = this.propertyIDs;\r\n\r\n\t\tif (to && to.holdPrevious) {\r\n\t\t\tfor (let i = 0; i < timelinesCount; i++)\r\n\t\t\t\ttimelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\touter:\r\n\t\tfor (let i = 0; i < timelinesCount; i++) {\r\n\t\t\tlet timeline = timelines[i];\r\n\t\t\tlet ids = timeline.getPropertyIds();\r\n\t\t\tif (!propertyIDs.addAll(ids))\r\n\t\t\t\ttimelineMode[i] = SUBSEQUENT;\r\n\t\t\telse if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline\r\n\t\t\t\t|| timeline instanceof EventTimeline || !to.animation!.hasTimeline(ids)) {\r\n\t\t\t\ttimelineMode[i] = FIRST;\r\n\t\t\t} else {\r\n\t\t\t\tfor (let next = to.mixingTo; next; next = next!.mixingTo) {\r\n\t\t\t\t\tif (next.animation!.hasTimeline(ids)) continue;\r\n\t\t\t\t\tif (entry.mixDuration > 0) {\r\n\t\t\t\t\t\ttimelineMode[i] = HOLD_MIX;\r\n\t\t\t\t\t\ttimelineHoldMix[i] = next;\r\n\t\t\t\t\t\tcontinue outer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ttimelineMode[i] = HOLD_FIRST;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\r\n\tgetCurrent (trackIndex: number) {\r\n\t\tif (trackIndex >= this.tracks.length) return null;\r\n\t\treturn this.tracks[trackIndex];\r\n\t}\r\n\r\n\t/** Adds a listener to receive events for all track entries. */\r\n\taddListener (listener: AnimationStateListener) {\r\n\t\tif (!listener) throw new Error(\"listener cannot be null.\");\r\n\t\tthis.listeners.push(listener);\r\n\t}\r\n\r\n\t/** Removes the listener added with {@link #addListener()}. */\r\n\tremoveListener (listener: AnimationStateListener) {\r\n\t\tlet index = this.listeners.indexOf(listener);\r\n\t\tif (index >= 0) this.listeners.splice(index, 1);\r\n\t}\r\n\r\n\t/** Removes all listeners added with {@link #addListener()}. */\r\n\tclearListeners () {\r\n\t\tthis.listeners.length = 0;\r\n\t}\r\n\r\n\t/** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\r\n\t * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\r\n\t * are not wanted because new animations are being set. */\r\n\tclearListenerNotifications () {\r\n\t\tthis.queue.clear();\r\n\t}\r\n}\r\n\r\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\r\n *\r\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */\r\nexport class TrackEntry {\r\n\t/** The animation to apply for this track entry. */\r\n\tanimation: Animation | null = null;\r\n\r\n\tprevious: TrackEntry | null = null;\r\n\r\n\t/** The animation queued to start after this animation, or null. `next` makes up a linked list. */\r\n\tnext: TrackEntry | null = null;\r\n\r\n\t/** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\r\n\t * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\r\n\tmixingFrom: TrackEntry | null = null;\r\n\r\n\t/** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\r\n\t * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\r\n\tmixingTo: TrackEntry | null = null;\r\n\r\n\t/** The listener for events generated by this track entry, or null.\r\n\t *\r\n\t * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\r\n\t * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\r\n\tlistener: AnimationStateListener | null = null;\r\n\r\n\t/** The index of the track where this track entry is either current or queued.\r\n\t *\r\n\t * See {@link AnimationState#getCurrent()}. */\r\n\ttrackIndex: number = 0;\r\n\r\n\t/** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\r\n\t * duration. */\r\n\tloop: boolean = false;\r\n\r\n\t/** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\r\n\t * of being mixed out.\r\n\t *\r\n\t * When mixing between animations that key the same property, if a lower track also keys that property then the value will\r\n\t * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\r\n\t * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\r\n\t * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\r\n\t * keys the property, only when a higher track also keys the property.\r\n\t *\r\n\t * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\r\n\t * previous animation. */\r\n\tholdPrevious: boolean = false;\r\n\r\n\treverse: boolean = false;\r\n\r\n\tshortestRotation: boolean = false;\r\n\r\n\t/** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\r\n\t * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\r\n\t * timelines are not applied while this animation is being mixed out. */\r\n\teventThreshold: number = 0;\r\n\r\n\t/** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\r\n\t * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\r\n\t * 0, so attachment timelines are not applied while this animation is being mixed out. */\r\n\tattachmentThreshold: number = 0;\r\n\r\n\t/** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\r\n\t * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\r\n\t * so draw order timelines are not applied while this animation is being mixed out. */\r\n\tdrawOrderThreshold: number = 0;\r\n\r\n\t/** Seconds when this animation starts, both initially and after looping. Defaults to 0.\r\n\t *\r\n\t * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\r\n\t * value to prevent timeline keys before the start time from triggering. */\r\n\tanimationStart: number = 0;\r\n\r\n\t/** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\r\n\t * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\r\n\tanimationEnd: number = 0;\r\n\r\n\r\n\t/** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\r\n\t * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\r\n\t * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\r\n\t * is applied. */\r\n\tanimationLast: number = 0;\r\n\r\n\tnextAnimationLast: number = 0;\r\n\r\n\t/** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\r\n\t * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\r\n\t * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\r\n\t * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\r\n\t *\r\n\t * {@link #timeScale} affects the delay. */\r\n\tdelay: number = 0;\r\n\r\n\t/** Current time in seconds this track entry has been the current track entry. The track time determines\r\n\t * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\r\n\t * looping. */\r\n\ttrackTime: number = 0;\r\n\r\n\ttrackLast: number = 0; nextTrackLast: number = 0;\r\n\r\n\t/** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\r\n\t * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\r\n\t * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\r\n\t * properties keyed by the animation are set to the setup pose and the track is cleared.\r\n\t *\r\n\t * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\r\n\t * abruptly cease being applied. */\r\n\ttrackEnd: number = 0;\r\n\r\n\t/** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\r\n\t * faster. Defaults to 1.\r\n\t *\r\n\t * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\r\n\t * match the animation speed.\r\n\t *\r\n\t * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\r\n\t * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\r\n\t * the time scale is not 1, the delay may need to be adjusted.\r\n\t *\r\n\t * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\r\n\ttimeScale: number = 0;\r\n\r\n\t/** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\r\n\t * to 1, which overwrites the skeleton's current pose with this animation.\r\n\t *\r\n\t * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\r\n\t * use alpha on track 0 if the skeleton pose is from the last frame render. */\r\n\talpha: number = 0;\r\n\r\n\t/** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\r\n\t * slightly more than `mixDuration` when the mix is complete. */\r\n\tmixTime: number = 0;\r\n\r\n\t/** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\r\n\t * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\r\n\t *\r\n\t * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\r\n\t * properties it was animating.\r\n\t *\r\n\t * The `mixDuration` can be set manually rather than use the value from\r\n\t * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\r\n\t * track entry only before {@link AnimationState#update(float)} is first called.\r\n\t *\r\n\t * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\r\n\t * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\r\n\t * afterward. */\r\n\tmixDuration: number = 0; interruptAlpha: number = 0; totalAlpha: number = 0;\r\n\r\n\t/** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\r\n\t * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\r\n\t * the values from the lower tracks.\r\n\t *\r\n\t * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\r\n\t * called. */\r\n\tmixBlend = MixBlend.replace;\r\n\ttimelineMode = new Array<number>();\r\n\ttimelineHoldMix = new Array<TrackEntry>();\r\n\ttimelinesRotation = new Array<number>();\r\n\r\n\treset () {\r\n\t\tthis.next = null;\r\n\t\tthis.previous = null;\r\n\t\tthis.mixingFrom = null;\r\n\t\tthis.mixingTo = null;\r\n\t\tthis.animation = null;\r\n\t\tthis.listener = null;\r\n\t\tthis.timelineMode.length = 0;\r\n\t\tthis.timelineHoldMix.length = 0;\r\n\t\tthis.timelinesRotation.length = 0;\r\n\t}\r\n\r\n\t/** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\r\n\t * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\r\n\t * `animationStart` time. */\r\n\tgetAnimationTime () {\r\n\t\tif (this.loop) {\r\n\t\t\tlet duration = this.animationEnd - this.animationStart;\r\n\t\t\tif (duration == 0) return this.animationStart;\r\n\t\t\treturn (this.trackTime % duration) + this.animationStart;\r\n\t\t}\r\n\t\treturn Math.min(this.trackTime + this.animationStart, this.animationEnd);\r\n\t}\r\n\r\n\tsetAnimationLast (animationLast: number) {\r\n\t\tthis.animationLast = animationLast;\r\n\t\tthis.nextAnimationLast = animationLast;\r\n\t}\r\n\r\n\t/** Returns true if at least one loop has been completed.\r\n\t *\r\n\t * See {@link AnimationStateListener#complete()}. */\r\n\tisComplete () {\r\n\t\treturn this.trackTime >= this.animationEnd - this.animationStart;\r\n\t}\r\n\r\n\t/** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\r\n\t * long way around when using {@link #alpha} and starting animations on other tracks.\r\n\t *\r\n\t * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\r\n\t * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\r\n\t * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\r\n\t * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\r\n\tresetRotationDirections () {\r\n\t\tthis.timelinesRotation.length = 0;\r\n\t}\r\n\r\n\tgetTrackComplete () {\r\n\t\tlet duration = this.animationEnd - this.animationStart;\r\n\t\tif (duration != 0) {\r\n\t\t\tif (this.loop) return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.\r\n\t\t\tif (this.trackTime < duration) return duration; // Before duration.\r\n\t\t}\r\n\t\treturn this.trackTime; // Next update.\r\n\t}\r\n}\r\n\r\nexport class EventQueue {\r\n\tobjects: Array<any> = [];\r\n\tdrainDisabled = false;\r\n\tanimState: AnimationState;\r\n\r\n\tconstructor (animState: AnimationState) {\r\n\t\tthis.animState = animState;\r\n\t}\r\n\r\n\tstart (entry: TrackEntry) {\r\n\t\tthis.objects.push(EventType.start);\r\n\t\tthis.objects.push(entry);\r\n\t\tthis.animState.animationsChanged = true;\r\n\t}\r\n\r\n\tinterrupt (entry: TrackEntry) {\r\n\t\tthis.objects.push(EventType.interrupt);\r\n\t\tthis.objects.push(entry);\r\n\t}\r\n\r\n\tend (entry: TrackEntry) {\r\n\t\tthis.objects.push(EventType.end);\r\n\t\tthis.objects.push(entry);\r\n\t\tthis.animState.animationsChanged = true;\r\n\t}\r\n\r\n\tdispose (entry: TrackEntry) {\r\n\t\tthis.objects.push(EventType.dispose);\r\n\t\tthis.objects.push(entry);\r\n\t}\r\n\r\n\tcomplete (entry: TrackEntry) {\r\n\t\tthis.objects.push(EventType.complete);\r\n\t\tthis.objects.push(entry);\r\n\t}\r\n\r\n\tevent (entry: TrackEntry, event: Event) {\r\n\t\tthis.objects.push(EventType.event);\r\n\t\tthis.objects.push(entry);\r\n\t\tthis.objects.push(event);\r\n\t}\r\n\r\n\tdrain () {\r\n\t\tif (this.drainDisabled) return;\r\n\t\tthis.drainDisabled = true;\r\n\r\n\t\tlet objects = this.objects;\r\n\t\tlet listeners = this.animState.listeners;\r\n\r\n\t\tfor (let i = 0; i < objects.length; i += 2) {\r\n\t\t\tlet type = objects[i] as EventType;\r\n\t\t\tlet entry = objects[i + 1] as TrackEntry;\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase EventType.start:\r\n\t\t\t\t\tif (entry.listener && entry.listener.start) entry.listener.start(entry);\r\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++) {\r\n\t\t\t\t\t\tlet listener = listeners[ii];\r\n\t\t\t\t\t\tif (listener.start) listener.start(entry);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.interrupt:\r\n\t\t\t\t\tif (entry.listener && entry.listener.interrupt) entry.listener.interrupt(entry);\r\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++) {\r\n\t\t\t\t\t\tlet listener = listeners[ii];\r\n\t\t\t\t\t\tif (listener.interrupt) listener.interrupt(entry);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.end:\r\n\t\t\t\t\tif (entry.listener && entry.listener.end) entry.listener.end(entry);\r\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++) {\r\n\t\t\t\t\t\tlet listener = listeners[ii];\r\n\t\t\t\t\t\tif (listener.end) listener.end(entry);\r\n\t\t\t\t\t}\r\n\t\t\t\t// Fall through.\r\n\t\t\t\tcase EventType.dispose:\r\n\t\t\t\t\tif (entry.listener && entry.listener.dispose) entry.listener.dispose(entry);\r\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++) {\r\n\t\t\t\t\t\tlet listener = listeners[ii];\r\n\t\t\t\t\t\tif (listener.dispose) listener.dispose(entry);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.animState.trackEntryPool.free(entry);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.complete:\r\n\t\t\t\t\tif (entry.listener && entry.listener.complete) entry.listener.complete(entry);\r\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++) {\r\n\t\t\t\t\t\tlet listener = listeners[ii];\r\n\t\t\t\t\t\tif (listener.complete) listener.complete(entry);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase EventType.event:\r\n\t\t\t\t\tlet event = objects[i++ + 2] as Event;\r\n\t\t\t\t\tif (entry.listener && entry.listener.event) entry.listener.event(entry, event);\r\n\t\t\t\t\tfor (let ii = 0; ii < listeners.length; ii++) {\r\n\t\t\t\t\t\tlet listener = listeners[ii];\r\n\t\t\t\t\t\tif (listener.event) listener.event(entry, event);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.clear();\r\n\r\n\t\tthis.drainDisabled = false;\r\n\t}\r\n\r\n\tclear () {\r\n\t\tthis.objects.length = 0;\r\n\t}\r\n}\r\n\r\nexport enum EventType {\r\n\tstart, interrupt, end, dispose, complete, event\r\n}\r\n\r\n/** The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\r\n * events.\r\n *\r\n * See TrackEntry {@link TrackEntry#listener} and AnimationState\r\n * {@link AnimationState#addListener()}. */\r\nexport interface AnimationStateListener {\r\n\t/** Invoked when this entry has been set as the current entry. */\r\n\tstart?: (entry: TrackEntry) => void;\r\n\r\n\t/** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\r\n\t * mixing. */\r\n\tinterrupt?: (entry: TrackEntry) => void;\r\n\r\n\t/** Invoked when this entry is no longer the current entry and will never be applied again. */\r\n\tend?: (entry: TrackEntry) => void;\r\n\r\n\t/** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\r\n\t * References to the entry should not be kept after dispose is called, as it may be destroyed or reused. */\r\n\tdispose?: (entry: TrackEntry) => void;\r\n\r\n\t/** Invoked every time this entry's animation completes a loop. */\r\n\tcomplete?: (entry: TrackEntry) => void;\r\n\r\n\t/** Invoked when this entry's animation triggers an event. */\r\n\tevent?: (entry: TrackEntry, event: Event) => void;\r\n}\r\n\r\nexport abstract class AnimationStateAdapter implements AnimationStateListener {\r\n\tstart (entry: TrackEntry) {\r\n\t}\r\n\r\n\tinterrupt (entry: TrackEntry) {\r\n\t}\r\n\r\n\tend (entry: TrackEntry) {\r\n\t}\r\n\r\n\tdispose (entry: TrackEntry) {\r\n\t}\r\n\r\n\tcomplete (entry: TrackEntry) {\r\n\t}\r\n\r\n\tevent (entry: TrackEntry, event: Event) {\r\n\t}\r\n}\r\n\r\n/** 1. A previously applied timeline has set this property.\r\n *\r\n * Result: Mix from the current pose to the timeline pose. */\r\nexport const SUBSEQUENT = 0;\r\n/** 1. This is the first timeline to set this property.\r\n * 2. The next track entry applied after this one does not have a timeline to set this property.\r\n *\r\n * Result: Mix from the setup pose to the timeline pose. */\r\nexport const FIRST = 1;\r\n/** 1) A previously applied timeline has set this property.<br>\r\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\r\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\r\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\r\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\r\nexport const HOLD_SUBSEQUENT = 2;\r\n/** 1) This is the first timeline to set this property.<br>\r\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\r\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\r\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\r\n * that key the same property. A subsequent timeline will set this property using a mix. */\r\nexport const HOLD_FIRST = 3;\r\n/** 1. This is the first timeline to set this property.\r\n * 2. The next track entry to be applied does have a timeline to set this property.\r\n * 3. The next track entry after that one does have a timeline to set this property.\r\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\r\n *\r\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\r\n * 2 track entries in a row have a timeline that sets the same property.\r\n *\r\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\r\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\r\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\r\n * place. */\r\nexport const HOLD_MIX = 4;\r\n\r\nexport const SETUP = 1;\r\nexport const CURRENT = 2;\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Animation } from \"./Animation.js\";\r\nimport { SkeletonData } from \"./SkeletonData.js\";\r\nimport { StringMap } from \"./Utils.js\";\r\n\r\n\r\n/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed. */\r\nexport class AnimationStateData {\r\n\t/** The SkeletonData to look up animations when they are specified by name. */\r\n\tskeletonData: SkeletonData;\r\n\r\n\tanimationToMixTime: StringMap<number> = {};\r\n\r\n\t/** The mix duration to use when no mix duration has been defined between two animations. */\r\n\tdefaultMix = 0;\r\n\r\n\tconstructor (skeletonData: SkeletonData) {\r\n\t\tif (!skeletonData) throw new Error(\"skeletonData cannot be null.\");\r\n\t\tthis.skeletonData = skeletonData;\r\n\t}\r\n\r\n\t/** Sets a mix duration by animation name.\r\n\t *\r\n\t * See {@link #setMixWith()}. */\r\n\tsetMix (fromName: string, toName: string, duration: number) {\r\n\t\tlet from = this.skeletonData.findAnimation(fromName);\r\n\t\tif (!from) throw new Error(\"Animation not found: \" + fromName);\r\n\t\tlet to = this.skeletonData.findAnimation(toName);\r\n\t\tif (!to) throw new Error(\"Animation not found: \" + toName);\r\n\t\tthis.setMixWith(from, to, duration);\r\n\t}\r\n\r\n\t/** Sets the mix duration when changing from the specified animation to the other.\r\n\t *\r\n\t * See {@link TrackEntry#mixDuration}. */\r\n\tsetMixWith (from: Animation, to: Animation, duration: number) {\r\n\t\tif (!from) throw new Error(\"from cannot be null.\");\r\n\t\tif (!to) throw new Error(\"to cannot be null.\");\r\n\t\tlet key = from.name + \".\" + to.name;\r\n\t\tthis.animationToMixTime[key] = duration;\r\n\t}\r\n\r\n\t/** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\r\n\t  * no mix duration has been set. */\r\n\tgetMix (from: Animation, to: Animation) {\r\n\t\tlet key = from.name + \".\" + to.name;\r\n\t\tlet value = this.animationToMixTime[key];\r\n\t\treturn value === undefined ? this.defaultMix : value;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Color } from \"../Utils.js\";\r\nimport { VertexAttachment, Attachment } from \"./Attachment.js\";\r\n\r\n/** An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\r\n * effects, and more.\r\n *\r\n * See {@link SkeletonBounds} and [Bounding Boxes](http://esotericsoftware.com/spine-bounding-boxes) in the Spine User\r\n * Guide. */\r\nexport class BoundingBoxAttachment extends VertexAttachment {\r\n\tcolor = new Color(1, 1, 1, 1);\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\tcopy (): Attachment {\r\n\t\tlet copy = new BoundingBoxAttachment(this.name);\r\n\t\tthis.copyTo(copy);\r\n\t\tcopy.color.setFromColor(this.color);\r\n\t\treturn copy;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { SlotData } from \"../SlotData.js\";\r\nimport { Color } from \"../Utils.js\";\r\nimport { VertexAttachment, Attachment } from \"./Attachment.js\";\r\n\r\n/** An attachment with vertices that make up a polygon used for clipping the rendering of other attachments. */\r\nexport class ClippingAttachment extends VertexAttachment {\r\n\t/** Clipping is performed between the clipping polygon's slot and the end slot. Returns null if clipping is done until the end of\r\n\t * the skeleton's rendering. */\r\n\tendSlot: SlotData | null = null;\r\n\r\n\t// Nonessential.\r\n\t/** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\r\n\t * are not usually rendered at runtime. */\r\n\tcolor = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\tcopy (): Attachment {\r\n\t\tlet copy = new ClippingAttachment(this.name);\r\n\t\tthis.copyTo(copy);\r\n\t\tcopy.endSlot = this.endSlot;\r\n\t\tcopy.color.setFromColor(this.color);\r\n\t\treturn copy;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nexport abstract class Texture {\r\n\tprotected _image: HTMLImageElement | ImageBitmap;\r\n\r\n\tconstructor (image: HTMLImageElement | ImageBitmap) {\r\n\t\tthis._image = image;\r\n\t}\r\n\r\n\tgetImage (): HTMLImageElement | ImageBitmap {\r\n\t\treturn this._image;\r\n\t}\r\n\r\n\tabstract setFilters (minFilter: TextureFilter, magFilter: TextureFilter): void;\r\n\tabstract setWraps (uWrap: TextureWrap, vWrap: TextureWrap): void;\r\n\tabstract dispose (): void;\r\n}\r\n\r\nexport enum TextureFilter {\r\n\tNearest = 9728, // WebGLRenderingContext.NEAREST\r\n\tLinear = 9729, // WebGLRenderingContext.LINEAR\r\n\tMipMap = 9987, // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\r\n\tMipMapNearestNearest = 9984, // WebGLRenderingContext.NEAREST_MIPMAP_NEAREST\r\n\tMipMapLinearNearest = 9985, // WebGLRenderingContext.LINEAR_MIPMAP_NEAREST\r\n\tMipMapNearestLinear = 9986, // WebGLRenderingContext.NEAREST_MIPMAP_LINEAR\r\n\tMipMapLinearLinear = 9987 // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\r\n}\r\n\r\nexport enum TextureWrap {\r\n\tMirroredRepeat = 33648, // WebGLRenderingContext.MIRRORED_REPEAT\r\n\tClampToEdge = 33071, // WebGLRenderingContext.CLAMP_TO_EDGE\r\n\tRepeat = 10497 // WebGLRenderingContext.REPEAT\r\n}\r\n\r\nexport class TextureRegion {\r\n\ttexture: any;\r\n\tu = 0; v = 0;\r\n\tu2 = 0; v2 = 0;\r\n\twidth = 0; height = 0;\r\n\tdegrees = 0;\r\n\toffsetX = 0; offsetY = 0;\r\n\toriginalWidth = 0; originalHeight = 0;\r\n}\r\n\r\nexport class FakeTexture extends Texture {\r\n\tsetFilters (minFilter: TextureFilter, magFilter: TextureFilter) { }\r\n\tsetWraps (uWrap: TextureWrap, vWrap: TextureWrap) { }\r\n\tdispose () { }\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { AssetManagerBase } from \"./AssetManagerBase.js\";\r\nimport { TextureFilter, TextureWrap, Texture, TextureRegion } from \"./Texture.js\";\r\nimport { Disposable, Utils, StringMap } from \"./Utils.js\";\r\n\r\nexport class TextureAtlas implements Disposable {\r\n\tpages = new Array<TextureAtlasPage>();\r\n\tregions = new Array<TextureAtlasRegion>();\r\n\r\n\tconstructor (atlasText: string) {\r\n\t\tlet reader = new TextureAtlasReader(atlasText);\r\n\t\tlet entry = new Array<string>(4);\r\n\r\n\t\tlet pageFields: StringMap<(page: TextureAtlasPage) => void> = {};\r\n\t\tpageFields[\"size\"] = (page: TextureAtlasPage) => {\r\n\t\t\tpage!.width = parseInt(entry[1]);\r\n\t\t\tpage!.height = parseInt(entry[2]);\r\n\t\t};\r\n\t\tpageFields[\"format\"] = () => {\r\n\t\t\t// page.format = Format[tuple[0]]; we don't need format in WebGL\r\n\t\t};\r\n\t\tpageFields[\"filter\"] = (page: TextureAtlasPage) => {\r\n\t\t\tpage!.minFilter = Utils.enumValue(TextureFilter, entry[1]);\r\n\t\t\tpage!.magFilter = Utils.enumValue(TextureFilter, entry[2]);\r\n\t\t};\r\n\t\tpageFields[\"repeat\"] = (page: TextureAtlasPage) => {\r\n\t\t\tif (entry[1].indexOf('x') != -1) page!.uWrap = TextureWrap.Repeat;\r\n\t\t\tif (entry[1].indexOf('y') != -1) page!.vWrap = TextureWrap.Repeat;\r\n\t\t};\r\n\t\tpageFields[\"pma\"] = (page: TextureAtlasPage) => {\r\n\t\t\tpage!.pma = entry[1] == \"true\";\r\n\t\t};\r\n\r\n\t\tvar regionFields: StringMap<(region: TextureAtlasRegion) => void> = {};\r\n\t\tregionFields[\"xy\"] = (region: TextureAtlasRegion) => { // Deprecated, use bounds.\r\n\t\t\tregion.x = parseInt(entry[1]);\r\n\t\t\tregion.y = parseInt(entry[2]);\r\n\t\t};\r\n\t\tregionFields[\"size\"] = (region: TextureAtlasRegion) => { // Deprecated, use bounds.\r\n\t\t\tregion.width = parseInt(entry[1]);\r\n\t\t\tregion.height = parseInt(entry[2]);\r\n\t\t};\r\n\t\tregionFields[\"bounds\"] = (region: TextureAtlasRegion) => {\r\n\t\t\tregion.x = parseInt(entry[1]);\r\n\t\t\tregion.y = parseInt(entry[2]);\r\n\t\t\tregion.width = parseInt(entry[3]);\r\n\t\t\tregion.height = parseInt(entry[4]);\r\n\t\t};\r\n\t\tregionFields[\"offset\"] = (region: TextureAtlasRegion) => { // Deprecated, use offsets.\r\n\t\t\tregion.offsetX = parseInt(entry[1]);\r\n\t\t\tregion.offsetY = parseInt(entry[2]);\r\n\t\t};\r\n\t\tregionFields[\"orig\"] = (region: TextureAtlasRegion) => { // Deprecated, use offsets.\r\n\t\t\tregion.originalWidth = parseInt(entry[1]);\r\n\t\t\tregion.originalHeight = parseInt(entry[2]);\r\n\t\t};\r\n\t\tregionFields[\"offsets\"] = (region: TextureAtlasRegion) => {\r\n\t\t\tregion.offsetX = parseInt(entry[1]);\r\n\t\t\tregion.offsetY = parseInt(entry[2]);\r\n\t\t\tregion.originalWidth = parseInt(entry[3]);\r\n\t\t\tregion.originalHeight = parseInt(entry[4]);\r\n\t\t};\r\n\t\tregionFields[\"rotate\"] = (region: TextureAtlasRegion) => {\r\n\t\t\tlet value = entry[1];\r\n\t\t\tif (value == \"true\")\r\n\t\t\t\tregion.degrees = 90;\r\n\t\t\telse if (value != \"false\")\r\n\t\t\t\tregion.degrees = parseInt(value);\r\n\t\t};\r\n\t\tregionFields[\"index\"] = (region: TextureAtlasRegion) => {\r\n\t\t\tregion.index = parseInt(entry[1]);\r\n\t\t};\r\n\r\n\t\tlet line = reader.readLine();\r\n\t\t// Ignore empty lines before first entry.\r\n\t\twhile (line && line.trim().length == 0)\r\n\t\t\tline = reader.readLine();\r\n\t\t// Header entries.\r\n\t\twhile (true) {\r\n\t\t\tif (!line || line.trim().length == 0) break;\r\n\t\t\tif (reader.readEntry(entry, line) == 0) break; // Silently ignore all header fields.\r\n\t\t\tline = reader.readLine();\r\n\t\t}\r\n\r\n\t\t// Page and region entries.\r\n\t\tlet page: TextureAtlasPage | null = null;\r\n\t\tlet names: string[] | null = null;\r\n\t\tlet values: number[][] | null = null;\r\n\t\twhile (true) {\r\n\t\t\tif (line === null) break;\r\n\t\t\tif (line.trim().length == 0) {\r\n\t\t\t\tpage = null;\r\n\t\t\t\tline = reader.readLine();\r\n\t\t\t} else if (!page) {\r\n\t\t\t\tpage = new TextureAtlasPage(line.trim());\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (reader.readEntry(entry, line = reader.readLine()) == 0) break;\r\n\t\t\t\t\tlet field = pageFields[entry[0]];\r\n\t\t\t\t\tif (field) field(page);\r\n\t\t\t\t}\r\n\t\t\t\tthis.pages.push(page);\r\n\t\t\t} else {\r\n\t\t\t\tlet region = new TextureAtlasRegion(page, line);\r\n\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tlet count = reader.readEntry(entry, line = reader.readLine());\r\n\t\t\t\t\tif (count == 0) break;\r\n\t\t\t\t\tlet field = regionFields[entry[0]];\r\n\t\t\t\t\tif (field)\r\n\t\t\t\t\t\tfield(region);\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!names) names = [];\r\n\t\t\t\t\t\tif (!values) values = [];\r\n\t\t\t\t\t\tnames.push(entry[0]);\r\n\t\t\t\t\t\tlet entryValues: number[] = [];\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++)\r\n\t\t\t\t\t\t\tentryValues.push(parseInt(entry[i + 1]));\r\n\t\t\t\t\t\tvalues.push(entryValues);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (region.originalWidth == 0 && region.originalHeight == 0) {\r\n\t\t\t\t\tregion.originalWidth = region.width;\r\n\t\t\t\t\tregion.originalHeight = region.height;\r\n\t\t\t\t}\r\n\t\t\t\tif (names && names.length > 0 && values && values.length > 0) {\r\n\t\t\t\t\tregion.names = names;\r\n\t\t\t\t\tregion.values = values;\r\n\t\t\t\t\tnames = null;\r\n\t\t\t\t\tvalues = null;\r\n\t\t\t\t}\r\n\t\t\t\tregion.u = region.x / page.width;\r\n\t\t\t\tregion.v = region.y / page.height;\r\n\t\t\t\tif (region.degrees == 90) {\r\n\t\t\t\t\tregion.u2 = (region.x + region.height) / page.width;\r\n\t\t\t\t\tregion.v2 = (region.y + region.width) / page.height;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tregion.u2 = (region.x + region.width) / page.width;\r\n\t\t\t\t\tregion.v2 = (region.y + region.height) / page.height;\r\n\t\t\t\t}\r\n\t\t\t\tthis.regions.push(region);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfindRegion (name: string): TextureAtlasRegion | null {\r\n\t\tfor (let i = 0; i < this.regions.length; i++) {\r\n\t\t\tif (this.regions[i].name == name) {\r\n\t\t\t\treturn this.regions[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetTextures (assetManager: AssetManagerBase, pathPrefix: string = \"\") {\r\n\t\tfor (let page of this.pages)\r\n\t\t\tpage.setTexture(assetManager.get(pathPrefix + page.name));\r\n\t}\r\n\r\n\tdispose () {\r\n\t\tfor (let i = 0; i < this.pages.length; i++) {\r\n\t\t\tthis.pages[i].texture?.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass TextureAtlasReader {\r\n\tlines: Array<string>;\r\n\tindex: number = 0;\r\n\r\n\tconstructor (text: string) {\r\n\t\tthis.lines = text.split(/\\r\\n|\\r|\\n/);\r\n\t}\r\n\r\n\treadLine (): string | null {\r\n\t\tif (this.index >= this.lines.length)\r\n\t\t\treturn null;\r\n\t\treturn this.lines[this.index++];\r\n\t}\r\n\r\n\treadEntry (entry: string[], line: string | null): number {\r\n\t\tif (!line) return 0;\r\n\t\tline = line.trim();\r\n\t\tif (line.length == 0) return 0;\r\n\r\n\t\tlet colon = line.indexOf(':');\r\n\t\tif (colon == -1) return 0;\r\n\t\tentry[0] = line.substr(0, colon).trim();\r\n\t\tfor (let i = 1, lastMatch = colon + 1; ; i++) {\r\n\t\t\tlet comma = line.indexOf(',', lastMatch);\r\n\t\t\tif (comma == -1) {\r\n\t\t\t\tentry[i] = line.substr(lastMatch).trim();\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t\tentry[i] = line.substr(lastMatch, comma - lastMatch).trim();\r\n\t\t\tlastMatch = comma + 1;\r\n\t\t\tif (i == 4) return 4;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class TextureAtlasPage {\r\n\tname: string;\r\n\tminFilter: TextureFilter = TextureFilter.Nearest;\r\n\tmagFilter: TextureFilter = TextureFilter.Nearest;\r\n\tuWrap: TextureWrap = TextureWrap.ClampToEdge;\r\n\tvWrap: TextureWrap = TextureWrap.ClampToEdge;\r\n\ttexture: Texture | null = null;\r\n\twidth: number = 0;\r\n\theight: number = 0;\r\n\tpma: boolean = false;\r\n\tregions = new Array<TextureAtlasRegion>();\r\n\r\n\tconstructor (name: string) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tsetTexture (texture: Texture) {\r\n\t\tthis.texture = texture;\r\n\t\ttexture.setFilters(this.minFilter, this.magFilter);\r\n\t\ttexture.setWraps(this.uWrap, this.vWrap);\r\n\t\tfor (let region of this.regions)\r\n\t\t\tregion.texture = texture;\r\n\t}\r\n}\r\n\r\nexport class TextureAtlasRegion extends TextureRegion {\r\n\tpage: TextureAtlasPage;\r\n\tname: string;\r\n\tx: number = 0;\r\n\ty: number = 0;\r\n\toffsetX: number = 0;\r\n\toffsetY: number = 0;\r\n\toriginalWidth: number = 0;\r\n\toriginalHeight: number = 0;\r\n\tindex: number = 0;\r\n\tdegrees: number = 0;\r\n\tnames: string[] | null = null;\r\n\tvalues: number[][] | null = null;\r\n\r\n\tconstructor (page: TextureAtlasPage, name: string) {\r\n\t\tsuper();\r\n\t\tthis.page = page;\r\n\t\tthis.name = name;\r\n\t\tpage.regions.push(this);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { TextureRegion } from \"../Texture.js\";\r\nimport { TextureAtlasRegion } from \"../TextureAtlas.js\";\r\nimport { Color, NumberArrayLike, Utils } from \"../Utils.js\";\r\nimport { VertexAttachment, Attachment } from \"./Attachment.js\";\r\nimport { HasTextureRegion } from \"./HasTextureRegion.js\";\r\nimport { Sequence } from \"./Sequence.js\";\r\nimport { Slot } from \"../Slot.js\";\r\n\r\n/** An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\r\n * supported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\r\n *\r\n * See [Mesh attachments](http://esotericsoftware.com/spine-meshes) in the Spine User Guide. */\r\nexport class MeshAttachment extends VertexAttachment implements HasTextureRegion {\r\n\tregion: TextureRegion | null = null;\r\n\r\n\t/** The name of the texture region for this attachment. */\r\n\tpath: string;\r\n\r\n\t/** The UV pair for each vertex, normalized within the texture region. */\r\n\tregionUVs: NumberArrayLike = [];\r\n\r\n\t/** The UV pair for each vertex, normalized within the entire texture.\r\n\t *\r\n\t * See {@link #updateUVs}. */\r\n\tuvs: NumberArrayLike = [];\r\n\r\n\t/** Triplets of vertex indices which describe the mesh's triangulation. */\r\n\ttriangles: Array<number> = [];\r\n\r\n\t/** The color to tint the mesh. */\r\n\tcolor = new Color(1, 1, 1, 1);\r\n\r\n\t/** The width of the mesh's image. Available only when nonessential data was exported. */\r\n\twidth: number = 0;\r\n\r\n\t/** The height of the mesh's image. Available only when nonessential data was exported. */\r\n\theight: number = 0;\r\n\r\n\t/** The number of entries at the beginning of {@link #vertices} that make up the mesh hull. */\r\n\thullLength: number = 0;\r\n\r\n\t/** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\r\n\t * nonessential data was exported. Triangulation is not performed at runtime. */\r\n\tedges: Array<number> = [];\r\n\r\n\tprivate parentMesh: MeshAttachment | null = null;\r\n\r\n\tsequence: Sequence | null = null;\r\n\r\n\ttempColor = new Color(0, 0, 0, 0);\r\n\r\n\tconstructor (name: string, path: string) {\r\n\t\tsuper(name);\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/** Calculates {@link #uvs} using the {@link #regionUVs} and region. Must be called if the region, the region's properties, or\r\n\t * the {@link #regionUVs} are changed. */\r\n\tupdateRegion () {\r\n\t\tif (!this.region) throw new Error(\"Region not set.\");\r\n\t\tlet regionUVs = this.regionUVs;\r\n\t\tif (!this.uvs || this.uvs.length != regionUVs.length) this.uvs = Utils.newFloatArray(regionUVs.length);\r\n\t\tlet uvs = this.uvs;\r\n\t\tlet n = this.uvs.length;\r\n\t\tlet u = this.region.u, v = this.region.v, width = 0, height = 0;\r\n\t\tif (this.region instanceof TextureAtlasRegion) {\r\n\t\t\tlet region = this.region, image = region.page!.texture!.getImage();\r\n\t\t\tlet textureWidth = image.width, textureHeight = image.height;\r\n\t\t\tswitch (region.degrees) {\r\n\t\t\t\tcase 90:\r\n\t\t\t\t\tu -= (region.originalHeight - region.offsetY - region.height) / textureWidth;\r\n\t\t\t\t\tv -= (region.originalWidth - region.offsetX - region.width) / textureHeight;\r\n\t\t\t\t\twidth = region.originalHeight / textureWidth;\r\n\t\t\t\t\theight = region.originalWidth / textureHeight;\r\n\t\t\t\t\tfor (let i = 0; i < n; i += 2) {\r\n\t\t\t\t\t\tuvs[i] = u + regionUVs[i + 1] * width;\r\n\t\t\t\t\t\tuvs[i + 1] = v + (1 - regionUVs[i]) * height;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase 180:\r\n\t\t\t\t\tu -= (region.originalWidth - region.offsetX - region.width) / textureWidth;\r\n\t\t\t\t\tv -= region.offsetY / textureHeight;\r\n\t\t\t\t\twidth = region.originalWidth / textureWidth;\r\n\t\t\t\t\theight = region.originalHeight / textureHeight;\r\n\t\t\t\t\tfor (let i = 0; i < n; i += 2) {\r\n\t\t\t\t\t\tuvs[i] = u + (1 - regionUVs[i]) * width;\r\n\t\t\t\t\t\tuvs[i + 1] = v + (1 - regionUVs[i + 1]) * height;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase 270:\r\n\t\t\t\t\tu -= region.offsetY / textureWidth;\r\n\t\t\t\t\tv -= region.offsetX / textureHeight;\r\n\t\t\t\t\twidth = region.originalHeight / textureWidth;\r\n\t\t\t\t\theight = region.originalWidth / textureHeight;\r\n\t\t\t\t\tfor (let i = 0; i < n; i += 2) {\r\n\t\t\t\t\t\tuvs[i] = u + (1 - regionUVs[i + 1]) * width;\r\n\t\t\t\t\t\tuvs[i + 1] = v + regionUVs[i] * height;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tu -= region.offsetX / textureWidth;\r\n\t\t\tv -= (region.originalHeight - region.offsetY - region.height) / textureHeight;\r\n\t\t\twidth = region.originalWidth / textureWidth;\r\n\t\t\theight = region.originalHeight / textureHeight;\r\n\t\t} else if (!this.region) {\r\n\t\t\tu = v = 0;\r\n\t\t\twidth = height = 1;\r\n\t\t} else {\r\n\t\t\twidth = this.region.u2 - u;\r\n\t\t\theight = this.region.v2 - v;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < n; i += 2) {\r\n\t\t\tuvs[i] = u + regionUVs[i] * width;\r\n\t\t\tuvs[i + 1] = v + regionUVs[i + 1] * height;\r\n\t\t}\r\n\t}\r\n\r\n\t/** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\r\n\t * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\r\n\t * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */\r\n\tgetParentMesh () {\r\n\t\treturn this.parentMesh;\r\n\t}\r\n\r\n\t/** @param parentMesh May be null. */\r\n\tsetParentMesh (parentMesh: MeshAttachment) {\r\n\t\tthis.parentMesh = parentMesh;\r\n\t\tif (parentMesh) {\r\n\t\t\tthis.bones = parentMesh.bones;\r\n\t\t\tthis.vertices = parentMesh.vertices;\r\n\t\t\tthis.worldVerticesLength = parentMesh.worldVerticesLength;\r\n\t\t\tthis.regionUVs = parentMesh.regionUVs;\r\n\t\t\tthis.triangles = parentMesh.triangles;\r\n\t\t\tthis.hullLength = parentMesh.hullLength;\r\n\t\t\tthis.worldVerticesLength = parentMesh.worldVerticesLength\r\n\t\t}\r\n\t}\r\n\r\n\tcopy (): Attachment {\r\n\t\tif (this.parentMesh) return this.newLinkedMesh();\r\n\r\n\t\tlet copy = new MeshAttachment(this.name, this.path);\r\n\t\tcopy.region = this.region;\r\n\t\tcopy.color.setFromColor(this.color);\r\n\r\n\t\tthis.copyTo(copy);\r\n\t\tcopy.regionUVs = new Array<number>(this.regionUVs.length);\r\n\t\tUtils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\r\n\t\tcopy.uvs = new Array<number>(this.uvs.length);\r\n\t\tUtils.arrayCopy(this.uvs, 0, copy.uvs, 0, this.uvs.length);\r\n\t\tcopy.triangles = new Array<number>(this.triangles.length);\r\n\t\tUtils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\r\n\t\tcopy.hullLength = this.hullLength;\r\n\r\n\t\tcopy.sequence = this.sequence != null ? this.sequence.copy() : null;\r\n\r\n\t\t// Nonessential.\r\n\t\tif (this.edges) {\r\n\t\t\tcopy.edges = new Array<number>(this.edges.length);\r\n\t\t\tUtils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\r\n\t\t}\r\n\t\tcopy.width = this.width;\r\n\t\tcopy.height = this.height;\r\n\r\n\t\treturn copy;\r\n\t}\r\n\r\n\tcomputeWorldVertices (slot: Slot, start: number, count: number, worldVertices: NumberArrayLike, offset: number, stride: number) {\r\n\t\tif (this.sequence != null) this.sequence.apply(slot, this);\r\n\t\tsuper.computeWorldVertices(slot, start, count, worldVertices, offset, stride);\r\n\t}\r\n\r\n\t/** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/\r\n\tnewLinkedMesh (): MeshAttachment {\r\n\t\tlet copy = new MeshAttachment(this.name, this.path);\r\n\t\tcopy.region = this.region;\r\n\t\tcopy.color.setFromColor(this.color);\r\n\t\tcopy.timelineAttachment = this.timelineAttachment;\r\n\t\tcopy.setParentMesh(this.parentMesh ? this.parentMesh : this);\r\n\t\tif (copy.region != null) copy.updateRegion();\r\n\t\treturn copy;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Color, Utils } from \"../Utils.js\";\r\nimport { VertexAttachment, Attachment } from \"./Attachment.js\";\r\n\r\n/** An attachment whose vertices make up a composite Bezier curve.\r\n *\r\n * See {@link PathConstraint} and [Paths](http://esotericsoftware.com/spine-paths) in the Spine User Guide. */\r\nexport class PathAttachment extends VertexAttachment {\r\n\r\n\t/** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */\r\n\tlengths: Array<number> = [];\r\n\r\n\t/** If true, the start and end knots are connected. */\r\n\tclosed = false;\r\n\r\n\t/** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\r\n\t * calculations are performed but calculating positions along the path is less accurate. */\r\n\tconstantSpeed = false;\r\n\r\n\t/** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\r\n\t * rendered at runtime. */\r\n\tcolor = new Color(1, 1, 1, 1);\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\tcopy (): Attachment {\r\n\t\tlet copy = new PathAttachment(this.name);\r\n\t\tthis.copyTo(copy);\r\n\t\tcopy.lengths = new Array<number>(this.lengths.length);\r\n\t\tUtils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\r\n\t\tcopy.closed = closed;\r\n\t\tcopy.constantSpeed = this.constantSpeed;\r\n\t\tcopy.color.setFromColor(this.color);\r\n\t\treturn copy;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Bone } from \"../Bone.js\";\r\nimport { Color, Vector2, MathUtils } from \"../Utils.js\";\r\nimport { VertexAttachment, Attachment } from \"./Attachment.js\";\r\n\r\n/** An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\r\n * used in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\r\n * skin.\r\n *\r\n * See [Point Attachments](http://esotericsoftware.com/spine-point-attachments) in the Spine User Guide. */\r\nexport class PointAttachment extends VertexAttachment {\r\n\tx: number = 0;\r\n\ty: number = 0;\r\n\trotation: number = 0;\r\n\r\n\t/** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\r\n\t * are not usually rendered at runtime. */\r\n\tcolor = new Color(0.38, 0.94, 0, 1);\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\tcomputeWorldPosition (bone: Bone, point: Vector2) {\r\n\t\tpoint.x = this.x * bone.a + this.y * bone.b + bone.worldX;\r\n\t\tpoint.y = this.x * bone.c + this.y * bone.d + bone.worldY;\r\n\t\treturn point;\r\n\t}\r\n\r\n\tcomputeWorldRotation (bone: Bone) {\r\n\t\tlet cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);\r\n\t\tlet x = cos * bone.a + sin * bone.b;\r\n\t\tlet y = cos * bone.c + sin * bone.d;\r\n\t\treturn Math.atan2(y, x) * MathUtils.radDeg;\r\n\t}\r\n\r\n\tcopy (): Attachment {\r\n\t\tlet copy = new PointAttachment(this.name);\r\n\t\tcopy.x = this.x;\r\n\t\tcopy.y = this.y;\r\n\t\tcopy.rotation = this.rotation;\r\n\t\tcopy.color.setFromColor(this.color);\r\n\t\treturn copy;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Bone } from \"../Bone.js\";\r\nimport { TextureRegion } from \"../Texture.js\";\r\nimport { Color, NumberArrayLike, Utils } from \"../Utils.js\";\r\nimport { Attachment } from \"./Attachment.js\";\r\nimport { HasTextureRegion } from \"./HasTextureRegion.js\";\r\nimport { Sequence } from \"./Sequence.js\";\r\nimport { Slot } from \"../Slot.js\";\r\n\r\n/** An attachment that displays a textured quadrilateral.\r\n *\r\n * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide. */\r\nexport class RegionAttachment extends Attachment implements HasTextureRegion {\r\n\t/** The local x translation. */\r\n\tx = 0;\r\n\r\n\t/** The local y translation. */\r\n\ty = 0;\r\n\r\n\t/** The local scaleX. */\r\n\tscaleX = 1;\r\n\r\n\t/** The local scaleY. */\r\n\tscaleY = 1;\r\n\r\n\t/** The local rotation. */\r\n\trotation = 0;\r\n\r\n\t/** The width of the region attachment in Spine. */\r\n\twidth = 0;\r\n\r\n\t/** The height of the region attachment in Spine. */\r\n\theight = 0;\r\n\r\n\t/** The color to tint the region attachment. */\r\n\tcolor = new Color(1, 1, 1, 1);\r\n\r\n\t/** The name of the texture region for this attachment. */\r\n\tpath: string;\r\n\r\n\tregion: TextureRegion | null = null;\r\n\tsequence: Sequence | null = null;\r\n\r\n\t/** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\r\n\t *\r\n\t * See {@link #updateOffset()}. */\r\n\toffset = Utils.newFloatArray(8);\r\n\r\n\tuvs = Utils.newFloatArray(8);\r\n\r\n\ttempColor = new Color(1, 1, 1, 1);\r\n\r\n\tconstructor (name: string, path: string) {\r\n\t\tsuper(name);\r\n\t\tthis.path = path;\r\n\t}\r\n\r\n\t/** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\r\n\tupdateRegion (): void {\r\n\t\tif (!this.region) throw new Error(\"Region not set.\");\r\n\t\tlet region = this.region;\r\n\t\tlet uvs = this.uvs;\r\n\r\n\t\tif (region == null) {\r\n\t\t\tuvs[0] = 0;\r\n\t\t\tuvs[1] = 0;\r\n\t\t\tuvs[2] = 0;\r\n\t\t\tuvs[3] = 1;\r\n\t\t\tuvs[4] = 1;\r\n\t\t\tuvs[5] = 1;\r\n\t\t\tuvs[6] = 1;\r\n\t\t\tuvs[7] = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet regionScaleX = this.width / this.region.originalWidth * this.scaleX;\r\n\t\tlet regionScaleY = this.height / this.region.originalHeight * this.scaleY;\r\n\t\tlet localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\r\n\t\tlet localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\r\n\t\tlet localX2 = localX + this.region.width * regionScaleX;\r\n\t\tlet localY2 = localY + this.region.height * regionScaleY;\r\n\t\tlet radians = this.rotation * Math.PI / 180;\r\n\t\tlet cos = Math.cos(radians);\r\n\t\tlet sin = Math.sin(radians);\r\n\t\tlet x = this.x, y = this.y;\r\n\t\tlet localXCos = localX * cos + x;\r\n\t\tlet localXSin = localX * sin;\r\n\t\tlet localYCos = localY * cos + y;\r\n\t\tlet localYSin = localY * sin;\r\n\t\tlet localX2Cos = localX2 * cos + x;\r\n\t\tlet localX2Sin = localX2 * sin;\r\n\t\tlet localY2Cos = localY2 * cos + y;\r\n\t\tlet localY2Sin = localY2 * sin;\r\n\t\tlet offset = this.offset;\r\n\t\toffset[0] = localXCos - localYSin;\r\n\t\toffset[1] = localYCos + localXSin;\r\n\t\toffset[2] = localXCos - localY2Sin;\r\n\t\toffset[3] = localY2Cos + localXSin;\r\n\t\toffset[4] = localX2Cos - localY2Sin;\r\n\t\toffset[5] = localY2Cos + localX2Sin;\r\n\t\toffset[6] = localX2Cos - localYSin;\r\n\t\toffset[7] = localYCos + localX2Sin;\r\n\r\n\t\tif (region.degrees == 90) {\r\n\t\t\tuvs[0] = region.u2;\r\n\t\t\tuvs[1] = region.v2;\r\n\t\t\tuvs[2] = region.u;\r\n\t\t\tuvs[3] = region.v2;\r\n\t\t\tuvs[4] = region.u;\r\n\t\t\tuvs[5] = region.v;\r\n\t\t\tuvs[6] = region.u2;\r\n\t\t\tuvs[7] = region.v;\r\n\t\t} else {\r\n\t\t\tuvs[0] = region.u;\r\n\t\t\tuvs[1] = region.v2;\r\n\t\t\tuvs[2] = region.u;\r\n\t\t\tuvs[3] = region.v;\r\n\t\t\tuvs[4] = region.u2;\r\n\t\t\tuvs[5] = region.v;\r\n\t\t\tuvs[6] = region.u2;\r\n\t\t\tuvs[7] = region.v2;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\r\n\t * be changed.\r\n\t * <p>\r\n\t * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\r\n\t * Runtimes Guide.\r\n\t * @param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.\r\n\t * @param offset The <code>worldVertices</code> index to begin writing values.\r\n\t * @param stride The number of <code>worldVertices</code> entries between the value pairs written. */\r\n\tcomputeWorldVertices (slot: Slot, worldVertices: NumberArrayLike, offset: number, stride: number) {\r\n\t\tif (this.sequence != null)\r\n\t\t\tthis.sequence.apply(slot, this);\r\n\r\n\t\tlet bone = slot.bone;\r\n\t\tlet vertexOffset = this.offset;\r\n\t\tlet x = bone.worldX, y = bone.worldY;\r\n\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\r\n\t\tlet offsetX = 0, offsetY = 0;\r\n\r\n\t\toffsetX = vertexOffset[0];\r\n\t\toffsetY = vertexOffset[1];\r\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // br\r\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n\t\toffset += stride;\r\n\r\n\t\toffsetX = vertexOffset[2];\r\n\t\toffsetY = vertexOffset[3];\r\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // bl\r\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n\t\toffset += stride;\r\n\r\n\t\toffsetX = vertexOffset[4];\r\n\t\toffsetY = vertexOffset[5];\r\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // ul\r\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n\t\toffset += stride;\r\n\r\n\t\toffsetX = vertexOffset[6];\r\n\t\toffsetY = vertexOffset[7];\r\n\t\tworldVertices[offset] = offsetX * a + offsetY * b + x; // ur\r\n\t\tworldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n\t}\r\n\r\n\tcopy (): Attachment {\r\n\t\tlet copy = new RegionAttachment(this.name, this.path);\r\n\t\tcopy.region = this.region;\r\n\t\tcopy.x = this.x;\r\n\t\tcopy.y = this.y;\r\n\t\tcopy.scaleX = this.scaleX;\r\n\t\tcopy.scaleY = this.scaleY;\r\n\t\tcopy.rotation = this.rotation;\r\n\t\tcopy.width = this.width;\r\n\t\tcopy.height = this.height;\r\n\t\tUtils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\r\n\t\tUtils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\r\n\t\tcopy.color.setFromColor(this.color);\r\n\t\tcopy.sequence = this.sequence != null ? this.sequence.copy() : null;\r\n\t\treturn copy;\r\n\t}\r\n\r\n\tstatic X1 = 0;\r\n\tstatic Y1 = 1;\r\n\tstatic C1R = 2;\r\n\tstatic C1G = 3;\r\n\tstatic C1B = 4;\r\n\tstatic C1A = 5;\r\n\tstatic U1 = 6;\r\n\tstatic V1 = 7;\r\n\r\n\tstatic X2 = 8;\r\n\tstatic Y2 = 9;\r\n\tstatic C2R = 10;\r\n\tstatic C2G = 11;\r\n\tstatic C2B = 12;\r\n\tstatic C2A = 13;\r\n\tstatic U2 = 14;\r\n\tstatic V2 = 15;\r\n\r\n\tstatic X3 = 16;\r\n\tstatic Y3 = 17;\r\n\tstatic C3R = 18;\r\n\tstatic C3G = 19;\r\n\tstatic C3B = 20;\r\n\tstatic C3A = 21;\r\n\tstatic U3 = 22;\r\n\tstatic V3 = 23;\r\n\r\n\tstatic X4 = 24;\r\n\tstatic Y4 = 25;\r\n\tstatic C4R = 26;\r\n\tstatic C4G = 27;\r\n\tstatic C4B = 28;\r\n\tstatic C4A = 29;\r\n\tstatic U4 = 30;\r\n\tstatic V4 = 31;\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { AttachmentLoader } from \"./attachments/AttachmentLoader.js\";\r\nimport { BoundingBoxAttachment } from \"./attachments/BoundingBoxAttachment.js\";\r\nimport { ClippingAttachment } from \"./attachments/ClippingAttachment.js\";\r\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\r\nimport { PathAttachment } from \"./attachments/PathAttachment.js\";\r\nimport { PointAttachment } from \"./attachments/PointAttachment.js\";\r\nimport { RegionAttachment } from \"./attachments/RegionAttachment.js\";\r\nimport { Skin } from \"./Skin.js\";\r\nimport { TextureAtlas } from \"./TextureAtlas.js\";\r\nimport { Sequence } from \"./attachments/Sequence.js\"\r\n\r\n/** An {@link AttachmentLoader} that configures attachments using texture regions from an {@link TextureAtlas}.\r\n *\r\n * See [Loading skeleton data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the\r\n * Spine Runtimes Guide. */\r\nexport class AtlasAttachmentLoader implements AttachmentLoader {\r\n\tatlas: TextureAtlas;\r\n\r\n\tconstructor (atlas: TextureAtlas) {\r\n\t\tthis.atlas = atlas;\r\n\t}\r\n\r\n\tloadSequence (name: string, basePath: string, sequence: Sequence) {\r\n\t\tlet regions = sequence.regions;\r\n\t\tfor (let i = 0, n = regions.length; i < n; i++) {\r\n\t\t\tlet path = sequence.getPath(basePath, i);\r\n\t\t\tlet region = this.atlas.findRegion(path);\r\n\t\t\tif (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (sequence: \" + name + \")\");\r\n\t\t\tregions[i] = region;\r\n\t\t}\r\n\t}\r\n\r\n\tnewRegionAttachment (skin: Skin, name: string, path: string, sequence: Sequence): RegionAttachment {\r\n\t\tlet attachment = new RegionAttachment(name, path);\r\n\t\tif (sequence != null) {\r\n\t\t\tthis.loadSequence(name, path, sequence);\r\n\t\t} else {\r\n\t\t\tlet region = this.atlas.findRegion(path);\r\n\t\t\tif (!region) throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\r\n\t\t\tattachment.region = region;\r\n\t\t}\r\n\t\treturn attachment;\r\n\t}\r\n\r\n\tnewMeshAttachment (skin: Skin, name: string, path: string, sequence: Sequence): MeshAttachment {\r\n\t\tlet attachment = new MeshAttachment(name, path);\r\n\t\tif (sequence != null) {\r\n\t\t\tthis.loadSequence(name, path, sequence);\r\n\t\t} else {\r\n\t\t\tlet region = this.atlas.findRegion(path);\r\n\t\t\tif (!region) throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\r\n\t\t\tattachment.region = region;\r\n\t\t}\r\n\t\treturn attachment;\r\n\t}\r\n\r\n\tnewBoundingBoxAttachment (skin: Skin, name: string): BoundingBoxAttachment {\r\n\t\treturn new BoundingBoxAttachment(name);\r\n\t}\r\n\r\n\tnewPathAttachment (skin: Skin, name: string): PathAttachment {\r\n\t\treturn new PathAttachment(name);\r\n\t}\r\n\r\n\tnewPointAttachment (skin: Skin, name: string): PointAttachment {\r\n\t\treturn new PointAttachment(name);\r\n\t}\r\n\r\n\tnewClippingAttachment (skin: Skin, name: string): ClippingAttachment {\r\n\t\treturn new ClippingAttachment(name);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Color } from \"./Utils.js\";\r\n\r\n/** Stores the setup pose for a {@link Bone}. */\r\nexport class BoneData {\r\n\t/** The index of the bone in {@link Skeleton#getBones()}. */\r\n\tindex: number = 0;\r\n\r\n\t/** The name of the bone, which is unique across all bones in the skeleton. */\r\n\tname: string;\r\n\r\n\t/** @returns May be null. */\r\n\tparent: BoneData | null = null;\r\n\r\n\t/** The bone's length. */\r\n\tlength: number = 0;\r\n\r\n\t/** The local x translation. */\r\n\tx = 0;\r\n\r\n\t/** The local y translation. */\r\n\ty = 0;\r\n\r\n\t/** The local rotation. */\r\n\trotation = 0;\r\n\r\n\t/** The local scaleX. */\r\n\tscaleX = 1;\r\n\r\n\t/** The local scaleY. */\r\n\tscaleY = 1;\r\n\r\n\t/** The local shearX. */\r\n\tshearX = 0;\r\n\r\n\t/** The local shearX. */\r\n\tshearY = 0;\r\n\r\n\t/** The transform mode for how parent world transforms affect this bone. */\r\n\ttransformMode = TransformMode.Normal;\r\n\r\n\t/** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\r\n\t  * bone.\r\n\t  * @see Skin#bones */\r\n\tskinRequired = false;\r\n\r\n\t/** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\r\n\t * rendered at runtime. */\r\n\tcolor = new Color();\r\n\r\n\tconstructor (index: number, name: string, parent: BoneData | null) {\r\n\t\tif (index < 0) throw new Error(\"index must be >= 0.\");\r\n\t\tif (!name) throw new Error(\"name cannot be null.\");\r\n\t\tthis.index = index;\r\n\t\tthis.name = name;\r\n\t\tthis.parent = parent;\r\n\t}\r\n}\r\n\r\n/** Determines how a bone inherits world transforms from parent bones. */\r\nexport enum TransformMode { Normal, OnlyTranslation, NoRotationOrReflection, NoScale, NoScaleOrReflection }\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { BoneData, TransformMode } from \"./BoneData.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { Updatable } from \"./Updatable.js\";\r\nimport { MathUtils, Vector2 } from \"./Utils.js\";\r\n\r\n/** Stores a bone's current pose.\r\n *\r\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\r\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\r\n * constraint or application code modifies the world transform after it was computed from the local transform. */\r\nexport class Bone implements Updatable {\r\n\t/** The bone's setup pose data. */\r\n\tdata: BoneData;\r\n\r\n\t/** The skeleton this bone belongs to. */\r\n\tskeleton: Skeleton;\r\n\r\n\t/** The parent bone, or null if this is the root bone. */\r\n\tparent: Bone | null = null;\r\n\r\n\t/** The immediate children of this bone. */\r\n\tchildren = new Array<Bone>();\r\n\r\n\t/** The local x translation. */\r\n\tx = 0;\r\n\r\n\t/** The local y translation. */\r\n\ty = 0;\r\n\r\n\t/** The local rotation in degrees, counter clockwise. */\r\n\trotation = 0;\r\n\r\n\t/** The local scaleX. */\r\n\tscaleX = 0;\r\n\r\n\t/** The local scaleY. */\r\n\tscaleY = 0;\r\n\r\n\t/** The local shearX. */\r\n\tshearX = 0;\r\n\r\n\t/** The local shearY. */\r\n\tshearY = 0;\r\n\r\n\t/** The applied local x translation. */\r\n\tax = 0;\r\n\r\n\t/** The applied local y translation. */\r\n\tay = 0;\r\n\r\n\t/** The applied local rotation in degrees, counter clockwise. */\r\n\tarotation = 0;\r\n\r\n\t/** The applied local scaleX. */\r\n\tascaleX = 0;\r\n\r\n\t/** The applied local scaleY. */\r\n\tascaleY = 0;\r\n\r\n\t/** The applied local shearX. */\r\n\tashearX = 0;\r\n\r\n\t/** The applied local shearY. */\r\n\tashearY = 0;\r\n\r\n\t/** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\r\n\ta = 0;\r\n\r\n\t/** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\r\n\tb = 0;\r\n\r\n\t/** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\r\n\tc = 0;\r\n\r\n\t/** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\r\n\td = 0;\r\n\r\n\t/** The world X position. If changed, {@link #updateAppliedTransform()} should be called. */\r\n\tworldY = 0;\r\n\r\n\t/** The world Y position. If changed, {@link #updateAppliedTransform()} should be called. */\r\n\tworldX = 0;\r\n\r\n\tsorted = false;\r\n\tactive = false;\r\n\r\n\t/** @param parent May be null. */\r\n\tconstructor (data: BoneData, skeleton: Skeleton, parent: Bone | null) {\r\n\t\tif (!data) throw new Error(\"data cannot be null.\");\r\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\t\tthis.data = data;\r\n\t\tthis.skeleton = skeleton;\r\n\t\tthis.parent = parent;\r\n\t\tthis.setToSetupPose();\r\n\t}\r\n\r\n\t/** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\r\n\t  * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */\r\n\tisActive () {\r\n\t\treturn this.active;\r\n\t}\r\n\r\n\t/** Computes the world transform using the parent bone and this bone's local applied transform. */\r\n\tupdate () {\r\n\t\tthis.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);\r\n\t}\r\n\r\n\t/** Computes the world transform using the parent bone and this bone's local transform.\r\n\t *\r\n\t * See {@link #updateWorldTransformWith()}. */\r\n\tupdateWorldTransform () {\r\n\t\tthis.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\r\n\t}\r\n\r\n\t/** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\r\n\t * specified local transform. Child bones are not updated.\r\n\t *\r\n\t * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n\t * Runtimes Guide. */\r\n\tupdateWorldTransformWith (x: number, y: number, rotation: number, scaleX: number, scaleY: number, shearX: number, shearY: number) {\r\n\t\tthis.ax = x;\r\n\t\tthis.ay = y;\r\n\t\tthis.arotation = rotation;\r\n\t\tthis.ascaleX = scaleX;\r\n\t\tthis.ascaleY = scaleY;\r\n\t\tthis.ashearX = shearX;\r\n\t\tthis.ashearY = shearY;\r\n\r\n\t\tlet parent = this.parent;\r\n\t\tif (!parent) { // Root bone.\r\n\t\t\tlet skeleton = this.skeleton;\r\n\t\t\tlet rotationY = rotation + 90 + shearY;\r\n\t\t\tlet sx = skeleton.scaleX;\r\n\t\t\tlet sy = skeleton.scaleY;\r\n\t\t\tthis.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\r\n\t\t\tthis.b = MathUtils.cosDeg(rotationY) * scaleY * sx;\r\n\t\t\tthis.c = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\r\n\t\t\tthis.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\r\n\t\t\tthis.worldX = x * sx + skeleton.x;\r\n\t\t\tthis.worldY = y * sy + skeleton.y;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\r\n\t\tthis.worldX = pa * x + pb * y + parent.worldX;\r\n\t\tthis.worldY = pc * x + pd * y + parent.worldY;\r\n\r\n\t\tswitch (this.data.transformMode) {\r\n\t\t\tcase TransformMode.Normal: {\r\n\t\t\t\tlet rotationY = rotation + 90 + shearY;\r\n\t\t\t\tlet la = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n\t\t\t\tlet lb = MathUtils.cosDeg(rotationY) * scaleY;\r\n\t\t\t\tlet lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n\t\t\t\tlet ld = MathUtils.sinDeg(rotationY) * scaleY;\r\n\t\t\t\tthis.a = pa * la + pb * lc;\r\n\t\t\t\tthis.b = pa * lb + pb * ld;\r\n\t\t\t\tthis.c = pc * la + pd * lc;\r\n\t\t\t\tthis.d = pc * lb + pd * ld;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcase TransformMode.OnlyTranslation: {\r\n\t\t\t\tlet rotationY = rotation + 90 + shearY;\r\n\t\t\t\tthis.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n\t\t\t\tthis.b = MathUtils.cosDeg(rotationY) * scaleY;\r\n\t\t\t\tthis.c = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n\t\t\t\tthis.d = MathUtils.sinDeg(rotationY) * scaleY;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase TransformMode.NoRotationOrReflection: {\r\n\t\t\t\tlet s = pa * pa + pc * pc;\r\n\t\t\t\tlet prx = 0;\r\n\t\t\t\tif (s > 0.0001) {\r\n\t\t\t\t\ts = Math.abs(pa * pd - pb * pc) / s;\r\n\t\t\t\t\tpa /= this.skeleton.scaleX;\r\n\t\t\t\t\tpc /= this.skeleton.scaleY;\r\n\t\t\t\t\tpb = pc * s;\r\n\t\t\t\t\tpd = pa * s;\r\n\t\t\t\t\tprx = Math.atan2(pc, pa) * MathUtils.radDeg;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpa = 0;\r\n\t\t\t\t\tpc = 0;\r\n\t\t\t\t\tprx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\r\n\t\t\t\t}\r\n\t\t\t\tlet rx = rotation + shearX - prx;\r\n\t\t\t\tlet ry = rotation + shearY - prx + 90;\r\n\t\t\t\tlet la = MathUtils.cosDeg(rx) * scaleX;\r\n\t\t\t\tlet lb = MathUtils.cosDeg(ry) * scaleY;\r\n\t\t\t\tlet lc = MathUtils.sinDeg(rx) * scaleX;\r\n\t\t\t\tlet ld = MathUtils.sinDeg(ry) * scaleY;\r\n\t\t\t\tthis.a = pa * la - pb * lc;\r\n\t\t\t\tthis.b = pa * lb - pb * ld;\r\n\t\t\t\tthis.c = pc * la + pd * lc;\r\n\t\t\t\tthis.d = pc * lb + pd * ld;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase TransformMode.NoScale:\r\n\t\t\tcase TransformMode.NoScaleOrReflection: {\r\n\t\t\t\tlet cos = MathUtils.cosDeg(rotation);\r\n\t\t\t\tlet sin = MathUtils.sinDeg(rotation);\r\n\t\t\t\tlet za = (pa * cos + pb * sin) / this.skeleton.scaleX;\r\n\t\t\t\tlet zc = (pc * cos + pd * sin) / this.skeleton.scaleY;\r\n\t\t\t\tlet s = Math.sqrt(za * za + zc * zc);\r\n\t\t\t\tif (s > 0.00001) s = 1 / s;\r\n\t\t\t\tza *= s;\r\n\t\t\t\tzc *= s;\r\n\t\t\t\ts = Math.sqrt(za * za + zc * zc);\r\n\t\t\t\tif (this.data.transformMode == TransformMode.NoScale\r\n\t\t\t\t\t&& (pa * pd - pb * pc < 0) != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) s = -s;\r\n\t\t\t\tlet r = Math.PI / 2 + Math.atan2(zc, za);\r\n\t\t\t\tlet zb = Math.cos(r) * s;\r\n\t\t\t\tlet zd = Math.sin(r) * s;\r\n\t\t\t\tlet la = MathUtils.cosDeg(shearX) * scaleX;\r\n\t\t\t\tlet lb = MathUtils.cosDeg(90 + shearY) * scaleY;\r\n\t\t\t\tlet lc = MathUtils.sinDeg(shearX) * scaleX;\r\n\t\t\t\tlet ld = MathUtils.sinDeg(90 + shearY) * scaleY;\r\n\t\t\t\tthis.a = za * la + zb * lc;\r\n\t\t\t\tthis.b = za * lb + zb * ld;\r\n\t\t\t\tthis.c = zc * la + zd * lc;\r\n\t\t\t\tthis.d = zc * lb + zd * ld;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.a *= this.skeleton.scaleX;\r\n\t\tthis.b *= this.skeleton.scaleX;\r\n\t\tthis.c *= this.skeleton.scaleY;\r\n\t\tthis.d *= this.skeleton.scaleY;\r\n\t}\r\n\r\n\t/** Sets this bone's local transform to the setup pose. */\r\n\tsetToSetupPose () {\r\n\t\tlet data = this.data;\r\n\t\tthis.x = data.x;\r\n\t\tthis.y = data.y;\r\n\t\tthis.rotation = data.rotation;\r\n\t\tthis.scaleX = data.scaleX;\r\n\t\tthis.scaleY = data.scaleY;\r\n\t\tthis.shearX = data.shearX;\r\n\t\tthis.shearY = data.shearY;\r\n\t}\r\n\r\n\t/** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */\r\n\tgetWorldRotationX () {\r\n\t\treturn Math.atan2(this.c, this.a) * MathUtils.radDeg;\r\n\t}\r\n\r\n\t/** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */\r\n\tgetWorldRotationY () {\r\n\t\treturn Math.atan2(this.d, this.b) * MathUtils.radDeg;\r\n\t}\r\n\r\n\t/** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */\r\n\tgetWorldScaleX () {\r\n\t\treturn Math.sqrt(this.a * this.a + this.c * this.c);\r\n\t}\r\n\r\n\t/** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */\r\n\tgetWorldScaleY () {\r\n\t\treturn Math.sqrt(this.b * this.b + this.d * this.d);\r\n\t}\r\n\r\n\t/** Computes the applied transform values from the world transform.\r\n\t *\r\n\t * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\r\n\t * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\r\n\t * constraints).\r\n\t *\r\n\t * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\r\n\t * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */\r\n\tupdateAppliedTransform () {\r\n\t\tlet parent = this.parent;\r\n\t\tif (!parent) {\r\n\t\t\tthis.ax = this.worldX - this.skeleton.x;\r\n\t\t\tthis.ay = this.worldY - this.skeleton.y;\r\n\t\t\tthis.arotation = Math.atan2(this.c, this.a) * MathUtils.radDeg;\r\n\t\t\tthis.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);\r\n\t\t\tthis.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);\r\n\t\t\tthis.ashearX = 0;\r\n\t\t\tthis.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * MathUtils.radDeg;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\r\n\t\tlet pid = 1 / (pa * pd - pb * pc);\r\n\t\tlet dx = this.worldX - parent.worldX, dy = this.worldY - parent.worldY;\r\n\t\tthis.ax = (dx * pd * pid - dy * pb * pid);\r\n\t\tthis.ay = (dy * pa * pid - dx * pc * pid);\r\n\t\tlet ia = pid * pd;\r\n\t\tlet id = pid * pa;\r\n\t\tlet ib = pid * pb;\r\n\t\tlet ic = pid * pc;\r\n\t\tlet ra = ia * this.a - ib * this.c;\r\n\t\tlet rb = ia * this.b - ib * this.d;\r\n\t\tlet rc = id * this.c - ic * this.a;\r\n\t\tlet rd = id * this.d - ic * this.b;\r\n\t\tthis.ashearX = 0;\r\n\t\tthis.ascaleX = Math.sqrt(ra * ra + rc * rc);\r\n\t\tif (this.ascaleX > 0.0001) {\r\n\t\t\tlet det = ra * rd - rb * rc;\r\n\t\t\tthis.ascaleY = det / this.ascaleX;\r\n\t\t\tthis.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\r\n\t\t\tthis.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\r\n\t\t} else {\r\n\t\t\tthis.ascaleX = 0;\r\n\t\t\tthis.ascaleY = Math.sqrt(rb * rb + rd * rd);\r\n\t\t\tthis.ashearY = 0;\r\n\t\t\tthis.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Transforms a point from world coordinates to the bone's local coordinates. */\r\n\tworldToLocal (world: Vector2) {\r\n\t\tlet invDet = 1 / (this.a * this.d - this.b * this.c);\r\n\t\tlet x = world.x - this.worldX, y = world.y - this.worldY;\r\n\t\tworld.x = x * this.d * invDet - y * this.b * invDet;\r\n\t\tworld.y = y * this.a * invDet - x * this.c * invDet;\r\n\t\treturn world;\r\n\t}\r\n\r\n\t/** Transforms a point from the bone's local coordinates to world coordinates. */\r\n\tlocalToWorld (local: Vector2) {\r\n\t\tlet x = local.x, y = local.y;\r\n\t\tlocal.x = x * this.a + y * this.b + this.worldX;\r\n\t\tlocal.y = x * this.c + y * this.d + this.worldY;\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/** Transforms a world rotation to a local rotation. */\r\n\tworldToLocalRotation (worldRotation: number) {\r\n\t\tlet sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);\r\n\t\treturn Math.atan2(this.a * sin - this.c * cos, this.d * cos - this.b * sin) * MathUtils.radDeg + this.rotation - this.shearX;\r\n\t}\r\n\r\n\t/** Transforms a local rotation to a world rotation. */\r\n\tlocalToWorldRotation (localRotation: number) {\r\n\t\tlocalRotation -= this.rotation - this.shearX;\r\n\t\tlet sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);\r\n\t\treturn Math.atan2(cos * this.c + sin * this.d, cos * this.a + sin * this.b) * MathUtils.radDeg;\r\n\t}\r\n\r\n\t/** Rotates the world transform the specified amount.\r\n\t * <p>\r\n\t * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\r\n\t * need to be called on any child bones, recursively. */\r\n\trotateWorld (degrees: number) {\r\n\t\tlet a = this.a, b = this.b, c = this.c, d = this.d;\r\n\t\tlet cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);\r\n\t\tthis.a = cos * a - sin * c;\r\n\t\tthis.b = cos * b - sin * d;\r\n\t\tthis.c = sin * a + cos * c;\r\n\t\tthis.d = sin * b + cos * d;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\n/** The base class for all constraint datas. */\r\nexport abstract class ConstraintData {\r\n\tconstructor (public name: string, public order: number, public skinRequired: boolean) { }\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Texture } from \"./Texture.js\";\r\nimport { TextureAtlas } from \"./TextureAtlas.js\";\r\nimport { Disposable, StringMap } from \"./Utils.js\";\r\n\r\nexport class AssetManagerBase implements Disposable {\r\n\tprivate pathPrefix: string = \"\";\r\n\tprivate textureLoader: (image: HTMLImageElement | ImageBitmap) => Texture;\r\n\tprivate downloader: Downloader;\r\n\tprivate assets: StringMap<any> = {};\r\n\tprivate errors: StringMap<string> = {};\r\n\tprivate toLoad = 0;\r\n\tprivate loaded = 0;\r\n\r\n\tconstructor (textureLoader: (image: HTMLImageElement | ImageBitmap) => Texture, pathPrefix: string = \"\", downloader: Downloader = new Downloader()) {\r\n\t\tthis.textureLoader = textureLoader;\r\n\t\tthis.pathPrefix = pathPrefix;\r\n\t\tthis.downloader = downloader;\r\n\t}\r\n\r\n\tprivate start (path: string): string {\r\n\t\tthis.toLoad++;\r\n\t\treturn this.pathPrefix + path;\r\n\t}\r\n\r\n\tprivate success (callback: (path: string, data: any) => void, path: string, asset: any) {\r\n\t\tthis.toLoad--;\r\n\t\tthis.loaded++;\r\n\t\tthis.assets[path] = asset;\r\n\t\tif (callback) callback(path, asset);\r\n\t}\r\n\r\n\tprivate error (callback: (path: string, message: string) => void, path: string, message: string) {\r\n\t\tthis.toLoad--;\r\n\t\tthis.loaded++;\r\n\t\tthis.errors[path] = message;\r\n\t\tif (callback) callback(path, message);\r\n\t}\r\n\r\n\tloadAll () {\r\n\t\tlet promise = new Promise((resolve: (assetManager: AssetManagerBase) => void, reject: (errors: StringMap<string>) => void) => {\r\n\t\t\tlet check = () => {\r\n\t\t\t\tif (this.isLoadingComplete()) {\r\n\t\t\t\t\tif (this.hasErrors()) reject(this.errors);\r\n\t\t\t\t\telse resolve(this);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\trequestAnimationFrame(check);\r\n\t\t\t}\r\n\t\t\trequestAnimationFrame(check);\r\n\t\t});\r\n\t\treturn promise;\r\n\t}\r\n\r\n\tsetRawDataURI (path: string, data: string) {\r\n\t\tthis.downloader.rawDataUris[this.pathPrefix + path] = data;\r\n\t}\r\n\r\n\tloadBinary (path: string,\r\n\t\tsuccess: (path: string, binary: Uint8Array) => void = () => { },\r\n\t\terror: (path: string, message: string) => void = () => { }) {\r\n\t\tpath = this.start(path);\r\n\r\n\t\tthis.downloader.downloadBinary(path, (data: Uint8Array): void => {\r\n\t\t\tthis.success(success, path, data);\r\n\t\t}, (status: number, responseText: string): void => {\r\n\t\t\tthis.error(error, path, `Couldn't load binary ${path}: status ${status}, ${responseText}`);\r\n\t\t});\r\n\t}\r\n\r\n\tloadText (path: string,\r\n\t\tsuccess: (path: string, text: string) => void = () => { },\r\n\t\terror: (path: string, message: string) => void = () => { }) {\r\n\t\tpath = this.start(path);\r\n\r\n\t\tthis.downloader.downloadText(path, (data: string): void => {\r\n\t\t\tthis.success(success, path, data);\r\n\t\t}, (status: number, responseText: string): void => {\r\n\t\t\tthis.error(error, path, `Couldn't load text ${path}: status ${status}, ${responseText}`);\r\n\t\t});\r\n\t}\r\n\r\n\tloadJson (path: string,\r\n\t\tsuccess: (path: string, object: object) => void = () => { },\r\n\t\terror: (path: string, message: string) => void = () => { }) {\r\n\t\tpath = this.start(path);\r\n\r\n\t\tthis.downloader.downloadJson(path, (data: object): void => {\r\n\t\t\tthis.success(success, path, data);\r\n\t\t}, (status: number, responseText: string): void => {\r\n\t\t\tthis.error(error, path, `Couldn't load JSON ${path}: status ${status}, ${responseText}`);\r\n\t\t});\r\n\t}\r\n\r\n\tloadTexture (path: string,\r\n\t\tsuccess: (path: string, texture: Texture) => void = () => { },\r\n\t\terror: (path: string, message: string) => void = () => { }) {\r\n\t\tpath = this.start(path);\r\n\r\n\t\tlet isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document);\r\n\t\tlet isWebWorker = !isBrowser; // && typeof importScripts !== 'undefined';\r\n\t\tif (isWebWorker) {\r\n\t\t\tfetch(path, { mode: <RequestMode>\"cors\" }).then((response) => {\r\n\t\t\t\tif (response.ok) return response.blob();\r\n\t\t\t\tthis.error(error, path, `Couldn't load image: ${path}`);\r\n\t\t\t\treturn null;\r\n\t\t\t}).then((blob) => {\r\n\t\t\t\treturn blob ? createImageBitmap(blob, { premultiplyAlpha: \"none\", colorSpaceConversion: \"none\" }) : null;\r\n\t\t\t}).then((bitmap) => {\r\n\t\t\t\tif (bitmap) this.success(success, path, this.textureLoader(bitmap));\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tlet image = new Image();\r\n\t\t\timage.crossOrigin = \"anonymous\";\r\n\t\t\timage.onload = () => {\r\n\t\t\t\tthis.success(success, path, this.textureLoader(image));\r\n\t\t\t};\r\n\t\t\timage.onerror = () => {\r\n\t\t\t\tthis.error(error, path, `Couldn't load image: ${path}`);\r\n\t\t\t};\r\n\t\t\tif (this.downloader.rawDataUris[path]) path = this.downloader.rawDataUris[path];\r\n\t\t\timage.src = path;\r\n\t\t}\r\n\t}\r\n\r\n\tloadTextureAtlas (path: string,\r\n\t\tsuccess: (path: string, atlas: TextureAtlas) => void = () => { },\r\n\t\terror: (path: string, message: string) => void = () => { },\r\n\t\tfileAlias?: { [keyword: string]: string }\r\n\t) {\r\n\t\tlet index = path.lastIndexOf(\"/\");\r\n\t\tlet parent = index >= 0 ? path.substring(0, index + 1) : \"\";\r\n\t\tpath = this.start(path);\r\n\r\n\t\tthis.downloader.downloadText(path, (atlasText: string): void => {\r\n\t\t\ttry {\r\n\t\t\t\tlet atlas = new TextureAtlas(atlasText);\r\n\t\t\t\tlet toLoad = atlas.pages.length, abort = false;\r\n\t\t\t\tfor (let page of atlas.pages) {\r\n\t\t\t\t\tthis.loadTexture(!fileAlias ? parent + page.name : fileAlias[page.name!],\r\n\t\t\t\t\t\t(imagePath: string, texture: Texture) => {\r\n\t\t\t\t\t\t\tif (!abort) {\r\n\t\t\t\t\t\t\t\tpage.setTexture(texture);\r\n\t\t\t\t\t\t\t\tif (--toLoad == 0) this.success(success, path, atlas);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t(imagePath: string, message: string) => {\r\n\t\t\t\t\t\t\tif (!abort) this.error(error, path, `Couldn't load texture atlas ${path} page image: ${imagePath}`);\r\n\t\t\t\t\t\t\tabort = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthis.error(error, path, `Couldn't parse texture atlas ${path}: ${(e as any).message}`);\r\n\t\t\t}\r\n\t\t}, (status: number, responseText: string): void => {\r\n\t\t\tthis.error(error, path, `Couldn't load texture atlas ${path}: status ${status}, ${responseText}`);\r\n\t\t});\r\n\t}\r\n\r\n\tget (path: string) {\r\n\t\treturn this.assets[this.pathPrefix + path];\r\n\t}\r\n\r\n\trequire (path: string) {\r\n\t\tpath = this.pathPrefix + path;\r\n\t\tlet asset = this.assets[path];\r\n\t\tif (asset) return asset;\r\n\t\tlet error = this.errors[path];\r\n\t\tthrow Error(\"Asset not found: \" + path + (error ? \"\\n\" + error : \"\"));\r\n\t}\r\n\r\n\tremove (path: string) {\r\n\t\tpath = this.pathPrefix + path;\r\n\t\tlet asset = this.assets[path];\r\n\t\tif ((<any>asset).dispose) (<any>asset).dispose();\r\n\t\tdelete this.assets[path];\r\n\t\treturn asset;\r\n\t}\r\n\r\n\tremoveAll () {\r\n\t\tfor (let key in this.assets) {\r\n\t\t\tlet asset = this.assets[key];\r\n\t\t\tif ((<any>asset).dispose) (<any>asset).dispose();\r\n\t\t}\r\n\t\tthis.assets = {};\r\n\t}\r\n\r\n\tisLoadingComplete (): boolean {\r\n\t\treturn this.toLoad == 0;\r\n\t}\r\n\r\n\tgetToLoad (): number {\r\n\t\treturn this.toLoad;\r\n\t}\r\n\r\n\tgetLoaded (): number {\r\n\t\treturn this.loaded;\r\n\t}\r\n\r\n\tdispose () {\r\n\t\tthis.removeAll();\r\n\t}\r\n\r\n\thasErrors () {\r\n\t\treturn Object.keys(this.errors).length > 0;\r\n\t}\r\n\r\n\tgetErrors () {\r\n\t\treturn this.errors;\r\n\t}\r\n}\r\n\r\nexport class Downloader {\r\n\tprivate callbacks: StringMap<Array<Function>> = {};\r\n\trawDataUris: StringMap<string> = {};\r\n\r\n\tdataUriToString (dataUri: string) {\r\n\t\tif (!dataUri.startsWith(\"data:\")) {\r\n\t\t\tthrow new Error(\"Not a data URI.\");\r\n\t\t}\r\n\r\n\t\tlet base64Idx = dataUri.indexOf(\"base64,\");\r\n\t\tif (base64Idx != -1) {\r\n\t\t\tbase64Idx += \"base64,\".length;\r\n\t\t\treturn atob(dataUri.substr(base64Idx));\r\n\t\t} else {\r\n\t\t\treturn dataUri.substr(dataUri.indexOf(\",\") + 1);\r\n\t\t}\r\n\t}\r\n\r\n\tbase64ToUint8Array (base64: string) {\r\n\t\tvar binary_string = window.atob(base64);\r\n\t\tvar len = binary_string.length;\r\n\t\tvar bytes = new Uint8Array(len);\r\n\t\tfor (var i = 0; i < len; i++) {\r\n\t\t\tbytes[i] = binary_string.charCodeAt(i);\r\n\t\t}\r\n\t\treturn bytes;\r\n\t}\r\n\r\n\tdataUriToUint8Array (dataUri: string) {\r\n\t\tif (!dataUri.startsWith(\"data:\")) {\r\n\t\t\tthrow new Error(\"Not a data URI.\");\r\n\t\t}\r\n\r\n\t\tlet base64Idx = dataUri.indexOf(\"base64,\");\r\n\t\tif (base64Idx == -1) throw new Error(\"Not a binary data URI.\");\r\n\t\tbase64Idx += \"base64,\".length;\r\n\t\treturn this.base64ToUint8Array(dataUri.substr(base64Idx));\r\n\t}\r\n\r\n\tdownloadText (url: string, success: (data: string) => void, error: (status: number, responseText: string) => void) {\r\n\t\tif (this.start(url, success, error)) return;\r\n\t\tif (this.rawDataUris[url]) {\r\n\t\t\ttry {\r\n\t\t\t\tlet dataUri = this.rawDataUris[url];\r\n\t\t\t\tthis.finish(url, 200, this.dataUriToString(dataUri));\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthis.finish(url, 400, JSON.stringify(e));\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet request = new XMLHttpRequest();\r\n\t\trequest.overrideMimeType(\"text/html\");\r\n\t\trequest.open(\"GET\", url, true);\r\n\t\tlet done = () => {\r\n\t\t\tthis.finish(url, request.status, request.responseText);\r\n\t\t};\r\n\t\trequest.onload = done;\r\n\t\trequest.onerror = done;\r\n\t\trequest.send();\r\n\t}\r\n\r\n\tdownloadJson (url: string, success: (data: object) => void, error: (status: number, responseText: string) => void) {\r\n\t\tthis.downloadText(url, (data: string): void => {\r\n\t\t\tsuccess(JSON.parse(data));\r\n\t\t}, error);\r\n\t}\r\n\r\n\tdownloadBinary (url: string, success: (data: Uint8Array) => void, error: (status: number, responseText: string) => void) {\r\n\t\tif (this.start(url, success, error)) return;\r\n\t\tif (this.rawDataUris[url]) {\r\n\t\t\ttry {\r\n\t\t\t\tlet dataUri = this.rawDataUris[url];\r\n\t\t\t\tthis.finish(url, 200, this.dataUriToUint8Array(dataUri));\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthis.finish(url, 400, JSON.stringify(e));\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet request = new XMLHttpRequest();\r\n\t\trequest.open(\"GET\", url, true);\r\n\t\trequest.responseType = \"arraybuffer\";\r\n\t\tlet onerror = () => {\r\n\t\t\tthis.finish(url, request.status, request.response);\r\n\t\t};\r\n\t\trequest.onload = () => {\r\n\t\t\tif (request.status == 200 || request.status == 0)\r\n\t\t\t\tthis.finish(url, 200, new Uint8Array(request.response as ArrayBuffer));\r\n\t\t\telse\r\n\t\t\t\tonerror();\r\n\t\t};\r\n\t\trequest.onerror = onerror;\r\n\t\trequest.send();\r\n\t}\r\n\r\n\tprivate start (url: string, success: any, error: any) {\r\n\t\tlet callbacks = this.callbacks[url];\r\n\t\ttry {\r\n\t\t\tif (callbacks) return true;\r\n\t\t\tthis.callbacks[url] = callbacks = [];\r\n\t\t} finally {\r\n\t\t\tcallbacks.push(success, error);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate finish (url: string, status: number, data: any) {\r\n\t\tlet callbacks = this.callbacks[url];\r\n\t\tdelete this.callbacks[url];\r\n\t\tlet args = status == 200 || status == 0 ? [data] : [status, data];\r\n\t\tfor (let i = args.length - 1, n = callbacks.length; i < n; i += 2)\r\n\t\t\tcallbacks[i].apply(null, args);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { EventData } from \"./EventData.js\";\r\n\r\n/** Stores the current pose values for an {@link Event}.\r\n *\r\n * See Timeline {@link Timeline#apply()},\r\n * AnimationStateListener {@link AnimationStateListener#event()}, and\r\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\r\nexport class Event {\r\n\tdata: EventData;\r\n\tintValue: number = 0;\r\n\tfloatValue: number = 0;\r\n\tstringValue: string | null = null;\r\n\ttime: number = 0;\r\n\tvolume: number = 0;\r\n\tbalance: number = 0;\r\n\r\n\tconstructor (time: number, data: EventData) {\r\n\t\tif (!data) throw new Error(\"data cannot be null.\");\r\n\t\tthis.time = time;\r\n\t\tthis.data = data;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\n/** Stores the setup pose values for an {@link Event}.\r\n *\r\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\r\nexport class EventData {\r\n\tname: string;\r\n\tintValue: number = 0;\r\n\tfloatValue: number = 0;\r\n\tstringValue: string | null = null;\r\n\taudioPath: string | null = null;\r\n\tvolume: number = 0;\r\n\tbalance: number = 0;\r\n\r\n\tconstructor (name: string) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Bone } from \"./Bone.js\";\r\nimport { TransformMode } from \"./BoneData.js\";\r\nimport { IkConstraintData } from \"./IkConstraintData.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { Updatable } from \"./Updatable.js\";\r\nimport { MathUtils } from \"./Utils.js\";\r\n\r\n/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\r\n * the last bone is as close to the target bone as possible.\r\n *\r\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\r\nexport class IkConstraint implements Updatable {\r\n\t/** The IK constraint's setup pose data. */\r\n\tdata: IkConstraintData;\r\n\r\n\t/** The bones that will be modified by this IK constraint. */\r\n\tbones: Array<Bone>;\r\n\r\n\t/** The bone that is the IK target. */\r\n\ttarget: Bone;\r\n\r\n\t/** Controls the bend direction of the IK bones, either 1 or -1. */\r\n\tbendDirection = 0;\r\n\r\n\t/** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\r\n\tcompress = false;\r\n\r\n\t/** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\r\n\t * and the parent bone has local nonuniform scale, stretch is not applied. */\r\n\tstretch = false;\r\n\r\n\t/** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\r\n\tmix = 1;\r\n\r\n\t/** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\r\n\tsoftness = 0;\r\n\tactive = false;\r\n\r\n\tconstructor (data: IkConstraintData, skeleton: Skeleton) {\r\n\t\tif (!data) throw new Error(\"data cannot be null.\");\r\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\t\tthis.data = data;\r\n\t\tthis.mix = data.mix;\r\n\t\tthis.softness = data.softness;\r\n\t\tthis.bendDirection = data.bendDirection;\r\n\t\tthis.compress = data.compress;\r\n\t\tthis.stretch = data.stretch;\r\n\r\n\t\tthis.bones = new Array<Bone>();\r\n\t\tfor (let i = 0; i < data.bones.length; i++) {\r\n\t\t\tlet bone = skeleton.findBone(data.bones[i].name);\r\n\t\t\tif (!bone) throw new Error(`Couldn't find bone ${data.bones[i].name}`);\r\n\t\t\tthis.bones.push(bone);\r\n\t\t}\r\n\t\tlet target = skeleton.findBone(data.target.name);\r\n\t\tif (!target) throw new Error(`Couldn't find bone ${data.target.name}`);\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\tisActive () {\r\n\t\treturn this.active;\r\n\t}\r\n\r\n\tupdate () {\r\n\t\tif (this.mix == 0) return;\r\n\t\tlet target = this.target;\r\n\t\tlet bones = this.bones;\r\n\t\tswitch (bones.length) {\r\n\t\t\tcase 1:\r\n\t\t\t\tthis.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tthis.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.data.uniform, this.softness, this.mix);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Applies 1 bone IK. The target is specified in the world coordinate system. */\r\n\tapply1 (bone: Bone, targetX: number, targetY: number, compress: boolean, stretch: boolean, uniform: boolean, alpha: number) {\r\n\t\tlet p = bone.parent;\r\n\t\tif (!p) throw new Error(\"IK bone must have parent.\");\r\n\t\tlet pa = p.a, pb = p.b, pc = p.c, pd = p.d;\r\n\t\tlet rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;\r\n\r\n\t\tswitch (bone.data.transformMode) {\r\n\t\t\tcase TransformMode.OnlyTranslation:\r\n\t\t\t\ttx = (targetX - bone.worldX) * MathUtils.signum(bone.skeleton.scaleX);\r\n\t\t\t\tty = (targetY - bone.worldY) * MathUtils.signum(bone.skeleton.scaleY);\r\n\t\t\t\tbreak;\r\n\t\t\tcase TransformMode.NoRotationOrReflection:\r\n\t\t\t\tlet s = Math.abs(pa * pd - pb * pc) / Math.max(0.0001, pa * pa + pc * pc);\r\n\t\t\t\tlet sa = pa / bone.skeleton.scaleX;\r\n\t\t\t\tlet sc = pc / bone.skeleton.scaleY;\r\n\t\t\t\tpb = -sc * s * bone.skeleton.scaleX;\r\n\t\t\t\tpd = sa * s * bone.skeleton.scaleY;\r\n\t\t\t\trotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;\r\n\t\t\t// Fall through\r\n\t\t\tdefault:\r\n\t\t\t\tlet x = targetX - p.worldX, y = targetY - p.worldY;\r\n\t\t\t\tlet d = pa * pd - pb * pc;\r\n\t\t\t\tif (Math.abs(d) <= 0.0001) {\r\n\t\t\t\t\ttx = 0;\r\n\t\t\t\t\tty = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttx = (x * pd - y * pb) / d - bone.ax;\r\n\t\t\t\t\tty = (y * pa - x * pc) / d - bone.ay;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\trotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\r\n\t\tif (bone.ascaleX < 0) rotationIK += 180;\r\n\t\tif (rotationIK > 180)\r\n\t\t\trotationIK -= 360;\r\n\t\telse if (rotationIK < -180)\r\n\t\t\trotationIK += 360;\r\n\t\tlet sx = bone.ascaleX, sy = bone.ascaleY;\r\n\t\tif (compress || stretch) {\r\n\t\t\tswitch (bone.data.transformMode) {\r\n\t\t\t\tcase TransformMode.NoScale:\r\n\t\t\t\tcase TransformMode.NoScaleOrReflection:\r\n\t\t\t\t\ttx = targetX - bone.worldX;\r\n\t\t\t\t\tty = targetY - bone.worldY;\r\n\t\t\t}\r\n\t\t\tlet b = bone.data.length * sx, dd = Math.sqrt(tx * tx + ty * ty);\r\n\t\t\tif ((compress && dd < b) || (stretch && dd > b) && b > 0.0001) {\r\n\t\t\t\tlet s = (dd / b - 1) * alpha + 1;\r\n\t\t\t\tsx *= s;\r\n\t\t\t\tif (uniform) sy *= s;\r\n\t\t\t}\r\n\t\t}\r\n\t\tbone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX,\r\n\t\t\tbone.ashearY);\r\n\t}\r\n\r\n\t/** Applies 2 bone IK. The target is specified in the world coordinate system.\r\n\t * @param child A direct descendant of the parent bone. */\r\n\tapply2 (parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, stretch: boolean, uniform: boolean, softness: number, alpha: number) {\r\n\t\tlet px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, sx = psx, sy = psy, csx = child.ascaleX;\r\n\t\tlet os1 = 0, os2 = 0, s2 = 0;\r\n\t\tif (psx < 0) {\r\n\t\t\tpsx = -psx;\r\n\t\t\tos1 = 180;\r\n\t\t\ts2 = -1;\r\n\t\t} else {\r\n\t\t\tos1 = 0;\r\n\t\t\ts2 = 1;\r\n\t\t}\r\n\t\tif (psy < 0) {\r\n\t\t\tpsy = -psy;\r\n\t\t\ts2 = -s2;\r\n\t\t}\r\n\t\tif (csx < 0) {\r\n\t\t\tcsx = -csx;\r\n\t\t\tos2 = 180;\r\n\t\t} else\r\n\t\t\tos2 = 0;\r\n\t\tlet cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = parent.a, b = parent.b, c = parent.c, d = parent.d;\r\n\t\tlet u = Math.abs(psx - psy) <= 0.0001;\r\n\t\tif (!u || stretch) {\r\n\t\t\tcy = 0;\r\n\t\t\tcwx = a * cx + parent.worldX;\r\n\t\t\tcwy = c * cx + parent.worldY;\r\n\t\t} else {\r\n\t\t\tcy = child.ay;\r\n\t\t\tcwx = a * cx + b * cy + parent.worldX;\r\n\t\t\tcwy = c * cx + d * cy + parent.worldY;\r\n\t\t}\r\n\t\tlet pp = parent.parent;\r\n\t\tif (!pp) throw new Error(\"IK parent must itself have a parent.\");\r\n\t\ta = pp.a;\r\n\t\tb = pp.b;\r\n\t\tc = pp.c;\r\n\t\td = pp.d;\r\n\t\tlet id = a * d - b * c, x = cwx - pp.worldX, y = cwy - pp.worldY;\r\n\t\tid = Math.abs(id) <= 0.0001 ? 0 : 1 / id;\r\n\t\tlet dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\r\n\t\tlet l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\r\n\t\tif (l1 < 0.0001) {\r\n\t\t\tthis.apply1(parent, targetX, targetY, false, stretch, false, alpha);\r\n\t\t\tchild.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tx = targetX - pp.worldX;\r\n\t\ty = targetY - pp.worldY;\r\n\t\tlet tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\r\n\t\tlet dd = tx * tx + ty * ty;\r\n\t\tif (softness != 0) {\r\n\t\t\tsoftness *= psx * (csx + 1) * 0.5;\r\n\t\t\tlet td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;\r\n\t\t\tif (sd > 0) {\r\n\t\t\t\tlet p = Math.min(1, sd / (softness * 2)) - 1;\r\n\t\t\t\tp = (sd - softness * (1 - p * p)) / td;\r\n\t\t\t\ttx -= p * tx;\r\n\t\t\t\tty -= p * ty;\r\n\t\t\t\tdd = tx * tx + ty * ty;\r\n\t\t\t}\r\n\t\t}\r\n\t\touter:\r\n\t\tif (u) {\r\n\t\t\tl2 *= psx;\r\n\t\t\tlet cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\r\n\t\t\tif (cos < -1) {\r\n\t\t\t\tcos = -1;\r\n\t\t\t\ta2 = Math.PI * bendDir;\r\n\t\t\t} else if (cos > 1) {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\ta2 = 0;\r\n\t\t\t\tif (stretch) {\r\n\t\t\t\t\ta = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\r\n\t\t\t\t\tsx *= a;\r\n\t\t\t\t\tif (uniform) sy *= a;\r\n\t\t\t\t}\r\n\t\t\t} else\r\n\t\t\t\ta2 = Math.acos(cos) * bendDir;\r\n\t\t\ta = l1 + l2 * cos;\r\n\t\t\tb = l2 * Math.sin(a2);\r\n\t\t\ta1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\r\n\t\t} else {\r\n\t\t\ta = psx * l2;\r\n\t\t\tb = psy * l2;\r\n\t\t\tlet aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);\r\n\t\t\tc = bb * l1 * l1 + aa * dd - aa * bb;\r\n\t\t\tlet c1 = -2 * bb * l1, c2 = bb - aa;\r\n\t\t\td = c1 * c1 - 4 * c2 * c;\r\n\t\t\tif (d >= 0) {\r\n\t\t\t\tlet q = Math.sqrt(d);\r\n\t\t\t\tif (c1 < 0) q = -q;\r\n\t\t\t\tq = -(c1 + q) * 0.5;\r\n\t\t\t\tlet r0 = q / c2, r1 = c / q;\r\n\t\t\t\tlet r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\r\n\t\t\t\tif (r * r <= dd) {\r\n\t\t\t\t\ty = Math.sqrt(dd - r * r) * bendDir;\r\n\t\t\t\t\ta1 = ta - Math.atan2(y, r);\r\n\t\t\t\t\ta2 = Math.atan2(y / psy, (r - l1) / psx);\r\n\t\t\t\t\tbreak outer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;\r\n\t\t\tlet maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;\r\n\t\t\tc = -a * l1 / (aa - bb);\r\n\t\t\tif (c >= -1 && c <= 1) {\r\n\t\t\t\tc = Math.acos(c);\r\n\t\t\t\tx = a * Math.cos(c) + l1;\r\n\t\t\t\ty = b * Math.sin(c);\r\n\t\t\t\td = x * x + y * y;\r\n\t\t\t\tif (d < minDist) {\r\n\t\t\t\t\tminAngle = c;\r\n\t\t\t\t\tminDist = d;\r\n\t\t\t\t\tminX = x;\r\n\t\t\t\t\tminY = y;\r\n\t\t\t\t}\r\n\t\t\t\tif (d > maxDist) {\r\n\t\t\t\t\tmaxAngle = c;\r\n\t\t\t\t\tmaxDist = d;\r\n\t\t\t\t\tmaxX = x;\r\n\t\t\t\t\tmaxY = y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (dd <= (minDist + maxDist) * 0.5) {\r\n\t\t\t\ta1 = ta - Math.atan2(minY * bendDir, minX);\r\n\t\t\t\ta2 = minAngle * bendDir;\r\n\t\t\t} else {\r\n\t\t\t\ta1 = ta - Math.atan2(maxY * bendDir, maxX);\r\n\t\t\t\ta2 = maxAngle * bendDir;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet os = Math.atan2(cy, cx) * s2;\r\n\t\tlet rotation = parent.arotation;\r\n\t\ta1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\r\n\t\tif (a1 > 180)\r\n\t\t\ta1 -= 360;\r\n\t\telse if (a1 < -180) //\r\n\t\t\ta1 += 360;\r\n\t\tparent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, sy, 0, 0);\r\n\t\trotation = child.arotation;\r\n\t\ta2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\r\n\t\tif (a2 > 180)\r\n\t\t\ta2 -= 360;\r\n\t\telse if (a2 < -180) //\r\n\t\t\ta2 += 360;\r\n\t\tchild.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { BoneData } from \"./BoneData.js\";\r\nimport { ConstraintData } from \"./ConstraintData.js\";\r\n\r\n\r\n/** Stores the setup pose for an {@link IkConstraint}.\r\n * <p>\r\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\r\nexport class IkConstraintData extends ConstraintData {\r\n\t/** The bones that are constrained by this IK constraint. */\r\n\tbones = new Array<BoneData>();\r\n\r\n\t/** The bone that is the IK target. */\r\n\tprivate _target: BoneData | null = null;\r\n\tpublic set target (boneData: BoneData) { this._target = boneData; }\r\n\tpublic get target () {\r\n\t\tif (!this._target) throw new Error(\"BoneData not set.\")\r\n\t\telse return this._target;\r\n\t}\r\n\r\n\t/** Controls the bend direction of the IK bones, either 1 or -1. */\r\n\tbendDirection = 1;\r\n\r\n\t/** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\r\n\tcompress = false;\r\n\r\n\t/** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\r\n\t * and the parent bone has local nonuniform scale, stretch is not applied. */\r\n\tstretch = false;\r\n\r\n\t/** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\r\n\t * is scaled on both the X and Y axes. */\r\n\tuniform = false;\r\n\r\n\t/** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\r\n\tmix = 1;\r\n\r\n\t/** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\r\n\tsoftness = 0;\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name, 0, false);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { BoneData } from \"./BoneData.js\";\r\nimport { ConstraintData } from \"./ConstraintData.js\";\r\nimport { SlotData } from \"./SlotData.js\";\r\n\r\n\r\n/** Stores the setup pose for a {@link PathConstraint}.\r\n *\r\n * See [path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\r\nexport class PathConstraintData extends ConstraintData {\r\n\r\n\t/** The bones that will be modified by this path constraint. */\r\n\tbones = new Array<BoneData>();\r\n\r\n\t/** The slot whose path attachment will be used to constrained the bones. */\r\n\tprivate _target: SlotData | null = null;\r\n\tpublic set target (slotData: SlotData) { this._target = slotData; }\r\n\tpublic get target () {\r\n\t\tif (!this._target) throw new Error(\"SlotData not set.\")\r\n\t\telse return this._target;\r\n\t}\r\n\r\n\t/** The mode for positioning the first bone on the path. */\r\n\tpositionMode: PositionMode = PositionMode.Fixed;\r\n\r\n\t/** The mode for positioning the bones after the first bone on the path. */\r\n\tspacingMode: SpacingMode = SpacingMode.Fixed;\r\n\r\n\t/** The mode for adjusting the rotation of the bones. */\r\n\trotateMode: RotateMode = RotateMode.Chain;\r\n\r\n\t/** An offset added to the constrained bone rotation. */\r\n\toffsetRotation: number = 0;\r\n\r\n\t/** The position along the path. */\r\n\tposition: number = 0;\r\n\r\n\t/** The spacing between bones. */\r\n\tspacing: number = 0;\r\n\r\n\tmixRotate = 0;\r\n\tmixX = 0;\r\n\tmixY = 0;\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name, 0, false);\r\n\t}\r\n}\r\n\r\n/** Controls how the first bone is positioned along the path.\r\n *\r\n * See [position](http://esotericsoftware.com/spine-path-constraints#Position) in the Spine User Guide. */\r\nexport enum PositionMode { Fixed, Percent }\r\n\r\n/** Controls how bones after the first bone are positioned along the path.\r\n *\r\n * See [spacing](http://esotericsoftware.com/spine-path-constraints#Spacing) in the Spine User Guide. */\r\nexport enum SpacingMode { Length, Fixed, Percent, Proportional }\r\n\r\n/** Controls how bones are rotated, translated, and scaled to match the path.\r\n *\r\n * See [rotate mix](http://esotericsoftware.com/spine-path-constraints#Rotate-mix) in the Spine User Guide. */\r\nexport enum RotateMode { Tangent, Chain, ChainScale }\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { PathAttachment } from \"./attachments/PathAttachment.js\";\r\nimport { Bone } from \"./Bone.js\";\r\nimport { PathConstraintData, RotateMode, SpacingMode, PositionMode } from \"./PathConstraintData.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { Slot } from \"./Slot.js\";\r\nimport { Updatable } from \"./Updatable.js\";\r\nimport { Utils, MathUtils } from \"./Utils.js\";\r\n\r\n\r\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\r\n * constrained bones so they follow a {@link PathAttachment}.\r\n *\r\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\r\nexport class PathConstraint implements Updatable {\r\n\tstatic NONE = -1; static BEFORE = -2; static AFTER = -3;\r\n\tstatic epsilon = 0.00001;\r\n\r\n\t/** The path constraint's setup pose data. */\r\n\tdata: PathConstraintData;\r\n\r\n\t/** The bones that will be modified by this path constraint. */\r\n\tbones: Array<Bone>;\r\n\r\n\t/** The slot whose path attachment will be used to constrained the bones. */\r\n\ttarget: Slot;\r\n\r\n\t/** The position along the path. */\r\n\tposition = 0;\r\n\r\n\t/** The spacing between bones. */\r\n\tspacing = 0;\r\n\r\n\tmixRotate = 0;\r\n\r\n\tmixX = 0;\r\n\r\n\tmixY = 0;\r\n\r\n\tspaces = new Array<number>(); positions = new Array<number>();\r\n\tworld = new Array<number>(); curves = new Array<number>(); lengths = new Array<number>();\r\n\tsegments = new Array<number>();\r\n\r\n\tactive = false;\r\n\r\n\tconstructor (data: PathConstraintData, skeleton: Skeleton) {\r\n\t\tif (!data) throw new Error(\"data cannot be null.\");\r\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\t\tthis.data = data;\r\n\t\tthis.bones = new Array<Bone>();\r\n\t\tfor (let i = 0, n = data.bones.length; i < n; i++) {\r\n\t\t\tlet bone = skeleton.findBone(data.bones[i].name);\r\n\t\t\tif (!bone) throw new Error(`Couldn't find bone ${data.bones[i].name}.`);\r\n\t\t\tthis.bones.push(bone);\r\n\t\t}\r\n\t\tlet target = skeleton.findSlot(data.target.name);\r\n\t\tif (!target) throw new Error(`Couldn't find target bone ${data.target.name}`);\r\n\t\tthis.target = target;\r\n\t\tthis.position = data.position;\r\n\t\tthis.spacing = data.spacing;\r\n\t\tthis.mixRotate = data.mixRotate;\r\n\t\tthis.mixX = data.mixX;\r\n\t\tthis.mixY = data.mixY;\r\n\t}\r\n\r\n\tisActive () {\r\n\t\treturn this.active;\r\n\t}\r\n\r\n\tupdate () {\r\n\t\tlet attachment = this.target.getAttachment();\r\n\t\tif (!(attachment instanceof PathAttachment)) return;\r\n\r\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY;\r\n\t\tif (mixRotate == 0 && mixX == 0 && mixY == 0) return;\r\n\r\n\t\tlet data = this.data;\r\n\t\tlet tangents = data.rotateMode == RotateMode.Tangent, scale = data.rotateMode == RotateMode.ChainScale;\r\n\r\n\t\tlet bones = this.bones;\r\n\t\tlet boneCount = bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\r\n\t\tlet spaces = Utils.setArraySize(this.spaces, spacesCount), lengths: Array<number> = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : [];\r\n\t\tlet spacing = this.spacing;\r\n\r\n\t\tswitch (data.spacingMode) {\r\n\t\t\tcase SpacingMode.Percent:\r\n\t\t\t\tif (scale) {\r\n\t\t\t\t\tfor (let i = 0, n = spacesCount - 1; i < n; i++) {\r\n\t\t\t\t\t\tlet bone = bones[i];\r\n\t\t\t\t\t\tlet setupLength = bone.data.length;\r\n\t\t\t\t\t\tif (setupLength < PathConstraint.epsilon)\r\n\t\t\t\t\t\t\tlengths[i] = 0;\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlet x = setupLength * bone.a, y = setupLength * bone.c;\r\n\t\t\t\t\t\t\tlengths[i] = Math.sqrt(x * x + y * y);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tUtils.arrayFill(spaces, 1, spacesCount, spacing);\r\n\t\t\t\tbreak;\r\n\t\t\tcase SpacingMode.Proportional:\r\n\t\t\t\tlet sum = 0;\r\n\t\t\t\tfor (let i = 0, n = spacesCount - 1; i < n;) {\r\n\t\t\t\t\tlet bone = bones[i];\r\n\t\t\t\t\tlet setupLength = bone.data.length;\r\n\t\t\t\t\tif (setupLength < PathConstraint.epsilon) {\r\n\t\t\t\t\t\tif (scale) lengths[i] = 0;\r\n\t\t\t\t\t\tspaces[++i] = spacing;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet x = setupLength * bone.a, y = setupLength * bone.c;\r\n\t\t\t\t\t\tlet length = Math.sqrt(x * x + y * y);\r\n\t\t\t\t\t\tif (scale) lengths[i] = length;\r\n\t\t\t\t\t\tspaces[++i] = length;\r\n\t\t\t\t\t\tsum += length;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (sum > 0) {\r\n\t\t\t\t\tsum = spacesCount / sum * spacing;\r\n\t\t\t\t\tfor (let i = 1; i < spacesCount; i++)\r\n\t\t\t\t\t\tspaces[i] *= sum;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tlet lengthSpacing = data.spacingMode == SpacingMode.Length;\r\n\t\t\t\tfor (let i = 0, n = spacesCount - 1; i < n;) {\r\n\t\t\t\t\tlet bone = bones[i];\r\n\t\t\t\t\tlet setupLength = bone.data.length;\r\n\t\t\t\t\tif (setupLength < PathConstraint.epsilon) {\r\n\t\t\t\t\t\tif (scale) lengths[i] = 0;\r\n\t\t\t\t\t\tspaces[++i] = spacing;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet x = setupLength * bone.a, y = setupLength * bone.c;\r\n\t\t\t\t\t\tlet length = Math.sqrt(x * x + y * y);\r\n\t\t\t\t\t\tif (scale) lengths[i] = length;\r\n\t\t\t\t\t\tspaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet positions = this.computeWorldPositions(<PathAttachment>attachment, spacesCount, tangents);\r\n\t\tlet boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\r\n\t\tlet tip = false;\r\n\t\tif (offsetRotation == 0)\r\n\t\t\ttip = data.rotateMode == RotateMode.Chain;\r\n\t\telse {\r\n\t\t\ttip = false;\r\n\t\t\tlet p = this.target.bone;\r\n\t\t\toffsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n\t\t}\r\n\t\tfor (let i = 0, p = 3; i < boneCount; i++, p += 3) {\r\n\t\t\tlet bone = bones[i];\r\n\t\t\tbone.worldX += (boneX - bone.worldX) * mixX;\r\n\t\t\tbone.worldY += (boneY - bone.worldY) * mixY;\r\n\t\t\tlet x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\r\n\t\t\tif (scale) {\r\n\t\t\t\tlet length = lengths[i];\r\n\t\t\t\tif (length != 0) {\r\n\t\t\t\t\tlet s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\r\n\t\t\t\t\tbone.a *= s;\r\n\t\t\t\t\tbone.c *= s;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tboneX = x;\r\n\t\t\tboneY = y;\r\n\t\t\tif (mixRotate > 0) {\r\n\t\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d, r = 0, cos = 0, sin = 0;\r\n\t\t\t\tif (tangents)\r\n\t\t\t\t\tr = positions[p - 1];\r\n\t\t\t\telse if (spaces[i + 1] == 0)\r\n\t\t\t\t\tr = positions[p + 2];\r\n\t\t\t\telse\r\n\t\t\t\t\tr = Math.atan2(dy, dx);\r\n\t\t\t\tr -= Math.atan2(c, a);\r\n\t\t\t\tif (tip) {\r\n\t\t\t\t\tcos = Math.cos(r);\r\n\t\t\t\t\tsin = Math.sin(r);\r\n\t\t\t\t\tlet length = bone.data.length;\r\n\t\t\t\t\tboneX += (length * (cos * a - sin * c) - dx) * mixRotate;\r\n\t\t\t\t\tboneY += (length * (sin * a + cos * c) - dy) * mixRotate;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tr += offsetRotation;\r\n\t\t\t\t}\r\n\t\t\t\tif (r > MathUtils.PI)\r\n\t\t\t\t\tr -= MathUtils.PI2;\r\n\t\t\t\telse if (r < -MathUtils.PI) //\r\n\t\t\t\t\tr += MathUtils.PI2;\r\n\t\t\t\tr *= mixRotate;\r\n\t\t\t\tcos = Math.cos(r);\r\n\t\t\t\tsin = Math.sin(r);\r\n\t\t\t\tbone.a = cos * a - sin * c;\r\n\t\t\t\tbone.b = cos * b - sin * d;\r\n\t\t\t\tbone.c = sin * a + cos * c;\r\n\t\t\t\tbone.d = sin * b + cos * d;\r\n\t\t\t}\r\n\t\t\tbone.updateAppliedTransform();\r\n\t\t}\r\n\t}\r\n\r\n\tcomputeWorldPositions (path: PathAttachment, spacesCount: number, tangents: boolean) {\r\n\t\tlet target = this.target;\r\n\t\tlet position = this.position;\r\n\t\tlet spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world: Array<number> = this.world;\r\n\t\tlet closed = path.closed;\r\n\t\tlet verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\r\n\r\n\t\tif (!path.constantSpeed) {\r\n\t\t\tlet lengths = path.lengths;\r\n\t\t\tcurveCount -= closed ? 1 : 2;\r\n\t\t\tlet pathLength = lengths[curveCount];\r\n\t\t\tif (this.data.positionMode == PositionMode.Percent) position *= pathLength;\r\n\r\n\t\t\tlet multiplier;\r\n\t\t\tswitch (this.data.spacingMode) {\r\n\t\t\t\tcase SpacingMode.Percent:\r\n\t\t\t\t\tmultiplier = pathLength;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SpacingMode.Proportional:\r\n\t\t\t\t\tmultiplier = pathLength / spacesCount;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tmultiplier = 1;\r\n\t\t\t}\r\n\t\t\tworld = Utils.setArraySize(this.world, 8);\r\n\t\t\tfor (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\r\n\t\t\t\tlet space = spaces[i] * multiplier;\r\n\t\t\t\tposition += space;\r\n\t\t\t\tlet p = position;\r\n\r\n\t\t\t\tif (closed) {\r\n\t\t\t\t\tp %= pathLength;\r\n\t\t\t\t\tif (p < 0) p += pathLength;\r\n\t\t\t\t\tcurve = 0;\r\n\t\t\t\t} else if (p < 0) {\r\n\t\t\t\t\tif (prevCurve != PathConstraint.BEFORE) {\r\n\t\t\t\t\t\tprevCurve = PathConstraint.BEFORE;\r\n\t\t\t\t\t\tpath.computeWorldVertices(target, 2, 4, world, 0, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addBeforePosition(p, world, 0, out, o);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else if (p > pathLength) {\r\n\t\t\t\t\tif (prevCurve != PathConstraint.AFTER) {\r\n\t\t\t\t\t\tprevCurve = PathConstraint.AFTER;\r\n\t\t\t\t\t\tpath.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addAfterPosition(p - pathLength, world, 0, out, o);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Determine curve containing position.\r\n\t\t\t\tfor (; ; curve++) {\r\n\t\t\t\t\tlet length = lengths[curve];\r\n\t\t\t\t\tif (p > length) continue;\r\n\t\t\t\t\tif (curve == 0)\r\n\t\t\t\t\t\tp /= length;\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet prev = lengths[curve - 1];\r\n\t\t\t\t\t\tp = (p - prev) / (length - prev);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (curve != prevCurve) {\r\n\t\t\t\t\tprevCurve = curve;\r\n\t\t\t\t\tif (closed && curve == curveCount) {\r\n\t\t\t\t\t\tpath.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\r\n\t\t\t\t\t\tpath.computeWorldVertices(target, 0, 4, world, 4, 2);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tpath.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\r\n\t\t\t\t}\r\n\t\t\t\tthis.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o,\r\n\t\t\t\t\ttangents || (i > 0 && space == 0));\r\n\t\t\t}\r\n\t\t\treturn out;\r\n\t\t}\r\n\r\n\t\t// World vertices.\r\n\t\tif (closed) {\r\n\t\t\tverticesLength += 2;\r\n\t\t\tworld = Utils.setArraySize(this.world, verticesLength);\r\n\t\t\tpath.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\r\n\t\t\tpath.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\r\n\t\t\tworld[verticesLength - 2] = world[0];\r\n\t\t\tworld[verticesLength - 1] = world[1];\r\n\t\t} else {\r\n\t\t\tcurveCount--;\r\n\t\t\tverticesLength -= 4;\r\n\t\t\tworld = Utils.setArraySize(this.world, verticesLength);\r\n\t\t\tpath.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\r\n\t\t}\r\n\r\n\t\t// Curve lengths.\r\n\t\tlet curves = Utils.setArraySize(this.curves, curveCount);\r\n\t\tlet pathLength = 0;\r\n\t\tlet x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\r\n\t\tlet tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\r\n\t\tfor (let i = 0, w = 2; i < curveCount; i++, w += 6) {\r\n\t\t\tcx1 = world[w];\r\n\t\t\tcy1 = world[w + 1];\r\n\t\t\tcx2 = world[w + 2];\r\n\t\t\tcy2 = world[w + 3];\r\n\t\t\tx2 = world[w + 4];\r\n\t\t\ty2 = world[w + 5];\r\n\t\t\ttmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\r\n\t\t\ttmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\r\n\t\t\tdddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\r\n\t\t\tdddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\r\n\t\t\tddfx = tmpx * 2 + dddfx;\r\n\t\t\tddfy = tmpy * 2 + dddfy;\r\n\t\t\tdfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\r\n\t\t\tdfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tdfx += ddfx;\r\n\t\t\tdfy += ddfy;\r\n\t\t\tddfx += dddfx;\r\n\t\t\tddfy += dddfy;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tdfx += ddfx;\r\n\t\t\tdfy += ddfy;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tdfx += ddfx + dddfx;\r\n\t\t\tdfy += ddfy + dddfy;\r\n\t\t\tpathLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\tcurves[i] = pathLength;\r\n\t\t\tx1 = x2;\r\n\t\t\ty1 = y2;\r\n\t\t}\r\n\r\n\t\tif (this.data.positionMode == PositionMode.Percent) position *= pathLength;\r\n\r\n\t\tlet multiplier;\r\n\t\tswitch (this.data.spacingMode) {\r\n\t\t\tcase SpacingMode.Percent:\r\n\t\t\t\tmultiplier = pathLength;\r\n\t\t\t\tbreak;\r\n\t\t\tcase SpacingMode.Proportional:\r\n\t\t\t\tmultiplier = pathLength / spacesCount;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tmultiplier = 1;\r\n\t\t}\r\n\r\n\t\tlet segments = this.segments;\r\n\t\tlet curveLength = 0;\r\n\t\tfor (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\r\n\t\t\tlet space = spaces[i] * multiplier;\r\n\t\t\tposition += space;\r\n\t\t\tlet p = position;\r\n\r\n\t\t\tif (closed) {\r\n\t\t\t\tp %= pathLength;\r\n\t\t\t\tif (p < 0) p += pathLength;\r\n\t\t\t\tcurve = 0;\r\n\t\t\t} else if (p < 0) {\r\n\t\t\t\tthis.addBeforePosition(p, world, 0, out, o);\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (p > pathLength) {\r\n\t\t\t\tthis.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine curve containing position.\r\n\t\t\tfor (; ; curve++) {\r\n\t\t\t\tlet length = curves[curve];\r\n\t\t\t\tif (p > length) continue;\r\n\t\t\t\tif (curve == 0)\r\n\t\t\t\t\tp /= length;\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet prev = curves[curve - 1];\r\n\t\t\t\t\tp = (p - prev) / (length - prev);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// Curve segment lengths.\r\n\t\t\tif (curve != prevCurve) {\r\n\t\t\t\tprevCurve = curve;\r\n\t\t\t\tlet ii = curve * 6;\r\n\t\t\t\tx1 = world[ii];\r\n\t\t\t\ty1 = world[ii + 1];\r\n\t\t\t\tcx1 = world[ii + 2];\r\n\t\t\t\tcy1 = world[ii + 3];\r\n\t\t\t\tcx2 = world[ii + 4];\r\n\t\t\t\tcy2 = world[ii + 5];\r\n\t\t\t\tx2 = world[ii + 6];\r\n\t\t\t\ty2 = world[ii + 7];\r\n\t\t\t\ttmpx = (x1 - cx1 * 2 + cx2) * 0.03;\r\n\t\t\t\ttmpy = (y1 - cy1 * 2 + cy2) * 0.03;\r\n\t\t\t\tdddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\r\n\t\t\t\tdddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\r\n\t\t\t\tddfx = tmpx * 2 + dddfx;\r\n\t\t\t\tddfy = tmpy * 2 + dddfy;\r\n\t\t\t\tdfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\r\n\t\t\t\tdfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\r\n\t\t\t\tcurveLength = Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\tsegments[0] = curveLength;\r\n\t\t\t\tfor (ii = 1; ii < 8; ii++) {\r\n\t\t\t\t\tdfx += ddfx;\r\n\t\t\t\t\tdfy += ddfy;\r\n\t\t\t\t\tddfx += dddfx;\r\n\t\t\t\t\tddfy += dddfy;\r\n\t\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\t\tsegments[ii] = curveLength;\r\n\t\t\t\t}\r\n\t\t\t\tdfx += ddfx;\r\n\t\t\t\tdfy += ddfy;\r\n\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\tsegments[8] = curveLength;\r\n\t\t\t\tdfx += ddfx + dddfx;\r\n\t\t\t\tdfy += ddfy + dddfy;\r\n\t\t\t\tcurveLength += Math.sqrt(dfx * dfx + dfy * dfy);\r\n\t\t\t\tsegments[9] = curveLength;\r\n\t\t\t\tsegment = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Weight by segment length.\r\n\t\t\tp *= curveLength;\r\n\t\t\tfor (; ; segment++) {\r\n\t\t\t\tlet length = segments[segment];\r\n\t\t\t\tif (p > length) continue;\r\n\t\t\t\tif (segment == 0)\r\n\t\t\t\t\tp /= length;\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet prev = segments[segment - 1];\r\n\t\t\t\t\tp = segment + (p - prev) / (length - prev);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\r\n\t\t}\r\n\t\treturn out;\r\n\t}\r\n\r\n\taddBeforePosition (p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\r\n\t\tlet x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\r\n\t\tout[o] = x1 + p * Math.cos(r);\r\n\t\tout[o + 1] = y1 + p * Math.sin(r);\r\n\t\tout[o + 2] = r;\r\n\t}\r\n\r\n\taddAfterPosition (p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\r\n\t\tlet x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\r\n\t\tout[o] = x1 + p * Math.cos(r);\r\n\t\tout[o + 1] = y1 + p * Math.sin(r);\r\n\t\tout[o + 2] = r;\r\n\t}\r\n\r\n\taddCurvePosition (p: number, x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number,\r\n\t\tout: Array<number>, o: number, tangents: boolean) {\r\n\t\tif (p == 0 || isNaN(p)) {\r\n\t\t\tout[o] = x1;\r\n\t\t\tout[o + 1] = y1;\r\n\t\t\tout[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\r\n\t\tlet ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\r\n\t\tlet x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\r\n\t\tout[o] = x;\r\n\t\tout[o + 1] = y;\r\n\t\tif (tangents) {\r\n\t\t\tif (p < 0.001)\r\n\t\t\t\tout[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\r\n\t\t\telse\r\n\t\t\t\tout[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\r\n\t\t}\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Attachment, VertexAttachment } from \"./attachments/Attachment.js\";\r\nimport { Bone } from \"./Bone.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { SlotData } from \"./SlotData.js\";\r\nimport { Color } from \"./Utils.js\";\r\n\r\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\r\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\r\n * across multiple skeletons. */\r\nexport class Slot {\r\n\t/** The slot's setup pose data. */\r\n\tdata: SlotData;\r\n\r\n\t/** The bone this slot belongs to. */\r\n\tbone: Bone;\r\n\r\n\t/** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\r\n\t * color tinting. */\r\n\tcolor: Color;\r\n\r\n\t/** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\r\n\t * color's alpha is not used. */\r\n\tdarkColor: Color | null = null;\r\n\r\n\tattachment: Attachment | null = null;\r\n\r\n\tattachmentState: number = 0;\r\n\r\n\t/** The index of the texture region to display when the slot's attachment has a {@link Sequence}. -1 represents the\r\n\t * {@link Sequence#getSetupIndex()}. */\r\n\tsequenceIndex: number = -1;\r\n\r\n\t/** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\r\n\t * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\r\n\t *\r\n\t * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\r\n\tdeform = new Array<number>();\r\n\r\n\tconstructor (data: SlotData, bone: Bone) {\r\n\t\tif (!data) throw new Error(\"data cannot be null.\");\r\n\t\tif (!bone) throw new Error(\"bone cannot be null.\");\r\n\t\tthis.data = data;\r\n\t\tthis.bone = bone;\r\n\t\tthis.color = new Color();\r\n\t\tthis.darkColor = !data.darkColor ? null : new Color();\r\n\t\tthis.setToSetupPose();\r\n\t}\r\n\r\n\t/** The skeleton this slot belongs to. */\r\n\tgetSkeleton (): Skeleton {\r\n\t\treturn this.bone.skeleton;\r\n\t}\r\n\r\n\t/** The current attachment for the slot, or null if the slot has no attachment. */\r\n\tgetAttachment (): Attachment | null {\r\n\t\treturn this.attachment;\r\n\t}\r\n\r\n\t/** Sets the slot's attachment and, if the attachment changed, resets {@link #sequenceIndex} and clears the {@link #deform}.\r\n\t * The deform is not cleared if the old attachment has the same {@link VertexAttachment#getTimelineAttachment()} as the\r\n\t * specified attachment. */\r\n\tsetAttachment (attachment: Attachment | null) {\r\n\t\tif (this.attachment == attachment) return;\r\n\t\tif (!(attachment instanceof VertexAttachment) || !(this.attachment instanceof VertexAttachment)\r\n\t\t\t|| (<VertexAttachment>attachment).timelineAttachment != (<VertexAttachment>this.attachment).timelineAttachment) {\r\n\t\t\tthis.deform.length = 0;\r\n\t\t}\r\n\t\tthis.attachment = attachment;\r\n\t\tthis.sequenceIndex = -1;\r\n\t}\r\n\r\n\t/** Sets this slot to the setup pose. */\r\n\tsetToSetupPose () {\r\n\t\tthis.color.setFromColor(this.data.color);\r\n\t\tif (this.darkColor) this.darkColor.setFromColor(this.data.darkColor!);\r\n\t\tif (!this.data.attachmentName)\r\n\t\t\tthis.attachment = null;\r\n\t\telse {\r\n\t\t\tthis.attachment = null;\r\n\t\t\tthis.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\r\n\t\t}\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Bone } from \"./Bone.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { TransformConstraintData } from \"./TransformConstraintData.js\";\r\nimport { Updatable } from \"./Updatable.js\";\r\nimport { Vector2, MathUtils } from \"./Utils.js\";\r\n\r\n\r\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\r\n * bones to match that of the target bone.\r\n *\r\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\r\nexport class TransformConstraint implements Updatable {\r\n\r\n\t/** The transform constraint's setup pose data. */\r\n\tdata: TransformConstraintData;\r\n\r\n\t/** The bones that will be modified by this transform constraint. */\r\n\tbones: Array<Bone>;\r\n\r\n\t/** The target bone whose world transform will be copied to the constrained bones. */\r\n\ttarget: Bone;\r\n\r\n\tmixRotate = 0; mixX = 0; mixY = 0; mixScaleX = 0; mixScaleY = 0; mixShearY = 0;\r\n\r\n\ttemp = new Vector2();\r\n\tactive = false;\r\n\r\n\tconstructor (data: TransformConstraintData, skeleton: Skeleton) {\r\n\t\tif (!data) throw new Error(\"data cannot be null.\");\r\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\t\tthis.data = data;\r\n\t\tthis.mixRotate = data.mixRotate;\r\n\t\tthis.mixX = data.mixX;\r\n\t\tthis.mixY = data.mixY;\r\n\t\tthis.mixScaleX = data.mixScaleX;\r\n\t\tthis.mixScaleY = data.mixScaleY;\r\n\t\tthis.mixShearY = data.mixShearY;\r\n\t\tthis.bones = new Array<Bone>();\r\n\t\tfor (let i = 0; i < data.bones.length; i++) {\r\n\t\t\tlet bone = skeleton.findBone(data.bones[i].name);\r\n\t\t\tif (!bone) throw new Error(`Couldn't find bone ${data.bones[i].name}.`);\r\n\t\t\tthis.bones.push(bone);\r\n\t\t}\r\n\t\tlet target = skeleton.findBone(data.target.name);\r\n\t\tif (!target) throw new Error(`Couldn't find target bone ${data.target.name}.`);\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\tisActive () {\r\n\t\treturn this.active;\r\n\t}\r\n\r\n\tupdate () {\r\n\t\tif (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleY == 0 && this.mixShearY == 0) return;\r\n\r\n\t\tif (this.data.local) {\r\n\t\t\tif (this.data.relative)\r\n\t\t\t\tthis.applyRelativeLocal();\r\n\t\t\telse\r\n\t\t\t\tthis.applyAbsoluteLocal();\r\n\t\t} else {\r\n\t\t\tif (this.data.relative)\r\n\t\t\t\tthis.applyRelativeWorld();\r\n\t\t\telse\r\n\t\t\t\tthis.applyAbsoluteWorld();\r\n\t\t}\r\n\t}\r\n\r\n\tapplyAbsoluteWorld () {\r\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n\t\tlet translate = mixX != 0 || mixY != 0;\r\n\r\n\t\tlet target = this.target;\r\n\t\tlet ta = target.a, tb = target.b, tc = target.c, td = target.d;\r\n\t\tlet degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n\t\tlet offsetRotation = this.data.offsetRotation * degRadReflect;\r\n\t\tlet offsetShearY = this.data.offsetShearY * degRadReflect;\r\n\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\r\n\t\t\tif (mixRotate != 0) {\r\n\t\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\r\n\t\t\t\tlet r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\r\n\t\t\t\tif (r > MathUtils.PI)\r\n\t\t\t\t\tr -= MathUtils.PI2;\r\n\t\t\t\telse if (r < -MathUtils.PI) //\r\n\t\t\t\t\tr += MathUtils.PI2;\r\n\t\t\t\tr *= mixRotate;\r\n\t\t\t\tlet cos = Math.cos(r), sin = Math.sin(r);\r\n\t\t\t\tbone.a = cos * a - sin * c;\r\n\t\t\t\tbone.b = cos * b - sin * d;\r\n\t\t\t\tbone.c = sin * a + cos * c;\r\n\t\t\t\tbone.d = sin * b + cos * d;\r\n\t\t\t}\r\n\r\n\t\t\tif (translate) {\r\n\t\t\t\tlet temp = this.temp;\r\n\t\t\t\ttarget.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\r\n\t\t\t\tbone.worldX += (temp.x - bone.worldX) * mixX;\r\n\t\t\t\tbone.worldY += (temp.y - bone.worldY) * mixY;\r\n\t\t\t}\r\n\r\n\t\t\tif (mixScaleX != 0) {\r\n\t\t\t\tlet s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);\r\n\t\t\t\tif (s != 0) s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;\r\n\t\t\t\tbone.a *= s;\r\n\t\t\t\tbone.c *= s;\r\n\t\t\t}\r\n\t\t\tif (mixScaleY != 0) {\r\n\t\t\t\tlet s = Math.sqrt(bone.b * bone.b + bone.d * bone.d);\r\n\t\t\t\tif (s != 0) s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;\r\n\t\t\t\tbone.b *= s;\r\n\t\t\t\tbone.d *= s;\r\n\t\t\t}\r\n\r\n\t\t\tif (mixShearY > 0) {\r\n\t\t\t\tlet b = bone.b, d = bone.d;\r\n\t\t\t\tlet by = Math.atan2(d, b);\r\n\t\t\t\tlet r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(bone.c, bone.a));\r\n\t\t\t\tif (r > MathUtils.PI)\r\n\t\t\t\t\tr -= MathUtils.PI2;\r\n\t\t\t\telse if (r < -MathUtils.PI) //\r\n\t\t\t\t\tr += MathUtils.PI2;\r\n\t\t\t\tr = by + (r + offsetShearY) * mixShearY;\r\n\t\t\t\tlet s = Math.sqrt(b * b + d * d);\r\n\t\t\t\tbone.b = Math.cos(r) * s;\r\n\t\t\t\tbone.d = Math.sin(r) * s;\r\n\t\t\t}\r\n\r\n\t\t\tbone.updateAppliedTransform();\r\n\t\t}\r\n\t}\r\n\r\n\tapplyRelativeWorld () {\r\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n\t\tlet translate = mixX != 0 || mixY != 0;\r\n\r\n\t\tlet target = this.target;\r\n\t\tlet ta = target.a, tb = target.b, tc = target.c, td = target.d;\r\n\t\tlet degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\r\n\t\tlet offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;\r\n\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\r\n\t\t\tif (mixRotate != 0) {\r\n\t\t\t\tlet a = bone.a, b = bone.b, c = bone.c, d = bone.d;\r\n\t\t\t\tlet r = Math.atan2(tc, ta) + offsetRotation;\r\n\t\t\t\tif (r > MathUtils.PI)\r\n\t\t\t\t\tr -= MathUtils.PI2;\r\n\t\t\t\telse if (r < -MathUtils.PI) //\r\n\t\t\t\t\tr += MathUtils.PI2;\r\n\t\t\t\tr *= mixRotate;\r\n\t\t\t\tlet cos = Math.cos(r), sin = Math.sin(r);\r\n\t\t\t\tbone.a = cos * a - sin * c;\r\n\t\t\t\tbone.b = cos * b - sin * d;\r\n\t\t\t\tbone.c = sin * a + cos * c;\r\n\t\t\t\tbone.d = sin * b + cos * d;\r\n\t\t\t}\r\n\r\n\t\t\tif (translate) {\r\n\t\t\t\tlet temp = this.temp;\r\n\t\t\t\ttarget.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\r\n\t\t\t\tbone.worldX += temp.x * mixX;\r\n\t\t\t\tbone.worldY += temp.y * mixY;\r\n\t\t\t}\r\n\r\n\t\t\tif (mixScaleX != 0) {\r\n\t\t\t\tlet s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;\r\n\t\t\t\tbone.a *= s;\r\n\t\t\t\tbone.c *= s;\r\n\t\t\t}\r\n\t\t\tif (mixScaleY != 0) {\r\n\t\t\t\tlet s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;\r\n\t\t\t\tbone.b *= s;\r\n\t\t\t\tbone.d *= s;\r\n\t\t\t}\r\n\r\n\t\t\tif (mixShearY > 0) {\r\n\t\t\t\tlet r = Math.atan2(td, tb) - Math.atan2(tc, ta);\r\n\t\t\t\tif (r > MathUtils.PI)\r\n\t\t\t\t\tr -= MathUtils.PI2;\r\n\t\t\t\telse if (r < -MathUtils.PI) //\r\n\t\t\t\t\tr += MathUtils.PI2;\r\n\t\t\t\tlet b = bone.b, d = bone.d;\r\n\t\t\t\tr = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;\r\n\t\t\t\tlet s = Math.sqrt(b * b + d * d);\r\n\t\t\t\tbone.b = Math.cos(r) * s;\r\n\t\t\t\tbone.d = Math.sin(r) * s;\r\n\t\t\t}\r\n\r\n\t\t\tbone.updateAppliedTransform();\r\n\t\t}\r\n\t}\r\n\r\n\tapplyAbsoluteLocal () {\r\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n\r\n\t\tlet target = this.target;\r\n\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\r\n\t\t\tlet rotation = bone.arotation;\r\n\t\t\tif (mixRotate != 0) {\r\n\t\t\t\tlet r = target.arotation - rotation + this.data.offsetRotation;\r\n\t\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\r\n\t\t\t\trotation += r * mixRotate;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = bone.ax, y = bone.ay;\r\n\t\t\tx += (target.ax - x + this.data.offsetX) * mixX;\r\n\t\t\ty += (target.ay - y + this.data.offsetY) * mixY;\r\n\r\n\t\t\tlet scaleX = bone.ascaleX, scaleY = bone.ascaleY;\r\n\t\t\tif (mixScaleX != 0 && scaleX != 0)\r\n\t\t\t\tscaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;\r\n\t\t\tif (mixScaleY != 0 && scaleY != 0)\r\n\t\t\t\tscaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;\r\n\r\n\t\t\tlet shearY = bone.ashearY;\r\n\t\t\tif (mixShearY != 0) {\r\n\t\t\t\tlet r = target.ashearY - shearY + this.data.offsetShearY;\r\n\t\t\t\tr -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\r\n\t\t\t\tshearY += r * mixShearY;\r\n\t\t\t}\r\n\r\n\t\t\tbone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\r\n\t\t}\r\n\t}\r\n\r\n\tapplyRelativeLocal () {\r\n\t\tlet mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX,\r\n\t\t\tmixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\r\n\r\n\t\tlet target = this.target;\r\n\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\r\n\t\t\tlet rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;\r\n\t\t\tlet x = bone.ax + (target.ax + this.data.offsetX) * mixX;\r\n\t\t\tlet y = bone.ay + (target.ay + this.data.offsetY) * mixY;\r\n\t\t\tlet scaleX = bone.ascaleX * (((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1);\r\n\t\t\tlet scaleY = bone.ascaleY * (((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1);\r\n\t\t\tlet shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;\r\n\r\n\t\t\tbone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\r\n\t\t}\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Attachment } from \"./attachments/Attachment.js\";\r\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\r\nimport { PathAttachment } from \"./attachments/PathAttachment.js\";\r\nimport { RegionAttachment } from \"./attachments/RegionAttachment.js\";\r\nimport { Bone } from \"./Bone.js\";\r\nimport { IkConstraint } from \"./IkConstraint.js\";\r\nimport { PathConstraint } from \"./PathConstraint.js\";\r\nimport { SkeletonData } from \"./SkeletonData.js\";\r\nimport { Skin } from \"./Skin.js\";\r\nimport { Slot } from \"./Slot.js\";\r\nimport { TransformConstraint } from \"./TransformConstraint.js\";\r\nimport { Updatable } from \"./Updatable.js\";\r\nimport { Color, Utils, MathUtils, Vector2, NumberArrayLike } from \"./Utils.js\";\r\n\r\n/** Stores the current pose for a skeleton.\r\n *\r\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide. */\r\nexport class Skeleton {\r\n\tstatic yDown = false;;\r\n\r\n\t/** The skeleton's setup pose data. */\r\n\tdata: SkeletonData;\r\n\r\n\t/** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\r\n\tbones: Array<Bone>;\r\n\r\n\t/** The skeleton's slots. */\r\n\tslots: Array<Slot>;\r\n\r\n\t/** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */\r\n\tdrawOrder: Array<Slot>;\r\n\r\n\t/** The skeleton's IK constraints. */\r\n\tikConstraints: Array<IkConstraint>;\r\n\r\n\t/** The skeleton's transform constraints. */\r\n\ttransformConstraints: Array<TransformConstraint>;\r\n\r\n\t/** The skeleton's path constraints. */\r\n\tpathConstraints: Array<PathConstraint>;\r\n\r\n\t/** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */\r\n\t_updateCache = new Array<Updatable>();\r\n\r\n\t/** The skeleton's current skin. May be null. */\r\n\tskin: Skin | null = null;\r\n\r\n\t/** The color to tint all the skeleton's attachments. */\r\n\tcolor: Color;\r\n\r\n\t/** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\r\n\t  * inheritance. */\r\n\tscaleX = 1;\r\n\r\n\t/** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\r\n\t  * inheritance. */\r\n\tprivate _scaleY = 1;\r\n\r\n\tpublic get scaleY () {\r\n\t\treturn Skeleton.yDown ? -this._scaleY : this._scaleY;\r\n\t}\r\n\r\n\tpublic set scaleY (scaleY: number) {\r\n\t\tthis._scaleY = scaleY;\r\n\t}\r\n\r\n\t/** Sets the skeleton X position, which is added to the root bone worldX position. */\r\n\tx = 0;\r\n\r\n\t/** Sets the skeleton Y position, which is added to the root bone worldY position. */\r\n\ty = 0;\r\n\r\n\tconstructor (data: SkeletonData) {\r\n\t\tif (!data) throw new Error(\"data cannot be null.\");\r\n\t\tthis.data = data;\r\n\r\n\t\tthis.bones = new Array<Bone>();\r\n\t\tfor (let i = 0; i < data.bones.length; i++) {\r\n\t\t\tlet boneData = data.bones[i];\r\n\t\t\tlet bone: Bone;\r\n\t\t\tif (!boneData.parent)\r\n\t\t\t\tbone = new Bone(boneData, this, null);\r\n\t\t\telse {\r\n\t\t\t\tlet parent = this.bones[boneData.parent.index];\r\n\t\t\t\tbone = new Bone(boneData, this, parent);\r\n\t\t\t\tparent.children.push(bone);\r\n\t\t\t}\r\n\t\t\tthis.bones.push(bone);\r\n\t\t}\r\n\r\n\t\tthis.slots = new Array<Slot>();\r\n\t\tthis.drawOrder = new Array<Slot>();\r\n\t\tfor (let i = 0; i < data.slots.length; i++) {\r\n\t\t\tlet slotData = data.slots[i];\r\n\t\t\tlet bone = this.bones[slotData.boneData.index];\r\n\t\t\tlet slot = new Slot(slotData, bone);\r\n\t\t\tthis.slots.push(slot);\r\n\t\t\tthis.drawOrder.push(slot);\r\n\t\t}\r\n\r\n\t\tthis.ikConstraints = new Array<IkConstraint>();\r\n\t\tfor (let i = 0; i < data.ikConstraints.length; i++) {\r\n\t\t\tlet ikConstraintData = data.ikConstraints[i];\r\n\t\t\tthis.ikConstraints.push(new IkConstraint(ikConstraintData, this));\r\n\t\t}\r\n\r\n\t\tthis.transformConstraints = new Array<TransformConstraint>();\r\n\t\tfor (let i = 0; i < data.transformConstraints.length; i++) {\r\n\t\t\tlet transformConstraintData = data.transformConstraints[i];\r\n\t\t\tthis.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\r\n\t\t}\r\n\r\n\t\tthis.pathConstraints = new Array<PathConstraint>();\r\n\t\tfor (let i = 0; i < data.pathConstraints.length; i++) {\r\n\t\t\tlet pathConstraintData = data.pathConstraints[i];\r\n\t\t\tthis.pathConstraints.push(new PathConstraint(pathConstraintData, this));\r\n\t\t}\r\n\r\n\t\tthis.color = new Color(1, 1, 1, 1);\r\n\t\tthis.updateCache();\r\n\t}\r\n\r\n\t/** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\r\n\t * constraints, or weighted path attachments are added or removed. */\r\n\tupdateCache () {\r\n\t\tlet updateCache = this._updateCache;\r\n\t\tupdateCache.length = 0;\r\n\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\t\t\tbone.sorted = bone.data.skinRequired;\r\n\t\t\tbone.active = !bone.sorted;\r\n\t\t}\r\n\r\n\t\tif (this.skin) {\r\n\t\t\tlet skinBones = this.skin.bones;\r\n\t\t\tfor (let i = 0, n = this.skin.bones.length; i < n; i++) {\r\n\t\t\t\tlet bone: Bone | null = this.bones[skinBones[i].index];\r\n\t\t\t\tdo {\r\n\t\t\t\t\tbone.sorted = false;\r\n\t\t\t\t\tbone.active = true;\r\n\t\t\t\t\tbone = bone.parent;\r\n\t\t\t\t} while (bone);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// IK first, lowest hierarchy depth first.\r\n\t\tlet ikConstraints = this.ikConstraints;\r\n\t\tlet transformConstraints = this.transformConstraints;\r\n\t\tlet pathConstraints = this.pathConstraints;\r\n\t\tlet ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;\r\n\t\tlet constraintCount = ikCount + transformCount + pathCount;\r\n\r\n\t\touter:\r\n\t\tfor (let i = 0; i < constraintCount; i++) {\r\n\t\t\tfor (let ii = 0; ii < ikCount; ii++) {\r\n\t\t\t\tlet constraint = ikConstraints[ii];\r\n\t\t\t\tif (constraint.data.order == i) {\r\n\t\t\t\t\tthis.sortIkConstraint(constraint);\r\n\t\t\t\t\tcontinue outer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (let ii = 0; ii < transformCount; ii++) {\r\n\t\t\t\tlet constraint = transformConstraints[ii];\r\n\t\t\t\tif (constraint.data.order == i) {\r\n\t\t\t\t\tthis.sortTransformConstraint(constraint);\r\n\t\t\t\t\tcontinue outer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (let ii = 0; ii < pathCount; ii++) {\r\n\t\t\t\tlet constraint = pathConstraints[ii];\r\n\t\t\t\tif (constraint.data.order == i) {\r\n\t\t\t\t\tthis.sortPathConstraint(constraint);\r\n\t\t\t\t\tcontinue outer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++)\r\n\t\t\tthis.sortBone(bones[i]);\r\n\t}\r\n\r\n\tsortIkConstraint (constraint: IkConstraint) {\r\n\t\tconstraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)))!;\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tlet target = constraint.target;\r\n\t\tthis.sortBone(target);\r\n\r\n\t\tlet constrained = constraint.bones;\r\n\t\tlet parent = constrained[0];\r\n\t\tthis.sortBone(parent);\r\n\r\n\t\tif (constrained.length == 1) {\r\n\t\t\tthis._updateCache.push(constraint);\r\n\t\t\tthis.sortReset(parent.children);\r\n\t\t} else {\r\n\t\t\tlet child = constrained[constrained.length - 1];\r\n\t\t\tthis.sortBone(child);\r\n\r\n\t\t\tthis._updateCache.push(constraint);\r\n\r\n\t\t\tthis.sortReset(parent.children);\r\n\t\t\tchild.sorted = true;\r\n\t\t}\r\n\t}\r\n\r\n\tsortPathConstraint (constraint: PathConstraint) {\r\n\t\tconstraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)))!;\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tlet slot = constraint.target;\r\n\t\tlet slotIndex = slot.data.index;\r\n\t\tlet slotBone = slot.bone;\r\n\t\tif (this.skin) this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\r\n\t\tif (this.data.defaultSkin && this.data.defaultSkin != this.skin)\r\n\t\t\tthis.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\r\n\t\tfor (let i = 0, n = this.data.skins.length; i < n; i++)\r\n\t\t\tthis.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\r\n\r\n\t\tlet attachment = slot.getAttachment();\r\n\t\tif (attachment instanceof PathAttachment) this.sortPathConstraintAttachmentWith(attachment, slotBone);\r\n\r\n\t\tlet constrained = constraint.bones;\r\n\t\tlet boneCount = constrained.length;\r\n\t\tfor (let i = 0; i < boneCount; i++)\r\n\t\t\tthis.sortBone(constrained[i]);\r\n\r\n\t\tthis._updateCache.push(constraint);\r\n\r\n\t\tfor (let i = 0; i < boneCount; i++)\r\n\t\t\tthis.sortReset(constrained[i].children);\r\n\t\tfor (let i = 0; i < boneCount; i++)\r\n\t\t\tconstrained[i].sorted = true;\r\n\t}\r\n\r\n\tsortTransformConstraint (constraint: TransformConstraint) {\r\n\t\tconstraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)))!;\r\n\t\tif (!constraint.active) return;\r\n\r\n\t\tthis.sortBone(constraint.target);\r\n\r\n\t\tlet constrained = constraint.bones;\r\n\t\tlet boneCount = constrained.length;\r\n\t\tif (constraint.data.local) {\r\n\t\t\tfor (let i = 0; i < boneCount; i++) {\r\n\t\t\t\tlet child = constrained[i];\r\n\t\t\t\tthis.sortBone(child.parent!);\r\n\t\t\t\tthis.sortBone(child);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = 0; i < boneCount; i++) {\r\n\t\t\t\tthis.sortBone(constrained[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._updateCache.push(constraint);\r\n\r\n\t\tfor (let i = 0; i < boneCount; i++)\r\n\t\t\tthis.sortReset(constrained[i].children);\r\n\t\tfor (let i = 0; i < boneCount; i++)\r\n\t\t\tconstrained[i].sorted = true;\r\n\t}\r\n\r\n\tsortPathConstraintAttachment (skin: Skin, slotIndex: number, slotBone: Bone) {\r\n\t\tlet attachments = skin.attachments[slotIndex];\r\n\t\tif (!attachments) return;\r\n\t\tfor (let key in attachments) {\r\n\t\t\tthis.sortPathConstraintAttachmentWith(attachments[key], slotBone);\r\n\t\t}\r\n\t}\r\n\r\n\tsortPathConstraintAttachmentWith (attachment: Attachment, slotBone: Bone) {\r\n\t\tif (!(attachment instanceof PathAttachment)) return;\r\n\t\tlet pathBones = (<PathAttachment>attachment).bones;\r\n\t\tif (!pathBones)\r\n\t\t\tthis.sortBone(slotBone);\r\n\t\telse {\r\n\t\t\tlet bones = this.bones;\r\n\t\t\tfor (let i = 0, n = pathBones.length; i < n;) {\r\n\t\t\t\tlet nn = pathBones[i++];\r\n\t\t\t\tnn += i;\r\n\t\t\t\twhile (i < nn)\r\n\t\t\t\t\tthis.sortBone(bones[pathBones[i++]]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsortBone (bone: Bone) {\r\n\t\tif (!bone) return;\r\n\t\tif (bone.sorted) return;\r\n\t\tlet parent = bone.parent;\r\n\t\tif (parent) this.sortBone(parent);\r\n\t\tbone.sorted = true;\r\n\t\tthis._updateCache.push(bone);\r\n\t}\r\n\r\n\tsortReset (bones: Array<Bone>) {\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\t\t\tif (!bone.active) continue;\r\n\t\t\tif (bone.sorted) this.sortReset(bone.children);\r\n\t\t\tbone.sorted = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Updates the world transform for each bone and applies all constraints.\r\n\t *\r\n\t * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n\t * Runtimes Guide. */\r\n\tupdateWorldTransform () {\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\t\t\tbone.ax = bone.x;\r\n\t\t\tbone.ay = bone.y;\r\n\t\t\tbone.arotation = bone.rotation;\r\n\t\t\tbone.ascaleX = bone.scaleX;\r\n\t\t\tbone.ascaleY = bone.scaleY;\r\n\t\t\tbone.ashearX = bone.shearX;\r\n\t\t\tbone.ashearY = bone.shearY;\r\n\t\t}\r\n\r\n\t\tlet updateCache = this._updateCache;\r\n\t\tfor (let i = 0, n = updateCache.length; i < n; i++)\r\n\t\t\tupdateCache[i].update();\r\n\t}\r\n\r\n\tupdateWorldTransformWith (parent: Bone) {\r\n\t\t// Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\r\n\t\tlet rootBone = this.getRootBone();\r\n\t\tif (!rootBone) throw new Error(\"Root bone must not be null.\");\r\n\t\tlet pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\r\n\t\trootBone.worldX = pa * this.x + pb * this.y + parent.worldX;\r\n\t\trootBone.worldY = pc * this.x + pd * this.y + parent.worldY;\r\n\r\n\t\tlet rotationY = rootBone.rotation + 90 + rootBone.shearY;\r\n\t\tlet la = MathUtils.cosDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\r\n\t\tlet lb = MathUtils.cosDeg(rotationY) * rootBone.scaleY;\r\n\t\tlet lc = MathUtils.sinDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\r\n\t\tlet ld = MathUtils.sinDeg(rotationY) * rootBone.scaleY;\r\n\t\trootBone.a = (pa * la + pb * lc) * this.scaleX;\r\n\t\trootBone.b = (pa * lb + pb * ld) * this.scaleX;\r\n\t\trootBone.c = (pc * la + pd * lc) * this.scaleY;\r\n\t\trootBone.d = (pc * lb + pd * ld) * this.scaleY;\r\n\r\n\t\t// Update everything except root bone.\r\n\t\tlet updateCache = this._updateCache;\r\n\t\tfor (let i = 0, n = updateCache.length; i < n; i++) {\r\n\t\t\tlet updatable = updateCache[i];\r\n\t\t\tif (updatable != rootBone) updatable.update();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Sets the bones, constraints, and slots to their setup pose values. */\r\n\tsetToSetupPose () {\r\n\t\tthis.setBonesToSetupPose();\r\n\t\tthis.setSlotsToSetupPose();\r\n\t}\r\n\r\n\t/** Sets the bones and constraints to their setup pose values. */\r\n\tsetBonesToSetupPose () {\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++)\r\n\t\t\tbones[i].setToSetupPose();\r\n\r\n\t\tlet ikConstraints = this.ikConstraints;\r\n\t\tfor (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = ikConstraints[i];\r\n\t\t\tconstraint.mix = constraint.data.mix;\r\n\t\t\tconstraint.softness = constraint.data.softness;\r\n\t\t\tconstraint.bendDirection = constraint.data.bendDirection;\r\n\t\t\tconstraint.compress = constraint.data.compress;\r\n\t\t\tconstraint.stretch = constraint.data.stretch;\r\n\t\t}\r\n\r\n\t\tlet transformConstraints = this.transformConstraints;\r\n\t\tfor (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = transformConstraints[i];\r\n\t\t\tlet data = constraint.data;\r\n\t\t\tconstraint.mixRotate = data.mixRotate;\r\n\t\t\tconstraint.mixX = data.mixX;\r\n\t\t\tconstraint.mixY = data.mixY;\r\n\t\t\tconstraint.mixScaleX = data.mixScaleX;\r\n\t\t\tconstraint.mixScaleY = data.mixScaleY;\r\n\t\t\tconstraint.mixShearY = data.mixShearY;\r\n\t\t}\r\n\r\n\t\tlet pathConstraints = this.pathConstraints;\r\n\t\tfor (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = pathConstraints[i];\r\n\t\t\tlet data = constraint.data;\r\n\t\t\tconstraint.position = data.position;\r\n\t\t\tconstraint.spacing = data.spacing;\r\n\t\t\tconstraint.mixRotate = data.mixRotate;\r\n\t\t\tconstraint.mixX = data.mixX;\r\n\t\t\tconstraint.mixY = data.mixY;\r\n\t\t}\r\n\t}\r\n\r\n\t/** Sets the slots and draw order to their setup pose values. */\r\n\tsetSlotsToSetupPose () {\r\n\t\tlet slots = this.slots;\r\n\t\tUtils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\r\n\t\tfor (let i = 0, n = slots.length; i < n; i++)\r\n\t\t\tslots[i].setToSetupPose();\r\n\t}\r\n\r\n\t/** @returns May return null. */\r\n\tgetRootBone () {\r\n\t\tif (this.bones.length == 0) return null;\r\n\t\treturn this.bones[0];\r\n\t}\r\n\r\n\t/** @returns May be null. */\r\n\tfindBone (boneName: string) {\r\n\t\tif (!boneName) throw new Error(\"boneName cannot be null.\");\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\t\t\tif (bone.data.name == boneName) return bone;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\r\n\t * repeatedly.\r\n\t * @returns May be null. */\r\n\tfindSlot (slotName: string) {\r\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\r\n\t\tlet slots = this.slots;\r\n\t\tfor (let i = 0, n = slots.length; i < n; i++) {\r\n\t\t\tlet slot = slots[i];\r\n\t\t\tif (slot.data.name == slotName) return slot;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Sets a skin by name.\r\n\t *\r\n\t * See {@link #setSkin()}. */\r\n\tsetSkinByName (skinName: string) {\r\n\t\tlet skin = this.data.findSkin(skinName);\r\n\t\tif (!skin) throw new Error(\"Skin not found: \" + skinName);\r\n\t\tthis.setSkin(skin);\r\n\t}\r\n\r\n\t/** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\r\n\t * skin is changed, {@link #updateCache()} is called.\r\n\t *\r\n\t * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\r\n\t * old skin, each slot's setup mode attachment is attached from the new skin.\r\n\t *\r\n\t * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\r\n\t * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\r\n\t * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\r\n\t * @param newSkin May be null. */\r\n\tsetSkin (newSkin: Skin) {\r\n\t\tif (newSkin == this.skin) return;\r\n\t\tif (newSkin) {\r\n\t\t\tif (this.skin)\r\n\t\t\t\tnewSkin.attachAll(this, this.skin);\r\n\t\t\telse {\r\n\t\t\t\tlet slots = this.slots;\r\n\t\t\t\tfor (let i = 0, n = slots.length; i < n; i++) {\r\n\t\t\t\t\tlet slot = slots[i];\r\n\t\t\t\t\tlet name = slot.data.attachmentName;\r\n\t\t\t\t\tif (name) {\r\n\t\t\t\t\t\tlet attachment = newSkin.getAttachment(i, name);\r\n\t\t\t\t\t\tif (attachment) slot.setAttachment(attachment);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.skin = newSkin;\r\n\t\tthis.updateCache();\r\n\t}\r\n\r\n\r\n\t/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\r\n\t * name.\r\n\t *\r\n\t * See {@link #getAttachment()}.\r\n\t * @returns May be null. */\r\n\tgetAttachmentByName (slotName: string, attachmentName: string): Attachment | null {\r\n\t\tlet slot = this.data.findSlot(slotName);\r\n\t\tif (!slot) throw new Error(`Can't find slot with name ${slotName}`);\r\n\t\treturn this.getAttachment(slot.index, attachmentName);\r\n\t}\r\n\r\n\t/** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\r\n\t * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\r\n\t *\r\n\t * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\r\n\t * @returns May be null. */\r\n\tgetAttachment (slotIndex: number, attachmentName: string): Attachment | null {\r\n\t\tif (!attachmentName) throw new Error(\"attachmentName cannot be null.\");\r\n\t\tif (this.skin) {\r\n\t\t\tlet attachment = this.skin.getAttachment(slotIndex, attachmentName);\r\n\t\t\tif (attachment) return attachment;\r\n\t\t}\r\n\t\tif (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\r\n\t * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\r\n\t * @param attachmentName May be null to clear the slot's attachment. */\r\n\tsetAttachment (slotName: string, attachmentName: string) {\r\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\r\n\t\tlet slots = this.slots;\r\n\t\tfor (let i = 0, n = slots.length; i < n; i++) {\r\n\t\t\tlet slot = slots[i];\r\n\t\t\tif (slot.data.name == slotName) {\r\n\t\t\t\tlet attachment: Attachment | null = null;\r\n\t\t\t\tif (attachmentName) {\r\n\t\t\t\t\tattachment = this.getAttachment(i, attachmentName);\r\n\t\t\t\t\tif (!attachment) throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\r\n\t\t\t\t}\r\n\t\t\t\tslot.setAttachment(attachment);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"Slot not found: \" + slotName);\r\n\t}\r\n\r\n\r\n\t/** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\r\n\t * than to call it repeatedly.\r\n\t * @return May be null. */\r\n\tfindIkConstraint (constraintName: string) {\r\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n\t\tlet ikConstraints = this.ikConstraints;\r\n\t\tfor (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n\t\t\tlet ikConstraint = ikConstraints[i];\r\n\t\t\tif (ikConstraint.data.name == constraintName) return ikConstraint;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\r\n\t * this method than to call it repeatedly.\r\n\t * @return May be null. */\r\n\tfindTransformConstraint (constraintName: string) {\r\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n\t\tlet transformConstraints = this.transformConstraints;\r\n\t\tfor (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = transformConstraints[i];\r\n\t\t\tif (constraint.data.name == constraintName) return constraint;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\r\n\t * than to call it repeatedly.\r\n\t * @return May be null. */\r\n\tfindPathConstraint (constraintName: string) {\r\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n\t\tlet pathConstraints = this.pathConstraints;\r\n\t\tfor (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = pathConstraints[i];\r\n\t\t\tif (constraint.data.name == constraintName) return constraint;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose as `{ x: number, y: number, width: number, height: number }`.\r\n\t * Note that this method will create temporary objects which can add to garbage collection pressure. Use `getBounds()` if garbage collection is a concern. */\r\n\tgetBoundsRect () {\r\n\t\tlet offset = new Vector2();\r\n\t\tlet size = new Vector2();\r\n\t\tthis.getBounds(offset, size);\r\n\t\treturn { x: offset.x, y: offset.y, width: size.x, height: size.y };\r\n\t}\r\n\r\n\t/** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\r\n\t * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\r\n\t * @param size An output value, the width and height of the AABB.\r\n\t * @param temp Working memory to temporarily store attachments' computed world vertices. */\r\n\tgetBounds (offset: Vector2, size: Vector2, temp: Array<number> = new Array<number>(2)) {\r\n\t\tif (!offset) throw new Error(\"offset cannot be null.\");\r\n\t\tif (!size) throw new Error(\"size cannot be null.\");\r\n\t\tlet drawOrder = this.drawOrder;\r\n\t\tlet minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\r\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\r\n\t\t\tlet slot = drawOrder[i];\r\n\t\t\tif (!slot.bone.active) continue;\r\n\t\t\tlet verticesLength = 0;\r\n\t\t\tlet vertices: NumberArrayLike | null = null;\r\n\t\t\tlet attachment = slot.getAttachment();\r\n\t\t\tif (attachment instanceof RegionAttachment) {\r\n\t\t\t\tverticesLength = 8;\r\n\t\t\t\tvertices = Utils.setArraySize(temp, verticesLength, 0);\r\n\t\t\t\t(<RegionAttachment>attachment).computeWorldVertices(slot, vertices, 0, 2);\r\n\t\t\t} else if (attachment instanceof MeshAttachment) {\r\n\t\t\t\tlet mesh = (<MeshAttachment>attachment);\r\n\t\t\t\tverticesLength = mesh.worldVerticesLength;\r\n\t\t\t\tvertices = Utils.setArraySize(temp, verticesLength, 0);\r\n\t\t\t\tmesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\r\n\t\t\t}\r\n\t\t\tif (vertices) {\r\n\t\t\t\tfor (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\r\n\t\t\t\t\tlet x = vertices[ii], y = vertices[ii + 1];\r\n\t\t\t\t\tminX = Math.min(minX, x);\r\n\t\t\t\t\tminY = Math.min(minY, y);\r\n\t\t\t\t\tmaxX = Math.max(maxX, x);\r\n\t\t\t\t\tmaxY = Math.max(maxY, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\toffset.set(minX, minY);\r\n\t\tsize.set(maxX - minX, maxY - minY);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Animation } from \"./Animation\"\r\nimport { BoneData } from \"./BoneData.js\";\r\nimport { EventData } from \"./EventData.js\";\r\nimport { IkConstraintData } from \"./IkConstraintData.js\";\r\nimport { PathConstraintData } from \"./PathConstraintData.js\";\r\nimport { Skin } from \"./Skin.js\";\r\nimport { SlotData } from \"./SlotData.js\";\r\nimport { TransformConstraintData } from \"./TransformConstraintData.js\";\r\n\r\n/** Stores the setup pose and all of the stateless data for a skeleton.\r\n *\r\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\r\n * Guide. */\r\nexport class SkeletonData {\r\n\r\n\t/** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */\r\n\tname: string | null = null;\r\n\r\n\t/** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\r\n\tbones = new Array<BoneData>(); // Ordered parents first.\r\n\r\n\t/** The skeleton's slots. */\r\n\tslots = new Array<SlotData>(); // Setup pose draw order.\r\n\tskins = new Array<Skin>();\r\n\r\n\t/** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\r\n\t *\r\n\t * See {@link Skeleton#getAttachmentByName()}.\r\n\t * May be null. */\r\n\tdefaultSkin: Skin | null = null;\r\n\r\n\t/** The skeleton's events. */\r\n\tevents = new Array<EventData>();\r\n\r\n\t/** The skeleton's animations. */\r\n\tanimations = new Array<Animation>();\r\n\r\n\t/** The skeleton's IK constraints. */\r\n\tikConstraints = new Array<IkConstraintData>();\r\n\r\n\t/** The skeleton's transform constraints. */\r\n\ttransformConstraints = new Array<TransformConstraintData>();\r\n\r\n\t/** The skeleton's path constraints. */\r\n\tpathConstraints = new Array<PathConstraintData>();\r\n\r\n\t/** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */\r\n\tx: number = 0;\r\n\r\n\t/** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */\r\n\ty: number = 0;\r\n\r\n\t/** The width of the skeleton's axis aligned bounding box in the setup pose. */\r\n\twidth: number = 0;\r\n\r\n\t/** The height of the skeleton's axis aligned bounding box in the setup pose. */\r\n\theight: number = 0;\r\n\r\n\t/** The Spine version used to export the skeleton data, or null. */\r\n\tversion: string | null = null;\r\n\r\n\t/** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */\r\n\thash: string | null = null;\r\n\r\n\t// Nonessential\r\n\t/** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\r\n\tfps = 0;\r\n\r\n\t/** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */\r\n\timagesPath: string | null = null;\r\n\r\n\t/** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */\r\n\taudioPath: string | null = null;\r\n\r\n\t/** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\r\n\t * multiple times.\r\n\t * @returns May be null. */\r\n\tfindBone (boneName: string) {\r\n\t\tif (!boneName) throw new Error(\"boneName cannot be null.\");\r\n\t\tlet bones = this.bones;\r\n\t\tfor (let i = 0, n = bones.length; i < n; i++) {\r\n\t\t\tlet bone = bones[i];\r\n\t\t\tif (bone.name == boneName) return bone;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\r\n\t * multiple times.\r\n\t * @returns May be null. */\r\n\tfindSlot (slotName: string) {\r\n\t\tif (!slotName) throw new Error(\"slotName cannot be null.\");\r\n\t\tlet slots = this.slots;\r\n\t\tfor (let i = 0, n = slots.length; i < n; i++) {\r\n\t\t\tlet slot = slots[i];\r\n\t\t\tif (slot.name == slotName) return slot;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\r\n\t * multiple times.\r\n\t * @returns May be null. */\r\n\tfindSkin (skinName: string) {\r\n\t\tif (!skinName) throw new Error(\"skinName cannot be null.\");\r\n\t\tlet skins = this.skins;\r\n\t\tfor (let i = 0, n = skins.length; i < n; i++) {\r\n\t\t\tlet skin = skins[i];\r\n\t\t\tif (skin.name == skinName) return skin;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\r\n\t * multiple times.\r\n\t * @returns May be null. */\r\n\tfindEvent (eventDataName: string) {\r\n\t\tif (!eventDataName) throw new Error(\"eventDataName cannot be null.\");\r\n\t\tlet events = this.events;\r\n\t\tfor (let i = 0, n = events.length; i < n; i++) {\r\n\t\t\tlet event = events[i];\r\n\t\t\tif (event.name == eventDataName) return event;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\r\n\t * call it multiple times.\r\n\t * @returns May be null. */\r\n\tfindAnimation (animationName: string) {\r\n\t\tif (!animationName) throw new Error(\"animationName cannot be null.\");\r\n\t\tlet animations = this.animations;\r\n\t\tfor (let i = 0, n = animations.length; i < n; i++) {\r\n\t\t\tlet animation = animations[i];\r\n\t\t\tif (animation.name == animationName) return animation;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\r\n\t * than to call it multiple times.\r\n\t * @return May be null. */\r\n\tfindIkConstraint (constraintName: string) {\r\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n\t\tlet ikConstraints = this.ikConstraints;\r\n\t\tfor (let i = 0, n = ikConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = ikConstraints[i];\r\n\t\t\tif (constraint.name == constraintName) return constraint;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\r\n\t * this method than to call it multiple times.\r\n\t * @return May be null. */\r\n\tfindTransformConstraint (constraintName: string) {\r\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n\t\tlet transformConstraints = this.transformConstraints;\r\n\t\tfor (let i = 0, n = transformConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = transformConstraints[i];\r\n\t\t\tif (constraint.name == constraintName) return constraint;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\r\n\t * than to call it multiple times.\r\n\t * @return May be null. */\r\n\tfindPathConstraint (constraintName: string) {\r\n\t\tif (!constraintName) throw new Error(\"constraintName cannot be null.\");\r\n\t\tlet pathConstraints = this.pathConstraints;\r\n\t\tfor (let i = 0, n = pathConstraints.length; i < n; i++) {\r\n\t\t\tlet constraint = pathConstraints[i];\r\n\t\t\tif (constraint.name == constraintName) return constraint;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Attachment } from \"./attachments/Attachment.js\";\r\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\r\nimport { BoneData } from \"./BoneData.js\";\r\nimport { ConstraintData } from \"./ConstraintData.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { StringMap } from \"./Utils.js\";\r\n\r\n/** Stores an entry in the skin consisting of the slot index, name, and attachment **/\r\nexport class SkinEntry {\r\n\tconstructor (public slotIndex: number = 0, public name: string, public attachment: Attachment) { }\r\n}\r\n\r\n/** Stores attachments by slot index and attachment name.\r\n *\r\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\r\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide. */\r\nexport class Skin {\r\n\t/** The skin's name, which is unique across all skins in the skeleton. */\r\n\tname: string;\r\n\r\n\tattachments = new Array<StringMap<Attachment>>();\r\n\tbones = Array<BoneData>();\r\n\tconstraints = new Array<ConstraintData>();\r\n\r\n\tconstructor (name: string) {\r\n\t\tif (!name) throw new Error(\"name cannot be null.\");\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\t/** Adds an attachment to the skin for the specified slot index and name. */\r\n\tsetAttachment (slotIndex: number, name: string, attachment: Attachment) {\r\n\t\tif (!attachment) throw new Error(\"attachment cannot be null.\");\r\n\t\tlet attachments = this.attachments;\r\n\t\tif (slotIndex >= attachments.length) attachments.length = slotIndex + 1;\r\n\t\tif (!attachments[slotIndex]) attachments[slotIndex] = {};\r\n\t\tattachments[slotIndex][name] = attachment;\r\n\t}\r\n\r\n\t/** Adds all attachments, bones, and constraints from the specified skin to this skin. */\r\n\taddSkin (skin: Skin) {\r\n\t\tfor (let i = 0; i < skin.bones.length; i++) {\r\n\t\t\tlet bone = skin.bones[i];\r\n\t\t\tlet contained = false;\r\n\t\t\tfor (let ii = 0; ii < this.bones.length; ii++) {\r\n\t\t\t\tif (this.bones[ii] == bone) {\r\n\t\t\t\t\tcontained = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!contained) this.bones.push(bone);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < skin.constraints.length; i++) {\r\n\t\t\tlet constraint = skin.constraints[i];\r\n\t\t\tlet contained = false;\r\n\t\t\tfor (let ii = 0; ii < this.constraints.length; ii++) {\r\n\t\t\t\tif (this.constraints[ii] == constraint) {\r\n\t\t\t\t\tcontained = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!contained) this.constraints.push(constraint);\r\n\t\t}\r\n\r\n\t\tlet attachments = skin.getAttachments();\r\n\t\tfor (let i = 0; i < attachments.length; i++) {\r\n\t\t\tvar attachment = attachments[i];\r\n\t\t\tthis.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\r\n\t * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */\r\n\tcopySkin (skin: Skin) {\r\n\t\tfor (let i = 0; i < skin.bones.length; i++) {\r\n\t\t\tlet bone = skin.bones[i];\r\n\t\t\tlet contained = false;\r\n\t\t\tfor (let ii = 0; ii < this.bones.length; ii++) {\r\n\t\t\t\tif (this.bones[ii] == bone) {\r\n\t\t\t\t\tcontained = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!contained) this.bones.push(bone);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < skin.constraints.length; i++) {\r\n\t\t\tlet constraint = skin.constraints[i];\r\n\t\t\tlet contained = false;\r\n\t\t\tfor (let ii = 0; ii < this.constraints.length; ii++) {\r\n\t\t\t\tif (this.constraints[ii] == constraint) {\r\n\t\t\t\t\tcontained = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!contained) this.constraints.push(constraint);\r\n\t\t}\r\n\r\n\t\tlet attachments = skin.getAttachments();\r\n\t\tfor (let i = 0; i < attachments.length; i++) {\r\n\t\t\tvar attachment = attachments[i];\r\n\t\t\tif (!attachment.attachment) continue;\r\n\t\t\tif (attachment.attachment instanceof MeshAttachment) {\r\n\t\t\t\tattachment.attachment = attachment.attachment.newLinkedMesh();\r\n\t\t\t\tthis.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n\t\t\t} else {\r\n\t\t\t\tattachment.attachment = attachment.attachment.copy();\r\n\t\t\t\tthis.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** Returns the attachment for the specified slot index and name, or null. */\r\n\tgetAttachment (slotIndex: number, name: string): Attachment | null {\r\n\t\tlet dictionary = this.attachments[slotIndex];\r\n\t\treturn dictionary ? dictionary[name] : null;\r\n\t}\r\n\r\n\t/** Removes the attachment in the skin for the specified slot index and name, if any. */\r\n\tremoveAttachment (slotIndex: number, name: string) {\r\n\t\tlet dictionary = this.attachments[slotIndex];\r\n\t\tif (dictionary) delete dictionary[name];\r\n\t}\r\n\r\n\t/** Returns all attachments in this skin. */\r\n\tgetAttachments (): Array<SkinEntry> {\r\n\t\tlet entries = new Array<SkinEntry>();\r\n\t\tfor (var i = 0; i < this.attachments.length; i++) {\r\n\t\t\tlet slotAttachments = this.attachments[i];\r\n\t\t\tif (slotAttachments) {\r\n\t\t\t\tfor (let name in slotAttachments) {\r\n\t\t\t\t\tlet attachment = slotAttachments[name];\r\n\t\t\t\t\tif (attachment) entries.push(new SkinEntry(i, name, attachment));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn entries;\r\n\t}\r\n\r\n\t/** Returns all attachments in this skin for the specified slot index. */\r\n\tgetAttachmentsForSlot (slotIndex: number, attachments: Array<SkinEntry>) {\r\n\t\tlet slotAttachments = this.attachments[slotIndex];\r\n\t\tif (slotAttachments) {\r\n\t\t\tfor (let name in slotAttachments) {\r\n\t\t\t\tlet attachment = slotAttachments[name];\r\n\t\t\t\tif (attachment) attachments.push(new SkinEntry(slotIndex, name, attachment));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** Clears all attachments, bones, and constraints. */\r\n\tclear () {\r\n\t\tthis.attachments.length = 0;\r\n\t\tthis.bones.length = 0;\r\n\t\tthis.constraints.length = 0;\r\n\t}\r\n\r\n\t/** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\r\n\tattachAll (skeleton: Skeleton, oldSkin: Skin) {\r\n\t\tlet slotIndex = 0;\r\n\t\tfor (let i = 0; i < skeleton.slots.length; i++) {\r\n\t\t\tlet slot = skeleton.slots[i];\r\n\t\t\tlet slotAttachment = slot.getAttachment();\r\n\t\t\tif (slotAttachment && slotIndex < oldSkin.attachments.length) {\r\n\t\t\t\tlet dictionary = oldSkin.attachments[slotIndex];\r\n\t\t\t\tfor (let key in dictionary) {\r\n\t\t\t\t\tlet skinAttachment: Attachment = dictionary[key];\r\n\t\t\t\t\tif (slotAttachment == skinAttachment) {\r\n\t\t\t\t\t\tlet attachment = this.getAttachment(slotIndex, key);\r\n\t\t\t\t\t\tif (attachment) slot.setAttachment(attachment);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tslotIndex++;\r\n\t\t}\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { BoneData } from \"./BoneData.js\";\r\nimport { Color } from \"./Utils.js\";\r\n\r\n/** Stores the setup pose for a {@link Slot}. */\r\nexport class SlotData {\r\n\t/** The index of the slot in {@link Skeleton#getSlots()}. */\r\n\tindex: number = 0;\r\n\r\n\t/** The name of the slot, which is unique across all slots in the skeleton. */\r\n\tname: string;\r\n\r\n\t/** The bone this slot belongs to. */\r\n\tboneData: BoneData;\r\n\r\n\t/** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\r\n\t * color tinting. */\r\n\tcolor = new Color(1, 1, 1, 1);\r\n\r\n\t/** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\r\n\t * color's alpha is not used. */\r\n\tdarkColor: Color | null = null;\r\n\r\n\t/** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */\r\n\tattachmentName: string | null = null;\r\n\r\n\t/** The blend mode for drawing the slot's attachment. */\r\n\tblendMode: BlendMode = BlendMode.Normal;\r\n\r\n\tconstructor (index: number, name: string, boneData: BoneData) {\r\n\t\tif (index < 0) throw new Error(\"index must be >= 0.\");\r\n\t\tif (!name) throw new Error(\"name cannot be null.\");\r\n\t\tif (!boneData) throw new Error(\"boneData cannot be null.\");\r\n\t\tthis.index = index;\r\n\t\tthis.name = name;\r\n\t\tthis.boneData = boneData;\r\n\t}\r\n}\r\n\r\n/** Determines how images are blended with existing pixels when drawn. */\r\nexport enum BlendMode { Normal, Additive, Multiply, Screen }\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { ConstraintData } from \"./ConstraintData.js\";\r\nimport { BoneData } from \"./BoneData.js\";\r\n\r\n/** Stores the setup pose for a {@link TransformConstraint}.\r\n *\r\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\r\nexport class TransformConstraintData extends ConstraintData {\r\n\r\n\t/** The bones that will be modified by this transform constraint. */\r\n\tbones = new Array<BoneData>();\r\n\r\n\t/** The target bone whose world transform will be copied to the constrained bones. */\r\n\tprivate _target: BoneData | null = null;\r\n\tpublic set target (boneData: BoneData) { this._target = boneData; }\r\n\tpublic get target () {\r\n\t\tif (!this._target) throw new Error(\"BoneData not set.\")\r\n\t\telse return this._target;\r\n\t}\r\n\r\n\tmixRotate = 0;\r\n\tmixX = 0;\r\n\tmixY = 0;\r\n\tmixScaleX = 0;\r\n\tmixScaleY = 0;\r\n\tmixShearY = 0;\r\n\r\n\t/** An offset added to the constrained bone rotation. */\r\n\toffsetRotation = 0;\r\n\r\n\t/** An offset added to the constrained bone X translation. */\r\n\toffsetX = 0;\r\n\r\n\t/** An offset added to the constrained bone Y translation. */\r\n\toffsetY = 0;\r\n\r\n\t/** An offset added to the constrained bone scaleX. */\r\n\toffsetScaleX = 0;\r\n\r\n\t/** An offset added to the constrained bone scaleY. */\r\n\toffsetScaleY = 0;\r\n\r\n\t/** An offset added to the constrained bone shearY. */\r\n\toffsetShearY = 0;\r\n\r\n\trelative = false;\r\n\tlocal = false;\r\n\r\n\tconstructor (name: string) {\r\n\t\tsuper(name, 0, false);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Animation, Timeline, AttachmentTimeline, RGBATimeline, RGBTimeline, RGBA2Timeline, RGB2Timeline, AlphaTimeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, CurveTimeline1, CurveTimeline2, CurveTimeline, SequenceTimeline } from \"./Animation.js\";\r\nimport { VertexAttachment, Attachment } from \"./attachments/Attachment.js\";\r\nimport { AttachmentLoader } from \"./attachments/AttachmentLoader.js\";\r\nimport { HasTextureRegion } from \"./attachments/HasTextureRegion.js\";\r\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\r\nimport { Sequence, SequenceModeValues } from \"./attachments/Sequence.js\";\r\nimport { BoneData } from \"./BoneData.js\";\r\nimport { Event } from \"./Event.js\";\r\nimport { EventData } from \"./EventData.js\";\r\nimport { IkConstraintData } from \"./IkConstraintData.js\";\r\nimport { PathConstraintData, PositionMode, SpacingMode } from \"./PathConstraintData.js\";\r\nimport { SkeletonData } from \"./SkeletonData.js\";\r\nimport { Skin } from \"./Skin.js\";\r\nimport { SlotData } from \"./SlotData.js\";\r\nimport { TransformConstraintData } from \"./TransformConstraintData.js\";\r\nimport { Color, Utils } from \"./Utils.js\";\r\n\r\n/** Loads skeleton data in the Spine binary format.\r\n *\r\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\r\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\r\n * Runtimes Guide. */\r\nexport class SkeletonBinary {\r\n\t/** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\r\n\t * runtime than were used in Spine.\r\n\t *\r\n\t * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\r\n\tscale = 1;\r\n\r\n\tattachmentLoader: AttachmentLoader;\r\n\tprivate linkedMeshes = new Array<LinkedMesh>();\r\n\r\n\tconstructor (attachmentLoader: AttachmentLoader) {\r\n\t\tthis.attachmentLoader = attachmentLoader;\r\n\t}\r\n\r\n\treadSkeletonData (binary: Uint8Array): SkeletonData {\r\n\t\tlet scale = this.scale;\r\n\r\n\t\tlet skeletonData = new SkeletonData();\r\n\t\tskeletonData.name = \"\"; // BOZO\r\n\r\n\t\tlet input = new BinaryInput(binary);\r\n\r\n\t\tlet lowHash = input.readInt32();\r\n\t\tlet highHash = input.readInt32();\r\n\t\tskeletonData.hash = highHash == 0 && lowHash == 0 ? null : highHash.toString(16) + lowHash.toString(16);\r\n\t\tskeletonData.version = input.readString();\r\n\t\tskeletonData.x = input.readFloat();\r\n\t\tskeletonData.y = input.readFloat();\r\n\t\tskeletonData.width = input.readFloat();\r\n\t\tskeletonData.height = input.readFloat();\r\n\r\n\t\tlet nonessential = input.readBoolean();\r\n\t\tif (nonessential) {\r\n\t\t\tskeletonData.fps = input.readFloat();\r\n\r\n\t\t\tskeletonData.imagesPath = input.readString();\r\n\t\t\tskeletonData.audioPath = input.readString();\r\n\t\t}\r\n\r\n\t\tlet n = 0;\r\n\t\t// Strings.\r\n\t\tn = input.readInt(true)\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tlet str = input.readString();\r\n\t\t\tif (!str) throw new Error(\"String in string table must not be null.\");\r\n\t\t\tinput.strings.push(str);\r\n\t\t}\r\n\r\n\t\t// Bones.\r\n\t\tn = input.readInt(true)\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tlet name = input.readString();\r\n\t\t\tif (!name) throw new Error(\"Bone name must not be null.\");\r\n\t\t\tlet parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\r\n\t\t\tlet data = new BoneData(i, name, parent);\r\n\t\t\tdata.rotation = input.readFloat();\r\n\t\t\tdata.x = input.readFloat() * scale;\r\n\t\t\tdata.y = input.readFloat() * scale;\r\n\t\t\tdata.scaleX = input.readFloat();\r\n\t\t\tdata.scaleY = input.readFloat();\r\n\t\t\tdata.shearX = input.readFloat();\r\n\t\t\tdata.shearY = input.readFloat();\r\n\t\t\tdata.length = input.readFloat() * scale;\r\n\t\t\tdata.transformMode = input.readInt(true);\r\n\t\t\tdata.skinRequired = input.readBoolean();\r\n\t\t\tif (nonessential) Color.rgba8888ToColor(data.color, input.readInt32());\r\n\t\t\tskeletonData.bones.push(data);\r\n\t\t}\r\n\r\n\t\t// Slots.\r\n\t\tn = input.readInt(true);\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tlet slotName = input.readString();\r\n\t\t\tif (!slotName) throw new Error(\"Slot name must not be null.\");\r\n\t\t\tlet boneData = skeletonData.bones[input.readInt(true)];\r\n\t\t\tlet data = new SlotData(i, slotName, boneData);\r\n\t\t\tColor.rgba8888ToColor(data.color, input.readInt32());\r\n\r\n\t\t\tlet darkColor = input.readInt32();\r\n\t\t\tif (darkColor != -1) Color.rgb888ToColor(data.darkColor = new Color(), darkColor);\r\n\r\n\t\t\tdata.attachmentName = input.readStringRef();\r\n\t\t\tdata.blendMode = input.readInt(true);\r\n\t\t\tskeletonData.slots.push(data);\r\n\t\t}\r\n\r\n\t\t// IK constraints.\r\n\t\tn = input.readInt(true);\r\n\t\tfor (let i = 0, nn; i < n; i++) {\r\n\t\t\tlet name = input.readString();\r\n\t\t\tif (!name) throw new Error(\"IK constraint data name must not be null.\");\r\n\t\t\tlet data = new IkConstraintData(name);\r\n\t\t\tdata.order = input.readInt(true);\r\n\t\t\tdata.skinRequired = input.readBoolean();\r\n\t\t\tnn = input.readInt(true);\r\n\t\t\tfor (let ii = 0; ii < nn; ii++)\r\n\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\r\n\t\t\tdata.target = skeletonData.bones[input.readInt(true)];\r\n\t\t\tdata.mix = input.readFloat();\r\n\t\t\tdata.softness = input.readFloat() * scale;\r\n\t\t\tdata.bendDirection = input.readByte();\r\n\t\t\tdata.compress = input.readBoolean();\r\n\t\t\tdata.stretch = input.readBoolean();\r\n\t\t\tdata.uniform = input.readBoolean();\r\n\t\t\tskeletonData.ikConstraints.push(data);\r\n\t\t}\r\n\r\n\t\t// Transform constraints.\r\n\t\tn = input.readInt(true);\r\n\t\tfor (let i = 0, nn; i < n; i++) {\r\n\t\t\tlet name = input.readString();\r\n\t\t\tif (!name) throw new Error(\"Transform constraint data name must not be null.\");\r\n\t\t\tlet data = new TransformConstraintData(name);\r\n\t\t\tdata.order = input.readInt(true);\r\n\t\t\tdata.skinRequired = input.readBoolean();\r\n\t\t\tnn = input.readInt(true);\r\n\t\t\tfor (let ii = 0; ii < nn; ii++)\r\n\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\r\n\t\t\tdata.target = skeletonData.bones[input.readInt(true)];\r\n\t\t\tdata.local = input.readBoolean();\r\n\t\t\tdata.relative = input.readBoolean();\r\n\t\t\tdata.offsetRotation = input.readFloat();\r\n\t\t\tdata.offsetX = input.readFloat() * scale;\r\n\t\t\tdata.offsetY = input.readFloat() * scale;\r\n\t\t\tdata.offsetScaleX = input.readFloat();\r\n\t\t\tdata.offsetScaleY = input.readFloat();\r\n\t\t\tdata.offsetShearY = input.readFloat();\r\n\t\t\tdata.mixRotate = input.readFloat();\r\n\t\t\tdata.mixX = input.readFloat();\r\n\t\t\tdata.mixY = input.readFloat();\r\n\t\t\tdata.mixScaleX = input.readFloat();\r\n\t\t\tdata.mixScaleY = input.readFloat();\r\n\t\t\tdata.mixShearY = input.readFloat();\r\n\t\t\tskeletonData.transformConstraints.push(data);\r\n\t\t}\r\n\r\n\t\t// Path constraints.\r\n\t\tn = input.readInt(true);\r\n\t\tfor (let i = 0, nn; i < n; i++) {\r\n\t\t\tlet name = input.readString();\r\n\t\t\tif (!name) throw new Error(\"Path constraint data name must not be null.\");\r\n\t\t\tlet data = new PathConstraintData(name);\r\n\t\t\tdata.order = input.readInt(true);\r\n\t\t\tdata.skinRequired = input.readBoolean();\r\n\t\t\tnn = input.readInt(true);\r\n\t\t\tfor (let ii = 0; ii < nn; ii++)\r\n\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\r\n\t\t\tdata.target = skeletonData.slots[input.readInt(true)];\r\n\t\t\tdata.positionMode = input.readInt(true);\r\n\t\t\tdata.spacingMode = input.readInt(true);\r\n\t\t\tdata.rotateMode = input.readInt(true);\r\n\t\t\tdata.offsetRotation = input.readFloat();\r\n\t\t\tdata.position = input.readFloat();\r\n\t\t\tif (data.positionMode == PositionMode.Fixed) data.position *= scale;\r\n\t\t\tdata.spacing = input.readFloat();\r\n\t\t\tif (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\r\n\t\t\tdata.mixRotate = input.readFloat();\r\n\t\t\tdata.mixX = input.readFloat();\r\n\t\t\tdata.mixY = input.readFloat();\r\n\t\t\tskeletonData.pathConstraints.push(data);\r\n\t\t}\r\n\r\n\t\t// Default skin.\r\n\t\tlet defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\r\n\t\tif (defaultSkin) {\r\n\t\t\tskeletonData.defaultSkin = defaultSkin;\r\n\t\t\tskeletonData.skins.push(defaultSkin);\r\n\t\t}\r\n\r\n\t\t// Skins.\r\n\t\t{\r\n\t\t\tlet i = skeletonData.skins.length;\r\n\t\t\tUtils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\r\n\t\t\tfor (; i < n; i++) {\r\n\t\t\t\tlet skin = this.readSkin(input, skeletonData, false, nonessential);\r\n\t\t\t\tif (!skin) throw new Error(\"readSkin() should not have returned null.\");\r\n\t\t\t\tskeletonData.skins[i] = skin;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Linked meshes.\r\n\t\tn = this.linkedMeshes.length;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tlet linkedMesh = this.linkedMeshes[i];\r\n\t\t\tlet skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\r\n\t\t\tif (!skin) throw new Error(\"Not skin found for linked mesh.\");\r\n\t\t\tif (!linkedMesh.parent) throw new Error(\"Linked mesh parent must not be null\");\r\n\t\t\tlet parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\r\n\t\t\tif (!parent) throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);\r\n\t\t\tlinkedMesh.mesh.timelineAttachment = linkedMesh.inheritTimeline ? parent as VertexAttachment : linkedMesh.mesh;\r\n\t\t\tlinkedMesh.mesh.setParentMesh(parent as MeshAttachment);\r\n\t\t\tif (linkedMesh.mesh.region != null) linkedMesh.mesh.updateRegion();\r\n\t\t}\r\n\t\tthis.linkedMeshes.length = 0;\r\n\r\n\t\t// Events.\r\n\t\tn = input.readInt(true);\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tlet eventName = input.readStringRef();\r\n\t\t\tif (!eventName) throw new Error\r\n\t\t\tlet data = new EventData(eventName);\r\n\t\t\tdata.intValue = input.readInt(false);\r\n\t\t\tdata.floatValue = input.readFloat();\r\n\t\t\tdata.stringValue = input.readString();\r\n\t\t\tdata.audioPath = input.readString();\r\n\t\t\tif (data.audioPath) {\r\n\t\t\t\tdata.volume = input.readFloat();\r\n\t\t\t\tdata.balance = input.readFloat();\r\n\t\t\t}\r\n\t\t\tskeletonData.events.push(data);\r\n\t\t}\r\n\r\n\t\t// Animations.\r\n\t\tn = input.readInt(true);\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tlet animationName = input.readString();\r\n\t\t\tif (!animationName) throw new Error(\"Animatio name must not be null.\");\r\n\t\t\tskeletonData.animations.push(this.readAnimation(input, animationName, skeletonData));\r\n\t\t}\r\n\t\treturn skeletonData;\r\n\t}\r\n\r\n\tprivate readSkin (input: BinaryInput, skeletonData: SkeletonData, defaultSkin: boolean, nonessential: boolean): Skin | null {\r\n\t\tlet skin = null;\r\n\t\tlet slotCount = 0;\r\n\r\n\t\tif (defaultSkin) {\r\n\t\t\tslotCount = input.readInt(true)\r\n\t\t\tif (slotCount == 0) return null;\r\n\t\t\tskin = new Skin(\"default\");\r\n\t\t} else {\r\n\t\t\tlet skinName = input.readStringRef();\r\n\t\t\tif (!skinName) throw new Error(\"Skin name must not be null.\");\r\n\t\t\tskin = new Skin(skinName);\r\n\t\t\tskin.bones.length = input.readInt(true);\r\n\t\t\tfor (let i = 0, n = skin.bones.length; i < n; i++)\r\n\t\t\t\tskin.bones[i] = skeletonData.bones[input.readInt(true)];\r\n\r\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++)\r\n\t\t\t\tskin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\r\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++)\r\n\t\t\t\tskin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\r\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++)\r\n\t\t\t\tskin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\r\n\r\n\t\t\tslotCount = input.readInt(true);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < slotCount; i++) {\r\n\t\t\tlet slotIndex = input.readInt(true);\r\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n\t\t\t\tlet name = input.readStringRef();\r\n\t\t\t\tif (!name) throw new Error(\"Attachment name must not be null\");\r\n\t\t\t\tlet attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\r\n\t\t\t\tif (attachment) skin.setAttachment(slotIndex, name, attachment);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn skin;\r\n\t}\r\n\r\n\tprivate readAttachment (input: BinaryInput, skeletonData: SkeletonData, skin: Skin, slotIndex: number, attachmentName: string, nonessential: boolean): Attachment | null {\r\n\t\tlet scale = this.scale;\r\n\r\n\t\tlet name = input.readStringRef();\r\n\t\tif (!name) name = attachmentName;\r\n\r\n\t\tswitch (input.readByte()) {\r\n\t\t\tcase AttachmentType.Region: {\r\n\t\t\t\tlet path = input.readStringRef();\r\n\t\t\t\tlet rotation = input.readFloat();\r\n\t\t\t\tlet x = input.readFloat();\r\n\t\t\t\tlet y = input.readFloat();\r\n\t\t\t\tlet scaleX = input.readFloat();\r\n\t\t\t\tlet scaleY = input.readFloat();\r\n\t\t\t\tlet width = input.readFloat();\r\n\t\t\t\tlet height = input.readFloat();\r\n\t\t\t\tlet color = input.readInt32();\r\n\t\t\t\tlet sequence = this.readSequence(input);\r\n\r\n\t\t\t\tif (!path) path = name;\r\n\t\t\t\tlet region = this.attachmentLoader.newRegionAttachment(skin, name, path, sequence);\r\n\t\t\t\tif (!region) return null;\r\n\t\t\t\tregion.path = path;\r\n\t\t\t\tregion.x = x * scale;\r\n\t\t\t\tregion.y = y * scale;\r\n\t\t\t\tregion.scaleX = scaleX;\r\n\t\t\t\tregion.scaleY = scaleY;\r\n\t\t\t\tregion.rotation = rotation;\r\n\t\t\t\tregion.width = width * scale;\r\n\t\t\t\tregion.height = height * scale;\r\n\t\t\t\tColor.rgba8888ToColor(region.color, color);\r\n\t\t\t\tregion.sequence = sequence;\r\n\t\t\t\tif (sequence == null) region.updateRegion();\r\n\t\t\t\treturn region;\r\n\t\t\t}\r\n\t\t\tcase AttachmentType.BoundingBox: {\r\n\t\t\t\tlet vertexCount = input.readInt(true);\r\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\r\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\r\n\r\n\t\t\t\tlet box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n\t\t\t\tif (!box) return null;\r\n\t\t\t\tbox.worldVerticesLength = vertexCount << 1;\r\n\t\t\t\tbox.vertices = vertices.vertices!;\r\n\t\t\t\tbox.bones = vertices.bones;\r\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(box.color, color);\r\n\t\t\t\treturn box;\r\n\t\t\t}\r\n\t\t\tcase AttachmentType.Mesh: {\r\n\t\t\t\tlet path = input.readStringRef();\r\n\t\t\t\tlet color = input.readInt32();\r\n\t\t\t\tlet vertexCount = input.readInt(true);\r\n\t\t\t\tlet uvs = this.readFloatArray(input, vertexCount << 1, 1);\r\n\t\t\t\tlet triangles = this.readShortArray(input);\r\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\r\n\t\t\t\tlet hullLength = input.readInt(true);\r\n\t\t\t\tlet sequence = this.readSequence(input);\r\n\t\t\t\tlet edges: number[] = [];\r\n\t\t\t\tlet width = 0, height = 0;\r\n\t\t\t\tif (nonessential) {\r\n\t\t\t\t\tedges = this.readShortArray(input);\r\n\t\t\t\t\twidth = input.readFloat();\r\n\t\t\t\t\theight = input.readFloat();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) path = name;\r\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);\r\n\t\t\t\tif (!mesh) return null;\r\n\t\t\t\tmesh.path = path;\r\n\t\t\t\tColor.rgba8888ToColor(mesh.color, color);\r\n\t\t\t\tmesh.bones = vertices.bones;\r\n\t\t\t\tmesh.vertices = vertices.vertices!;\r\n\t\t\t\tmesh.worldVerticesLength = vertexCount << 1;\r\n\t\t\t\tmesh.triangles = triangles;\r\n\t\t\t\tmesh.regionUVs = uvs;\r\n\t\t\t\tif (sequence == null) mesh.updateRegion();\r\n\t\t\t\tmesh.hullLength = hullLength << 1;\r\n\t\t\t\tmesh.sequence = sequence;\r\n\t\t\t\tif (nonessential) {\r\n\t\t\t\t\tmesh.edges = edges;\r\n\t\t\t\t\tmesh.width = width * scale;\r\n\t\t\t\t\tmesh.height = height * scale;\r\n\t\t\t\t}\r\n\t\t\t\treturn mesh;\r\n\t\t\t}\r\n\t\t\tcase AttachmentType.LinkedMesh: {\r\n\t\t\t\tlet path = input.readStringRef();\r\n\t\t\t\tlet color = input.readInt32();\r\n\t\t\t\tlet skinName = input.readStringRef();\r\n\t\t\t\tlet parent = input.readStringRef();\r\n\t\t\t\tlet inheritTimelines = input.readBoolean();\r\n\t\t\t\tlet sequence = this.readSequence(input);\r\n\t\t\t\tlet width = 0, height = 0;\r\n\t\t\t\tif (nonessential) {\r\n\t\t\t\t\twidth = input.readFloat();\r\n\t\t\t\t\theight = input.readFloat();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) path = name;\r\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);\r\n\t\t\t\tif (!mesh) return null;\r\n\t\t\t\tmesh.path = path;\r\n\t\t\t\tColor.rgba8888ToColor(mesh.color, color);\r\n\t\t\t\tmesh.sequence = sequence;\r\n\t\t\t\tif (nonessential) {\r\n\t\t\t\t\tmesh.width = width * scale;\r\n\t\t\t\t\tmesh.height = height * scale;\r\n\t\t\t\t}\r\n\t\t\t\tthis.linkedMeshes.push(new LinkedMesh(mesh, skinName, slotIndex, parent, inheritTimelines));\r\n\t\t\t\treturn mesh;\r\n\t\t\t}\r\n\t\t\tcase AttachmentType.Path: {\r\n\t\t\t\tlet closed = input.readBoolean();\r\n\t\t\t\tlet constantSpeed = input.readBoolean();\r\n\t\t\t\tlet vertexCount = input.readInt(true);\r\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\r\n\t\t\t\tlet lengths = Utils.newArray(vertexCount / 3, 0);\r\n\t\t\t\tfor (let i = 0, n = lengths.length; i < n; i++)\r\n\t\t\t\t\tlengths[i] = input.readFloat() * scale;\r\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\r\n\r\n\t\t\t\tlet path = this.attachmentLoader.newPathAttachment(skin, name);\r\n\t\t\t\tif (!path) return null;\r\n\t\t\t\tpath.closed = closed;\r\n\t\t\t\tpath.constantSpeed = constantSpeed;\r\n\t\t\t\tpath.worldVerticesLength = vertexCount << 1;\r\n\t\t\t\tpath.vertices = vertices.vertices!;\r\n\t\t\t\tpath.bones = vertices.bones;\r\n\t\t\t\tpath.lengths = lengths;\r\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(path.color, color);\r\n\t\t\t\treturn path;\r\n\t\t\t}\r\n\t\t\tcase AttachmentType.Point: {\r\n\t\t\t\tlet rotation = input.readFloat();\r\n\t\t\t\tlet x = input.readFloat();\r\n\t\t\t\tlet y = input.readFloat();\r\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\r\n\r\n\t\t\t\tlet point = this.attachmentLoader.newPointAttachment(skin, name);\r\n\t\t\t\tif (!point) return null;\r\n\t\t\t\tpoint.x = x * scale;\r\n\t\t\t\tpoint.y = y * scale;\r\n\t\t\t\tpoint.rotation = rotation;\r\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(point.color, color);\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\t\t\tcase AttachmentType.Clipping: {\r\n\t\t\t\tlet endSlotIndex = input.readInt(true);\r\n\t\t\t\tlet vertexCount = input.readInt(true);\r\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\r\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\r\n\r\n\t\t\t\tlet clip = this.attachmentLoader.newClippingAttachment(skin, name);\r\n\t\t\t\tif (!clip) return null;\r\n\t\t\t\tclip.endSlot = skeletonData.slots[endSlotIndex];\r\n\t\t\t\tclip.worldVerticesLength = vertexCount << 1;\r\n\t\t\t\tclip.vertices = vertices.vertices!;\r\n\t\t\t\tclip.bones = vertices.bones;\r\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(clip.color, color);\r\n\t\t\t\treturn clip;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate readSequence (input: BinaryInput) {\r\n\t\tif (!input.readBoolean()) return null;\r\n\t\tlet sequence = new Sequence(input.readInt(true));\r\n\t\tsequence.start = input.readInt(true);\r\n\t\tsequence.digits = input.readInt(true);\r\n\t\tsequence.setupIndex = input.readInt(true);\r\n\t\treturn sequence;\r\n\t}\r\n\r\n\tprivate readVertices (input: BinaryInput, vertexCount: number): Vertices {\r\n\t\tlet scale = this.scale;\r\n\t\tlet verticesLength = vertexCount << 1;\r\n\t\tlet vertices = new Vertices();\r\n\t\tif (!input.readBoolean()) {\r\n\t\t\tvertices.vertices = this.readFloatArray(input, verticesLength, scale);\r\n\t\t\treturn vertices;\r\n\t\t}\r\n\t\tlet weights = new Array<number>();\r\n\t\tlet bonesArray = new Array<number>();\r\n\t\tfor (let i = 0; i < vertexCount; i++) {\r\n\t\t\tlet boneCount = input.readInt(true);\r\n\t\t\tbonesArray.push(boneCount);\r\n\t\t\tfor (let ii = 0; ii < boneCount; ii++) {\r\n\t\t\t\tbonesArray.push(input.readInt(true));\r\n\t\t\t\tweights.push(input.readFloat() * scale);\r\n\t\t\t\tweights.push(input.readFloat() * scale);\r\n\t\t\t\tweights.push(input.readFloat());\r\n\t\t\t}\r\n\t\t}\r\n\t\tvertices.vertices = Utils.toFloatArray(weights);\r\n\t\tvertices.bones = bonesArray;\r\n\t\treturn vertices;\r\n\t}\r\n\r\n\tprivate readFloatArray (input: BinaryInput, n: number, scale: number): number[] {\r\n\t\tlet array = new Array<number>(n);\r\n\t\tif (scale == 1) {\r\n\t\t\tfor (let i = 0; i < n; i++)\r\n\t\t\t\tarray[i] = input.readFloat();\r\n\t\t} else {\r\n\t\t\tfor (let i = 0; i < n; i++)\r\n\t\t\t\tarray[i] = input.readFloat() * scale;\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\tprivate readShortArray (input: BinaryInput): number[] {\r\n\t\tlet n = input.readInt(true);\r\n\t\tlet array = new Array<number>(n);\r\n\t\tfor (let i = 0; i < n; i++)\r\n\t\t\tarray[i] = input.readShort();\r\n\t\treturn array;\r\n\t}\r\n\r\n\tprivate readAnimation (input: BinaryInput, name: string, skeletonData: SkeletonData): Animation {\r\n\t\tinput.readInt(true); // Number of timelines.\r\n\t\tlet timelines = new Array<Timeline>();\r\n\t\tlet scale = this.scale;\r\n\t\tlet tempColor1 = new Color();\r\n\t\tlet tempColor2 = new Color();\r\n\r\n\t\t// Slot timelines.\r\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\r\n\t\t\tlet slotIndex = input.readInt(true);\r\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n\t\t\t\tlet timelineType = input.readByte();\r\n\t\t\t\tlet frameCount = input.readInt(true);\r\n\t\t\t\tlet frameLast = frameCount - 1;\r\n\t\t\t\tswitch (timelineType) {\r\n\t\t\t\t\tcase SLOT_ATTACHMENT: {\r\n\t\t\t\t\t\tlet timeline = new AttachmentTimeline(frameCount, slotIndex);\r\n\t\t\t\t\t\tfor (let frame = 0; frame < frameCount; frame++)\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, input.readFloat(), input.readStringRef());\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase SLOT_RGBA: {\r\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\r\n\t\t\t\t\t\tlet timeline = new RGBATimeline(frameCount, bezierCount, slotIndex);\r\n\r\n\t\t\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet a = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b, a);\r\n\t\t\t\t\t\t\tif (frame == frameLast) break;\r\n\r\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\r\n\t\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet a2 = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, a, a2, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tr = r2;\r\n\t\t\t\t\t\t\tg = g2;\r\n\t\t\t\t\t\t\tb = b2;\r\n\t\t\t\t\t\t\ta = a2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase SLOT_RGB: {\r\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\r\n\t\t\t\t\t\tlet timeline = new RGBTimeline(frameCount, bezierCount, slotIndex);\r\n\r\n\t\t\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b);\r\n\t\t\t\t\t\t\tif (frame == frameLast) break;\r\n\r\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\r\n\t\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tr = r2;\r\n\t\t\t\t\t\t\tg = g2;\r\n\t\t\t\t\t\t\tb = b2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase SLOT_RGBA2: {\r\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\r\n\t\t\t\t\t\tlet timeline = new RGBA2Timeline(frameCount, bezierCount, slotIndex);\r\n\r\n\t\t\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet a = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b, a, r2, g2, b2);\r\n\t\t\t\t\t\t\tif (frame == frameLast) break;\r\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\r\n\t\t\t\t\t\t\tlet nr = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet ng = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet nb = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet na = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet nr2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet ng2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet nb2 = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, a, na, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 4, time, time2, r2, nr2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 5, time, time2, g2, ng2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 6, time, time2, b2, nb2, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tr = nr;\r\n\t\t\t\t\t\t\tg = ng;\r\n\t\t\t\t\t\t\tb = nb;\r\n\t\t\t\t\t\t\ta = na;\r\n\t\t\t\t\t\t\tr2 = nr2;\r\n\t\t\t\t\t\t\tg2 = ng2;\r\n\t\t\t\t\t\t\tb2 = nb2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase SLOT_RGB2: {\r\n\t\t\t\t\t\tlet bezierCount = input.readInt(true);\r\n\t\t\t\t\t\tlet timeline = new RGB2Timeline(frameCount, bezierCount, slotIndex);\r\n\r\n\t\t\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\t\t\tlet r = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet g = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet b = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet r2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet g2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\tlet b2 = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, r, g, b, r2, g2, b2);\r\n\t\t\t\t\t\t\tif (frame == frameLast) break;\r\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\r\n\t\t\t\t\t\t\tlet nr = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet ng = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet nb = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet nr2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet ng2 = input.readUnsignedByte() / 255.0;\r\n\t\t\t\t\t\t\tlet nb2 = input.readUnsignedByte() / 255.0;\r\n\r\n\t\t\t\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, r2, nr2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 4, time, time2, g2, ng2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 5, time, time2, b2, nb2, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tr = nr;\r\n\t\t\t\t\t\t\tg = ng;\r\n\t\t\t\t\t\t\tb = nb;\r\n\t\t\t\t\t\t\tr2 = nr2;\r\n\t\t\t\t\t\t\tg2 = ng2;\r\n\t\t\t\t\t\t\tb2 = nb2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase SLOT_ALPHA: {\r\n\t\t\t\t\t\tlet timeline = new AlphaTimeline(frameCount, input.readInt(true), slotIndex);\r\n\t\t\t\t\t\tlet time = input.readFloat(), a = input.readUnsignedByte() / 255;\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, a);\r\n\t\t\t\t\t\t\tif (frame == frameLast) break;\r\n\t\t\t\t\t\t\tlet time2 = input.readFloat();\r\n\t\t\t\t\t\t\tlet a2 = input.readUnsignedByte() / 255;\r\n\t\t\t\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, a, a2, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\ta = a2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Bone timelines.\r\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\r\n\t\t\tlet boneIndex = input.readInt(true);\r\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n\t\t\t\tlet type = input.readByte(), frameCount = input.readInt(true), bezierCount = input.readInt(true);\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase BONE_ROTATE:\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new RotateTimeline(frameCount, bezierCount, boneIndex), 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_TRANSLATE:\r\n\t\t\t\t\t\ttimelines.push(readTimeline2(input, new TranslateTimeline(frameCount, bezierCount, boneIndex), scale));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_TRANSLATEX:\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new TranslateXTimeline(frameCount, bezierCount, boneIndex), scale));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_TRANSLATEY:\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new TranslateYTimeline(frameCount, bezierCount, boneIndex), scale));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_SCALE:\r\n\t\t\t\t\t\ttimelines.push(readTimeline2(input, new ScaleTimeline(frameCount, bezierCount, boneIndex), 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_SCALEX:\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ScaleXTimeline(frameCount, bezierCount, boneIndex), 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_SCALEY:\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ScaleYTimeline(frameCount, bezierCount, boneIndex), 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_SHEAR:\r\n\t\t\t\t\t\ttimelines.push(readTimeline2(input, new ShearTimeline(frameCount, bezierCount, boneIndex), 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_SHEARX:\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ShearXTimeline(frameCount, bezierCount, boneIndex), 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase BONE_SHEARY:\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(input, new ShearYTimeline(frameCount, bezierCount, boneIndex), 1));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// IK constraint timelines.\r\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\r\n\t\t\tlet index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\r\n\t\t\tlet timeline = new IkConstraintTimeline(frameCount, input.readInt(true), index);\r\n\t\t\tlet time = input.readFloat(), mix = input.readFloat(), softness = input.readFloat() * scale;\r\n\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\ttimeline.setFrame(frame, time, mix, softness, input.readByte(), input.readBoolean(), input.readBoolean());\r\n\t\t\t\tif (frame == frameLast) break;\r\n\t\t\t\tlet time2 = input.readFloat(), mix2 = input.readFloat(), softness2 = input.readFloat() * scale;\r\n\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, mix, mix2, 1);\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, softness, softness2, scale);\r\n\t\t\t\t}\r\n\t\t\t\ttime = time2;\r\n\t\t\t\tmix = mix2;\r\n\t\t\t\tsoftness = softness2;\r\n\t\t\t}\r\n\t\t\ttimelines.push(timeline);\r\n\t\t}\r\n\r\n\t\t// Transform constraint timelines.\r\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\r\n\t\t\tlet index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\r\n\t\t\tlet timeline = new TransformConstraintTimeline(frameCount, input.readInt(true), index);\r\n\t\t\tlet time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat(),\r\n\t\t\t\tmixScaleX = input.readFloat(), mixScaleY = input.readFloat(), mixShearY = input.readFloat();\r\n\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\r\n\t\t\t\tif (frame == frameLast) break;\r\n\t\t\t\tlet time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat(),\r\n\t\t\t\t\tmixScaleX2 = input.readFloat(), mixScaleY2 = input.readFloat(), mixShearY2 = input.readFloat();\r\n\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\r\n\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 5, time, time2, mixShearY, mixShearY2, 1);\r\n\t\t\t\t}\r\n\t\t\t\ttime = time2;\r\n\t\t\t\tmixRotate = mixRotate2;\r\n\t\t\t\tmixX = mixX2;\r\n\t\t\t\tmixY = mixY2;\r\n\t\t\t\tmixScaleX = mixScaleX2;\r\n\t\t\t\tmixScaleY = mixScaleY2;\r\n\t\t\t\tmixShearY = mixShearY2;\r\n\t\t\t}\r\n\t\t\ttimelines.push(timeline);\r\n\t\t}\r\n\r\n\t\t// Path constraint timelines.\r\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\r\n\t\t\tlet index = input.readInt(true);\r\n\t\t\tlet data = skeletonData.pathConstraints[index];\r\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\tcase PATH_POSITION:\r\n\t\t\t\t\t\ttimelines\r\n\t\t\t\t\t\t\t.push(readTimeline1(input, new PathConstraintPositionTimeline(input.readInt(true), input.readInt(true), index),\r\n\t\t\t\t\t\t\t\tdata.positionMode == PositionMode.Fixed ? scale : 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase PATH_SPACING:\r\n\t\t\t\t\t\ttimelines\r\n\t\t\t\t\t\t\t.push(readTimeline1(input, new PathConstraintSpacingTimeline(input.readInt(true), input.readInt(true), index),\r\n\t\t\t\t\t\t\t\tdata.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed ? scale : 1));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase PATH_MIX:\r\n\t\t\t\t\t\tlet timeline = new PathConstraintMixTimeline(input.readInt(true), input.readInt(true), index);\r\n\t\t\t\t\t\tlet time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat();\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY);\r\n\t\t\t\t\t\t\tif (frame == frameLast) break;\r\n\t\t\t\t\t\t\tlet time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(),\r\n\t\t\t\t\t\t\t\tmixY2 = input.readFloat();\r\n\t\t\t\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\r\n\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tmixRotate = mixRotate2;\r\n\t\t\t\t\t\t\tmixX = mixX2;\r\n\t\t\t\t\t\t\tmixY = mixY2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Deform timelines.\r\n\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\r\n\t\t\tlet skin = skeletonData.skins[input.readInt(true)];\r\n\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\r\n\t\t\t\tlet slotIndex = input.readInt(true);\r\n\t\t\t\tfor (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\r\n\t\t\t\t\tlet attachmentName = input.readStringRef();\r\n\t\t\t\t\tif (!attachmentName) throw new Error(\"attachmentName must not be null.\");\r\n\t\t\t\t\tlet attachment = skin.getAttachment(slotIndex, attachmentName);\r\n\t\t\t\t\tlet timelineType = input.readByte();\r\n\t\t\t\t\tlet frameCount = input.readInt(true);\r\n\t\t\t\t\tlet frameLast = frameCount - 1;\r\n\r\n\t\t\t\t\tswitch (timelineType) {\r\n\t\t\t\t\t\tcase ATTACHMENT_DEFORM: {\r\n\t\t\t\t\t\t\tlet vertexAttachment = attachment as VertexAttachment;\r\n\t\t\t\t\t\t\tlet weighted = vertexAttachment.bones;\r\n\t\t\t\t\t\t\tlet vertices = vertexAttachment.vertices;\r\n\t\t\t\t\t\t\tlet deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\r\n\r\n\r\n\t\t\t\t\t\t\tlet bezierCount = input.readInt(true);\r\n\t\t\t\t\t\t\tlet timeline = new DeformTimeline(frameCount, bezierCount, slotIndex, vertexAttachment);\r\n\r\n\t\t\t\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\t\tlet deform;\r\n\t\t\t\t\t\t\t\tlet end = input.readInt(true);\r\n\t\t\t\t\t\t\t\tif (end == 0)\r\n\t\t\t\t\t\t\t\t\tdeform = weighted ? Utils.newFloatArray(deformLength) : vertices;\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tdeform = Utils.newFloatArray(deformLength);\r\n\t\t\t\t\t\t\t\t\tlet start = input.readInt(true);\r\n\t\t\t\t\t\t\t\t\tend += start;\r\n\t\t\t\t\t\t\t\t\tif (scale == 1) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let v = start; v < end; v++)\r\n\t\t\t\t\t\t\t\t\t\t\tdeform[v] = input.readFloat();\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tfor (let v = start; v < end; v++)\r\n\t\t\t\t\t\t\t\t\t\t\tdeform[v] = input.readFloat() * scale;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!weighted) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let v = 0, vn = deform.length; v < vn; v++)\r\n\t\t\t\t\t\t\t\t\t\t\tdeform[v] += vertices[v];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\ttimeline.setFrame(frame, time, deform);\r\n\t\t\t\t\t\t\t\tif (frame == frameLast) break;\r\n\t\t\t\t\t\t\t\tlet time2 = input.readFloat();\r\n\t\t\t\t\t\t\t\tswitch (input.readByte()) {\r\n\t\t\t\t\t\t\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\t\t\t\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\t\t\t\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, 0, 1, 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase ATTACHMENT_SEQUENCE: {\r\n\t\t\t\t\t\t\tlet timeline = new SequenceTimeline(frameCount, slotIndex, attachment as unknown as HasTextureRegion);\r\n\t\t\t\t\t\t\tfor (let frame = 0; frame < frameCount; frame++) {\r\n\t\t\t\t\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\t\t\t\t\tlet modeAndIndex = input.readInt32();\r\n\t\t\t\t\t\t\t\ttimeline.setFrame(frame, time, SequenceModeValues[modeAndIndex & 0xf], modeAndIndex >> 4,\r\n\t\t\t\t\t\t\t\t\tinput.readFloat());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Draw order timeline.\r\n\t\tlet drawOrderCount = input.readInt(true);\r\n\t\tif (drawOrderCount > 0) {\r\n\t\t\tlet timeline = new DrawOrderTimeline(drawOrderCount);\r\n\t\t\tlet slotCount = skeletonData.slots.length;\r\n\t\t\tfor (let i = 0; i < drawOrderCount; i++) {\r\n\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\tlet offsetCount = input.readInt(true);\r\n\t\t\t\tlet drawOrder = Utils.newArray(slotCount, 0);\r\n\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\r\n\t\t\t\t\tdrawOrder[ii] = -1;\r\n\t\t\t\tlet unchanged = Utils.newArray(slotCount - offsetCount, 0);\r\n\t\t\t\tlet originalIndex = 0, unchangedIndex = 0;\r\n\t\t\t\tfor (let ii = 0; ii < offsetCount; ii++) {\r\n\t\t\t\t\tlet slotIndex = input.readInt(true);\r\n\t\t\t\t\t// Collect unchanged items.\r\n\t\t\t\t\twhile (originalIndex != slotIndex)\r\n\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\r\n\t\t\t\t\t// Set changed items.\r\n\t\t\t\t\tdrawOrder[originalIndex + input.readInt(true)] = originalIndex++;\r\n\t\t\t\t}\r\n\t\t\t\t// Collect remaining unchanged items.\r\n\t\t\t\twhile (originalIndex < slotCount)\r\n\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\r\n\t\t\t\t// Fill in unchanged items.\r\n\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\r\n\t\t\t\t\tif (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n\t\t\t\ttimeline.setFrame(i, time, drawOrder);\r\n\t\t\t}\r\n\t\t\ttimelines.push(timeline);\r\n\t\t}\r\n\r\n\t\t// Event timeline.\r\n\t\tlet eventCount = input.readInt(true);\r\n\t\tif (eventCount > 0) {\r\n\t\t\tlet timeline = new EventTimeline(eventCount);\r\n\t\t\tfor (let i = 0; i < eventCount; i++) {\r\n\t\t\t\tlet time = input.readFloat();\r\n\t\t\t\tlet eventData = skeletonData.events[input.readInt(true)];\r\n\t\t\t\tlet event = new Event(time, eventData);\r\n\t\t\t\tevent.intValue = input.readInt(false);\r\n\t\t\t\tevent.floatValue = input.readFloat();\r\n\t\t\t\tevent.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;\r\n\t\t\t\tif (event.data.audioPath) {\r\n\t\t\t\t\tevent.volume = input.readFloat();\r\n\t\t\t\t\tevent.balance = input.readFloat();\r\n\t\t\t\t}\r\n\t\t\t\ttimeline.setFrame(i, event);\r\n\t\t\t}\r\n\t\t\ttimelines.push(timeline);\r\n\t\t}\r\n\r\n\t\tlet duration = 0;\r\n\t\tfor (let i = 0, n = timelines.length; i < n; i++)\r\n\t\t\tduration = Math.max(duration, timelines[i].getDuration());\r\n\t\treturn new Animation(name, timelines, duration);\r\n\t}\r\n}\r\n\r\nexport class BinaryInput {\r\n\tconstructor (data: Uint8Array, public strings = new Array<string>(), private index: number = 0, private buffer = new DataView(data.buffer)) {\r\n\t}\r\n\r\n\treadByte (): number {\r\n\t\treturn this.buffer.getInt8(this.index++);\r\n\t}\r\n\r\n\treadUnsignedByte (): number {\r\n\t\treturn this.buffer.getUint8(this.index++);\r\n\t}\r\n\r\n\treadShort (): number {\r\n\t\tlet value = this.buffer.getInt16(this.index);\r\n\t\tthis.index += 2;\r\n\t\treturn value;\r\n\t}\r\n\r\n\treadInt32 (): number {\r\n\t\tlet value = this.buffer.getInt32(this.index)\r\n\t\tthis.index += 4;\r\n\t\treturn value;\r\n\t}\r\n\r\n\treadInt (optimizePositive: boolean) {\r\n\t\tlet b = this.readByte();\r\n\t\tlet result = b & 0x7F;\r\n\t\tif ((b & 0x80) != 0) {\r\n\t\t\tb = this.readByte();\r\n\t\t\tresult |= (b & 0x7F) << 7;\r\n\t\t\tif ((b & 0x80) != 0) {\r\n\t\t\t\tb = this.readByte();\r\n\t\t\t\tresult |= (b & 0x7F) << 14;\r\n\t\t\t\tif ((b & 0x80) != 0) {\r\n\t\t\t\t\tb = this.readByte();\r\n\t\t\t\t\tresult |= (b & 0x7F) << 21;\r\n\t\t\t\t\tif ((b & 0x80) != 0) {\r\n\t\t\t\t\t\tb = this.readByte();\r\n\t\t\t\t\t\tresult |= (b & 0x7F) << 28;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn optimizePositive ? result : ((result >>> 1) ^ -(result & 1));\r\n\t}\r\n\r\n\treadStringRef (): string | null {\r\n\t\tlet index = this.readInt(true);\r\n\t\treturn index == 0 ? null : this.strings[index - 1];\r\n\t}\r\n\r\n\treadString (): string | null {\r\n\t\tlet byteCount = this.readInt(true);\r\n\t\tswitch (byteCount) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn null;\r\n\t\t\tcase 1:\r\n\t\t\t\treturn \"\";\r\n\t\t}\r\n\t\tbyteCount--;\r\n\t\tlet chars = \"\";\r\n\t\tlet charCount = 0;\r\n\t\tfor (let i = 0; i < byteCount;) {\r\n\t\t\tlet b = this.readUnsignedByte();\r\n\t\t\tswitch (b >> 4) {\r\n\t\t\t\tcase 12:\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tchars += String.fromCharCode(((b & 0x1F) << 6 | this.readByte() & 0x3F));\r\n\t\t\t\t\ti += 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tchars += String.fromCharCode(((b & 0x0F) << 12 | (this.readByte() & 0x3F) << 6 | this.readByte() & 0x3F));\r\n\t\t\t\t\ti += 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tchars += String.fromCharCode(b);\r\n\t\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn chars;\r\n\t}\r\n\r\n\treadFloat (): number {\r\n\t\tlet value = this.buffer.getFloat32(this.index);\r\n\t\tthis.index += 4;\r\n\t\treturn value;\r\n\t}\r\n\r\n\treadBoolean (): boolean {\r\n\t\treturn this.readByte() != 0;\r\n\t}\r\n}\r\n\r\nclass LinkedMesh {\r\n\tparent: string | null; skin: string | null;\r\n\tslotIndex: number;\r\n\tmesh: MeshAttachment;\r\n\tinheritTimeline: boolean;\r\n\r\n\tconstructor (mesh: MeshAttachment, skin: string | null, slotIndex: number, parent: string | null, inheritDeform: boolean) {\r\n\t\tthis.mesh = mesh;\r\n\t\tthis.skin = skin;\r\n\t\tthis.slotIndex = slotIndex;\r\n\t\tthis.parent = parent;\r\n\t\tthis.inheritTimeline = inheritDeform;\r\n\t}\r\n}\r\n\r\nclass Vertices {\r\n\tconstructor (public bones: Array<number> | null = null, public vertices: Array<number> | Float32Array | null = null) { }\r\n}\r\n\r\nenum AttachmentType { Region, BoundingBox, Mesh, LinkedMesh, Path, Point, Clipping }\r\n\r\nfunction readTimeline1 (input: BinaryInput, timeline: CurveTimeline1, scale: number): CurveTimeline1 {\r\n\tlet time = input.readFloat(), value = input.readFloat() * scale;\r\n\tfor (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\r\n\t\ttimeline.setFrame(frame, time, value);\r\n\t\tif (frame == frameLast) break;\r\n\t\tlet time2 = input.readFloat(), value2 = input.readFloat() * scale;\r\n\t\tswitch (input.readByte()) {\r\n\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, value, value2, scale);\r\n\t\t}\r\n\t\ttime = time2;\r\n\t\tvalue = value2;\r\n\t}\r\n\treturn timeline;\r\n}\r\n\r\nfunction readTimeline2 (input: BinaryInput, timeline: CurveTimeline2, scale: number): CurveTimeline2 {\r\n\tlet time = input.readFloat(), value1 = input.readFloat() * scale, value2 = input.readFloat() * scale;\r\n\tfor (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1; ; frame++) {\r\n\t\ttimeline.setFrame(frame, time, value1, value2);\r\n\t\tif (frame == frameLast) break;\r\n\t\tlet time2 = input.readFloat(), nvalue1 = input.readFloat() * scale, nvalue2 = input.readFloat() * scale;\r\n\t\tswitch (input.readByte()) {\r\n\t\t\tcase CURVE_STEPPED:\r\n\t\t\t\ttimeline.setStepped(frame);\r\n\t\t\t\tbreak;\r\n\t\t\tcase CURVE_BEZIER:\r\n\t\t\t\tsetBezier(input, timeline, bezier++, frame, 0, time, time2, value1, nvalue1, scale);\r\n\t\t\t\tsetBezier(input, timeline, bezier++, frame, 1, time, time2, value2, nvalue2, scale);\r\n\t\t}\r\n\t\ttime = time2;\r\n\t\tvalue1 = nvalue1;\r\n\t\tvalue2 = nvalue2;\r\n\t}\r\n\treturn timeline;\r\n}\r\n\r\nfunction setBezier (input: BinaryInput, timeline: CurveTimeline, bezier: number, frame: number, value: number,\r\n\ttime1: number, time2: number, value1: number, value2: number, scale: number) {\r\n\ttimeline.setBezier(bezier, frame, value, time1, value1, input.readFloat(), input.readFloat() * scale, input.readFloat(), input.readFloat() * scale, time2, value2);\r\n}\r\n\r\nconst BONE_ROTATE = 0;\r\nconst BONE_TRANSLATE = 1;\r\nconst BONE_TRANSLATEX = 2;\r\nconst BONE_TRANSLATEY = 3;\r\nconst BONE_SCALE = 4;\r\nconst BONE_SCALEX = 5;\r\nconst BONE_SCALEY = 6;\r\nconst BONE_SHEAR = 7;\r\nconst BONE_SHEARX = 8;\r\nconst BONE_SHEARY = 9;\r\n\r\nconst SLOT_ATTACHMENT = 0;\r\nconst SLOT_RGBA = 1;\r\nconst SLOT_RGB = 2;\r\nconst SLOT_RGBA2 = 3;\r\nconst SLOT_RGB2 = 4;\r\nconst SLOT_ALPHA = 5;\r\n\r\nconst ATTACHMENT_DEFORM = 0;\r\nconst ATTACHMENT_SEQUENCE = 1;\r\n\r\nconst PATH_POSITION = 0;\r\nconst PATH_SPACING = 1;\r\nconst PATH_MIX = 2;\r\n\r\nconst CURVE_LINEAR = 0;\r\nconst CURVE_STEPPED = 1;\r\nconst CURVE_BEZIER = 2;\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { BoundingBoxAttachment } from \"./attachments/BoundingBoxAttachment.js\";\r\nimport { Skeleton } from \"./Skeleton.js\";\r\nimport { NumberArrayLike, Pool, Utils } from \"./Utils.js\";\r\n\r\n/** Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\r\n * provided along with convenience methods for doing hit detection. */\r\nexport class SkeletonBounds {\r\n\r\n\t/** The left edge of the axis aligned bounding box. */\r\n\tminX = 0;\r\n\r\n\t/** The bottom edge of the axis aligned bounding box. */\r\n\tminY = 0;\r\n\r\n\t/** The right edge of the axis aligned bounding box. */\r\n\tmaxX = 0;\r\n\r\n\t/** The top edge of the axis aligned bounding box. */\r\n\tmaxY = 0;\r\n\r\n\t/** The visible bounding boxes. */\r\n\tboundingBoxes = new Array<BoundingBoxAttachment>();\r\n\r\n\t/** The world vertices for the bounding box polygons. */\r\n\tpolygons = new Array<NumberArrayLike>();\r\n\r\n\tprivate polygonPool = new Pool<NumberArrayLike>(() => {\r\n\t\treturn Utils.newFloatArray(16);\r\n\t});\r\n\r\n\t/** Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\r\n\t * box's polygon.\r\n\t * @param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the\r\n\t *           SkeletonBounds AABB methods will always return true. */\r\n\tupdate (skeleton: Skeleton, updateAabb: boolean) {\r\n\t\tif (!skeleton) throw new Error(\"skeleton cannot be null.\");\r\n\t\tlet boundingBoxes = this.boundingBoxes;\r\n\t\tlet polygons = this.polygons;\r\n\t\tlet polygonPool = this.polygonPool;\r\n\t\tlet slots = skeleton.slots;\r\n\t\tlet slotCount = slots.length;\r\n\r\n\t\tboundingBoxes.length = 0;\r\n\t\tpolygonPool.freeAll(polygons);\r\n\t\tpolygons.length = 0;\r\n\r\n\t\tfor (let i = 0; i < slotCount; i++) {\r\n\t\t\tlet slot = slots[i];\r\n\t\t\tif (!slot.bone.active) continue;\r\n\t\t\tlet attachment = slot.getAttachment();\r\n\t\t\tif (attachment instanceof BoundingBoxAttachment) {\r\n\t\t\t\tlet boundingBox = attachment as BoundingBoxAttachment;\r\n\t\t\t\tboundingBoxes.push(boundingBox);\r\n\r\n\t\t\t\tlet polygon = polygonPool.obtain();\r\n\t\t\t\tif (polygon.length != boundingBox.worldVerticesLength) {\r\n\t\t\t\t\tpolygon = Utils.newFloatArray(boundingBox.worldVerticesLength);\r\n\t\t\t\t}\r\n\t\t\t\tpolygons.push(polygon);\r\n\t\t\t\tboundingBox.computeWorldVertices(slot, 0, boundingBox.worldVerticesLength, polygon, 0, 2);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (updateAabb) {\r\n\t\t\tthis.aabbCompute();\r\n\t\t} else {\r\n\t\t\tthis.minX = Number.POSITIVE_INFINITY;\r\n\t\t\tthis.minY = Number.POSITIVE_INFINITY;\r\n\t\t\tthis.maxX = Number.NEGATIVE_INFINITY;\r\n\t\t\tthis.maxY = Number.NEGATIVE_INFINITY;\r\n\t\t}\r\n\t}\r\n\r\n\taabbCompute () {\r\n\t\tlet minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\r\n\t\tlet polygons = this.polygons;\r\n\t\tfor (let i = 0, n = polygons.length; i < n; i++) {\r\n\t\t\tlet polygon = polygons[i];\r\n\t\t\tlet vertices = polygon;\r\n\t\t\tfor (let ii = 0, nn = polygon.length; ii < nn; ii += 2) {\r\n\t\t\t\tlet x = vertices[ii];\r\n\t\t\t\tlet y = vertices[ii + 1];\r\n\t\t\t\tminX = Math.min(minX, x);\r\n\t\t\t\tminY = Math.min(minY, y);\r\n\t\t\t\tmaxX = Math.max(maxX, x);\r\n\t\t\t\tmaxY = Math.max(maxY, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.minX = minX;\r\n\t\tthis.minY = minY;\r\n\t\tthis.maxX = maxX;\r\n\t\tthis.maxY = maxY;\r\n\t}\r\n\r\n\t/** Returns true if the axis aligned bounding box contains the point. */\r\n\taabbContainsPoint (x: number, y: number) {\r\n\t\treturn x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n\t}\r\n\r\n\t/** Returns true if the axis aligned bounding box intersects the line segment. */\r\n\taabbIntersectsSegment (x1: number, y1: number, x2: number, y2: number) {\r\n\t\tlet minX = this.minX;\r\n\t\tlet minY = this.minY;\r\n\t\tlet maxX = this.maxX;\r\n\t\tlet maxY = this.maxY;\r\n\t\tif ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n\t\t\treturn false;\r\n\t\tlet m = (y2 - y1) / (x2 - x1);\r\n\t\tlet y = m * (minX - x1) + y1;\r\n\t\tif (y > minY && y < maxY) return true;\r\n\t\ty = m * (maxX - x1) + y1;\r\n\t\tif (y > minY && y < maxY) return true;\r\n\t\tlet x = (minY - y1) / m + x1;\r\n\t\tif (x > minX && x < maxX) return true;\r\n\t\tx = (maxY - y1) / m + x1;\r\n\t\tif (x > minX && x < maxX) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n\taabbIntersectsSkeleton (bounds: SkeletonBounds) {\r\n\t\treturn this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n\t}\r\n\r\n\t/** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n\t * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n\tcontainsPoint (x: number, y: number): BoundingBoxAttachment | null {\r\n\t\tlet polygons = this.polygons;\r\n\t\tfor (let i = 0, n = polygons.length; i < n; i++)\r\n\t\t\tif (this.containsPointPolygon(polygons[i], x, y)) return this.boundingBoxes[i];\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Returns true if the polygon contains the point. */\r\n\tcontainsPointPolygon (polygon: NumberArrayLike, x: number, y: number) {\r\n\t\tlet vertices = polygon;\r\n\t\tlet nn = polygon.length;\r\n\r\n\t\tlet prevIndex = nn - 2;\r\n\t\tlet inside = false;\r\n\t\tfor (let ii = 0; ii < nn; ii += 2) {\r\n\t\t\tlet vertexY = vertices[ii + 1];\r\n\t\t\tlet prevY = vertices[prevIndex + 1];\r\n\t\t\tif ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {\r\n\t\t\t\tlet vertexX = vertices[ii];\r\n\t\t\t\tif (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) inside = !inside;\r\n\t\t\t}\r\n\t\t\tprevIndex = ii;\r\n\t\t}\r\n\t\treturn inside;\r\n\t}\r\n\r\n\t/** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\r\n\t * is usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns\r\n\t * true. */\r\n\tintersectsSegment (x1: number, y1: number, x2: number, y2: number) {\r\n\t\tlet polygons = this.polygons;\r\n\t\tfor (let i = 0, n = polygons.length; i < n; i++)\r\n\t\t\tif (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/** Returns true if the polygon contains any part of the line segment. */\r\n\tintersectsSegmentPolygon (polygon: NumberArrayLike, x1: number, y1: number, x2: number, y2: number) {\r\n\t\tlet vertices = polygon;\r\n\t\tlet nn = polygon.length;\r\n\r\n\t\tlet width12 = x1 - x2, height12 = y1 - y2;\r\n\t\tlet det1 = x1 * y2 - y1 * x2;\r\n\t\tlet x3 = vertices[nn - 2], y3 = vertices[nn - 1];\r\n\t\tfor (let ii = 0; ii < nn; ii += 2) {\r\n\t\t\tlet x4 = vertices[ii], y4 = vertices[ii + 1];\r\n\t\t\tlet det2 = x3 * y4 - y3 * x4;\r\n\t\t\tlet width34 = x3 - x4, height34 = y3 - y4;\r\n\t\t\tlet det3 = width12 * height34 - height12 * width34;\r\n\t\t\tlet x = (det1 * width34 - width12 * det2) / det3;\r\n\t\t\tif (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {\r\n\t\t\t\tlet y = (det1 * height34 - height12 * det2) / det3;\r\n\t\t\t\tif (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n\t\t\t}\r\n\t\t\tx3 = x4;\r\n\t\t\ty3 = y4;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** Returns the polygon for the specified bounding box, or null. */\r\n\tgetPolygon (boundingBox: BoundingBoxAttachment) {\r\n\t\tif (!boundingBox) throw new Error(\"boundingBox cannot be null.\");\r\n\t\tlet index = this.boundingBoxes.indexOf(boundingBox);\r\n\t\treturn index == -1 ? null : this.polygons[index];\r\n\t}\r\n\r\n\t/** The width of the axis aligned bounding box. */\r\n\tgetWidth () {\r\n\t\treturn this.maxX - this.minX;\r\n\t}\r\n\r\n\t/** The height of the axis aligned bounding box. */\r\n\tgetHeight () {\r\n\t\treturn this.maxY - this.minY;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { NumberArrayLike, Pool } from \"./Utils.js\";\r\n\r\nexport class Triangulator {\r\n\tprivate convexPolygons = new Array<Array<number>>();\r\n\tprivate convexPolygonsIndices = new Array<Array<number>>();\r\n\r\n\tprivate indicesArray = new Array<number>();\r\n\tprivate isConcaveArray = new Array<boolean>();\r\n\tprivate triangles = new Array<number>();\r\n\r\n\tprivate polygonPool = new Pool<Array<number>>(() => {\r\n\t\treturn new Array<number>();\r\n\t});\r\n\r\n\tprivate polygonIndicesPool = new Pool<Array<number>>(() => {\r\n\t\treturn new Array<number>();\r\n\t});\r\n\r\n\tpublic triangulate (verticesArray: NumberArrayLike): Array<number> {\r\n\t\tlet vertices = verticesArray;\r\n\t\tlet vertexCount = verticesArray.length >> 1;\r\n\r\n\t\tlet indices = this.indicesArray;\r\n\t\tindices.length = 0;\r\n\t\tfor (let i = 0; i < vertexCount; i++)\r\n\t\t\tindices[i] = i;\r\n\r\n\t\tlet isConcave = this.isConcaveArray;\r\n\t\tisConcave.length = 0;\r\n\t\tfor (let i = 0, n = vertexCount; i < n; ++i)\r\n\t\t\tisConcave[i] = Triangulator.isConcave(i, vertexCount, vertices, indices);\r\n\r\n\t\tlet triangles = this.triangles;\r\n\t\ttriangles.length = 0;\r\n\r\n\t\twhile (vertexCount > 3) {\r\n\t\t\t// Find ear tip.\r\n\t\t\tlet previous = vertexCount - 1, i = 0, next = 1;\r\n\t\t\twhile (true) {\r\n\t\t\t\touter:\r\n\t\t\t\tif (!isConcave[i]) {\r\n\t\t\t\t\tlet p1 = indices[previous] << 1, p2 = indices[i] << 1, p3 = indices[next] << 1;\r\n\t\t\t\t\tlet p1x = vertices[p1], p1y = vertices[p1 + 1];\r\n\t\t\t\t\tlet p2x = vertices[p2], p2y = vertices[p2 + 1];\r\n\t\t\t\t\tlet p3x = vertices[p3], p3y = vertices[p3 + 1];\r\n\t\t\t\t\tfor (let ii = (next + 1) % vertexCount; ii != previous; ii = (ii + 1) % vertexCount) {\r\n\t\t\t\t\t\tif (!isConcave[ii]) continue;\r\n\t\t\t\t\t\tlet v = indices[ii] << 1;\r\n\t\t\t\t\t\tlet vx = vertices[v], vy = vertices[v + 1];\r\n\t\t\t\t\t\tif (Triangulator.positiveArea(p3x, p3y, p1x, p1y, vx, vy)) {\r\n\t\t\t\t\t\t\tif (Triangulator.positiveArea(p1x, p1y, p2x, p2y, vx, vy)) {\r\n\t\t\t\t\t\t\t\tif (Triangulator.positiveArea(p2x, p2y, p3x, p3y, vx, vy)) break outer;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (next == 0) {\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tif (!isConcave[i]) break;\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t} while (i > 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprevious = i;\r\n\t\t\t\ti = next;\r\n\t\t\t\tnext = (next + 1) % vertexCount;\r\n\t\t\t}\r\n\r\n\t\t\t// Cut ear tip.\r\n\t\t\ttriangles.push(indices[(vertexCount + i - 1) % vertexCount]);\r\n\t\t\ttriangles.push(indices[i]);\r\n\t\t\ttriangles.push(indices[(i + 1) % vertexCount]);\r\n\t\t\tindices.splice(i, 1);\r\n\t\t\tisConcave.splice(i, 1);\r\n\t\t\tvertexCount--;\r\n\r\n\t\t\tlet previousIndex = (vertexCount + i - 1) % vertexCount;\r\n\t\t\tlet nextIndex = i == vertexCount ? 0 : i;\r\n\t\t\tisConcave[previousIndex] = Triangulator.isConcave(previousIndex, vertexCount, vertices, indices);\r\n\t\t\tisConcave[nextIndex] = Triangulator.isConcave(nextIndex, vertexCount, vertices, indices);\r\n\t\t}\r\n\r\n\t\tif (vertexCount == 3) {\r\n\t\t\ttriangles.push(indices[2]);\r\n\t\t\ttriangles.push(indices[0]);\r\n\t\t\ttriangles.push(indices[1]);\r\n\t\t}\r\n\r\n\t\treturn triangles;\r\n\t}\r\n\r\n\tdecompose (verticesArray: Array<number>, triangles: Array<number>): Array<Array<number>> {\r\n\t\tlet vertices = verticesArray;\r\n\t\tlet convexPolygons = this.convexPolygons;\r\n\t\tthis.polygonPool.freeAll(convexPolygons);\r\n\t\tconvexPolygons.length = 0;\r\n\r\n\t\tlet convexPolygonsIndices = this.convexPolygonsIndices;\r\n\t\tthis.polygonIndicesPool.freeAll(convexPolygonsIndices);\r\n\t\tconvexPolygonsIndices.length = 0;\r\n\r\n\t\tlet polygonIndices = this.polygonIndicesPool.obtain();\r\n\t\tpolygonIndices.length = 0;\r\n\r\n\t\tlet polygon = this.polygonPool.obtain();\r\n\t\tpolygon.length = 0;\r\n\r\n\t\t// Merge subsequent triangles if they form a triangle fan.\r\n\t\tlet fanBaseIndex = -1, lastWinding = 0;\r\n\t\tfor (let i = 0, n = triangles.length; i < n; i += 3) {\r\n\t\t\tlet t1 = triangles[i] << 1, t2 = triangles[i + 1] << 1, t3 = triangles[i + 2] << 1;\r\n\t\t\tlet x1 = vertices[t1], y1 = vertices[t1 + 1];\r\n\t\t\tlet x2 = vertices[t2], y2 = vertices[t2 + 1];\r\n\t\t\tlet x3 = vertices[t3], y3 = vertices[t3 + 1];\r\n\r\n\t\t\t// If the base of the last triangle is the same as this triangle, check if they form a convex polygon (triangle fan).\r\n\t\t\tlet merged = false;\r\n\t\t\tif (fanBaseIndex == t1) {\r\n\t\t\t\tlet o = polygon.length - 4;\r\n\t\t\t\tlet winding1 = Triangulator.winding(polygon[o], polygon[o + 1], polygon[o + 2], polygon[o + 3], x3, y3);\r\n\t\t\t\tlet winding2 = Triangulator.winding(x3, y3, polygon[0], polygon[1], polygon[2], polygon[3]);\r\n\t\t\t\tif (winding1 == lastWinding && winding2 == lastWinding) {\r\n\t\t\t\t\tpolygon.push(x3);\r\n\t\t\t\t\tpolygon.push(y3);\r\n\t\t\t\t\tpolygonIndices.push(t3);\r\n\t\t\t\t\tmerged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise make this triangle the new base.\r\n\t\t\tif (!merged) {\r\n\t\t\t\tif (polygon.length > 0) {\r\n\t\t\t\t\tconvexPolygons.push(polygon);\r\n\t\t\t\t\tconvexPolygonsIndices.push(polygonIndices);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.polygonPool.free(polygon)\r\n\t\t\t\t\tthis.polygonIndicesPool.free(polygonIndices);\r\n\t\t\t\t}\r\n\t\t\t\tpolygon = this.polygonPool.obtain();\r\n\t\t\t\tpolygon.length = 0;\r\n\t\t\t\tpolygon.push(x1);\r\n\t\t\t\tpolygon.push(y1);\r\n\t\t\t\tpolygon.push(x2);\r\n\t\t\t\tpolygon.push(y2);\r\n\t\t\t\tpolygon.push(x3);\r\n\t\t\t\tpolygon.push(y3);\r\n\t\t\t\tpolygonIndices = this.polygonIndicesPool.obtain();\r\n\t\t\t\tpolygonIndices.length = 0;\r\n\t\t\t\tpolygonIndices.push(t1);\r\n\t\t\t\tpolygonIndices.push(t2);\r\n\t\t\t\tpolygonIndices.push(t3);\r\n\t\t\t\tlastWinding = Triangulator.winding(x1, y1, x2, y2, x3, y3);\r\n\t\t\t\tfanBaseIndex = t1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (polygon.length > 0) {\r\n\t\t\tconvexPolygons.push(polygon);\r\n\t\t\tconvexPolygonsIndices.push(polygonIndices);\r\n\t\t}\r\n\r\n\t\t// Go through the list of polygons and try to merge the remaining triangles with the found triangle fans.\r\n\t\tfor (let i = 0, n = convexPolygons.length; i < n; i++) {\r\n\t\t\tpolygonIndices = convexPolygonsIndices[i];\r\n\t\t\tif (polygonIndices.length == 0) continue;\r\n\t\t\tlet firstIndex = polygonIndices[0];\r\n\t\t\tlet lastIndex = polygonIndices[polygonIndices.length - 1];\r\n\r\n\t\t\tpolygon = convexPolygons[i];\r\n\t\t\tlet o = polygon.length - 4;\r\n\t\t\tlet prevPrevX = polygon[o], prevPrevY = polygon[o + 1];\r\n\t\t\tlet prevX = polygon[o + 2], prevY = polygon[o + 3];\r\n\t\t\tlet firstX = polygon[0], firstY = polygon[1];\r\n\t\t\tlet secondX = polygon[2], secondY = polygon[3];\r\n\t\t\tlet winding = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, firstX, firstY);\r\n\r\n\t\t\tfor (let ii = 0; ii < n; ii++) {\r\n\t\t\t\tif (ii == i) continue;\r\n\t\t\t\tlet otherIndices = convexPolygonsIndices[ii];\r\n\t\t\t\tif (otherIndices.length != 3) continue;\r\n\t\t\t\tlet otherFirstIndex = otherIndices[0];\r\n\t\t\t\tlet otherSecondIndex = otherIndices[1];\r\n\t\t\t\tlet otherLastIndex = otherIndices[2];\r\n\r\n\t\t\t\tlet otherPoly = convexPolygons[ii];\r\n\t\t\t\tlet x3 = otherPoly[otherPoly.length - 2], y3 = otherPoly[otherPoly.length - 1];\r\n\r\n\t\t\t\tif (otherFirstIndex != firstIndex || otherSecondIndex != lastIndex) continue;\r\n\t\t\t\tlet winding1 = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, x3, y3);\r\n\t\t\t\tlet winding2 = Triangulator.winding(x3, y3, firstX, firstY, secondX, secondY);\r\n\t\t\t\tif (winding1 == winding && winding2 == winding) {\r\n\t\t\t\t\totherPoly.length = 0;\r\n\t\t\t\t\totherIndices.length = 0;\r\n\t\t\t\t\tpolygon.push(x3);\r\n\t\t\t\t\tpolygon.push(y3);\r\n\t\t\t\t\tpolygonIndices.push(otherLastIndex);\r\n\t\t\t\t\tprevPrevX = prevX;\r\n\t\t\t\t\tprevPrevY = prevY;\r\n\t\t\t\t\tprevX = x3;\r\n\t\t\t\t\tprevY = y3;\r\n\t\t\t\t\tii = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Remove empty polygons that resulted from the merge step above.\r\n\t\tfor (let i = convexPolygons.length - 1; i >= 0; i--) {\r\n\t\t\tpolygon = convexPolygons[i];\r\n\t\t\tif (polygon.length == 0) {\r\n\t\t\t\tconvexPolygons.splice(i, 1);\r\n\t\t\t\tthis.polygonPool.free(polygon);\r\n\t\t\t\tpolygonIndices = convexPolygonsIndices[i]\r\n\t\t\t\tconvexPolygonsIndices.splice(i, 1)\r\n\t\t\t\tthis.polygonIndicesPool.free(polygonIndices);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn convexPolygons;\r\n\t}\r\n\r\n\tprivate static isConcave (index: number, vertexCount: number, vertices: NumberArrayLike, indices: NumberArrayLike): boolean {\r\n\t\tlet previous = indices[(vertexCount + index - 1) % vertexCount] << 1;\r\n\t\tlet current = indices[index] << 1;\r\n\t\tlet next = indices[(index + 1) % vertexCount] << 1;\r\n\t\treturn !this.positiveArea(vertices[previous], vertices[previous + 1], vertices[current], vertices[current + 1], vertices[next],\r\n\t\t\tvertices[next + 1]);\r\n\t}\r\n\r\n\tprivate static positiveArea (p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): boolean {\r\n\t\treturn p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0;\r\n\t}\r\n\r\n\tprivate static winding (p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): number {\r\n\t\tlet px = p2x - p1x, py = p2y - p1y;\r\n\t\treturn p3x * py - p3y * px + px * p1y - p1x * py >= 0 ? 1 : -1;\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { ClippingAttachment } from \"./attachments/ClippingAttachment.js\";\r\nimport { Slot } from \"./Slot.js\";\r\nimport { Triangulator } from \"./Triangulator.js\";\r\nimport { Utils, Color, NumberArrayLike } from \"./Utils.js\";\r\n\r\nexport class SkeletonClipping {\r\n\tprivate triangulator = new Triangulator();\r\n\tprivate clippingPolygon = new Array<number>();\r\n\tprivate clipOutput = new Array<number>();\r\n\tclippedVertices = new Array<number>();\r\n\tclippedTriangles = new Array<number>();\r\n\tprivate scratch = new Array<number>();\r\n\r\n\tprivate clipAttachment: ClippingAttachment | null = null;\r\n\tprivate clippingPolygons: Array<Array<number>> | null = null;\r\n\r\n\tclipStart (slot: Slot, clip: ClippingAttachment): number {\r\n\t\tif (this.clipAttachment) return 0;\r\n\t\tthis.clipAttachment = clip;\r\n\r\n\t\tlet n = clip.worldVerticesLength;\r\n\t\tlet vertices = Utils.setArraySize(this.clippingPolygon, n);\r\n\t\tclip.computeWorldVertices(slot, 0, n, vertices, 0, 2);\r\n\t\tlet clippingPolygon = this.clippingPolygon;\r\n\t\tSkeletonClipping.makeClockwise(clippingPolygon);\r\n\t\tlet clippingPolygons = this.clippingPolygons = this.triangulator.decompose(clippingPolygon, this.triangulator.triangulate(clippingPolygon));\r\n\t\tfor (let i = 0, n = clippingPolygons.length; i < n; i++) {\r\n\t\t\tlet polygon = clippingPolygons[i];\r\n\t\t\tSkeletonClipping.makeClockwise(polygon);\r\n\t\t\tpolygon.push(polygon[0]);\r\n\t\t\tpolygon.push(polygon[1]);\r\n\t\t}\r\n\r\n\t\treturn clippingPolygons.length;\r\n\t}\r\n\r\n\tclipEndWithSlot (slot: Slot) {\r\n\t\tif (this.clipAttachment && this.clipAttachment.endSlot == slot.data) this.clipEnd();\r\n\t}\r\n\r\n\tclipEnd () {\r\n\t\tif (!this.clipAttachment) return;\r\n\t\tthis.clipAttachment = null;\r\n\t\tthis.clippingPolygons = null;\r\n\t\tthis.clippedVertices.length = 0;\r\n\t\tthis.clippedTriangles.length = 0;\r\n\t\tthis.clippingPolygon.length = 0;\r\n\t}\r\n\r\n\tisClipping (): boolean {\r\n\t\treturn this.clipAttachment != null;\r\n\t}\r\n\r\n\tclipTriangles (vertices: NumberArrayLike, verticesLength: number, triangles: NumberArrayLike, trianglesLength: number, uvs: NumberArrayLike,\r\n\t\tlight: Color, dark: Color, twoColor: boolean) {\r\n\r\n\t\tlet clipOutput = this.clipOutput, clippedVertices = this.clippedVertices;\r\n\t\tlet clippedTriangles = this.clippedTriangles;\r\n\t\tlet polygons = this.clippingPolygons!;\r\n\t\tlet polygonsCount = polygons.length;\r\n\t\tlet vertexSize = twoColor ? 12 : 8;\r\n\r\n\t\tlet index = 0;\r\n\t\tclippedVertices.length = 0;\r\n\t\tclippedTriangles.length = 0;\r\n\t\touter:\r\n\t\tfor (let i = 0; i < trianglesLength; i += 3) {\r\n\t\t\tlet vertexOffset = triangles[i] << 1;\r\n\t\t\tlet x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];\r\n\t\t\tlet u1 = uvs[vertexOffset], v1 = uvs[vertexOffset + 1];\r\n\r\n\t\t\tvertexOffset = triangles[i + 1] << 1;\r\n\t\t\tlet x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];\r\n\t\t\tlet u2 = uvs[vertexOffset], v2 = uvs[vertexOffset + 1];\r\n\r\n\t\t\tvertexOffset = triangles[i + 2] << 1;\r\n\t\t\tlet x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];\r\n\t\t\tlet u3 = uvs[vertexOffset], v3 = uvs[vertexOffset + 1];\r\n\r\n\t\t\tfor (let p = 0; p < polygonsCount; p++) {\r\n\t\t\t\tlet s = clippedVertices.length;\r\n\t\t\t\tif (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {\r\n\t\t\t\t\tlet clipOutputLength = clipOutput.length;\r\n\t\t\t\t\tif (clipOutputLength == 0) continue;\r\n\t\t\t\t\tlet d0 = y2 - y3, d1 = x3 - x2, d2 = x1 - x3, d4 = y3 - y1;\r\n\t\t\t\t\tlet d = 1 / (d0 * d2 + d1 * (y1 - y3));\r\n\r\n\t\t\t\t\tlet clipOutputCount = clipOutputLength >> 1;\r\n\t\t\t\t\tlet clipOutputItems = this.clipOutput;\r\n\t\t\t\t\tlet clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * vertexSize);\r\n\t\t\t\t\tfor (let ii = 0; ii < clipOutputLength; ii += 2) {\r\n\t\t\t\t\t\tlet x = clipOutputItems[ii], y = clipOutputItems[ii + 1];\r\n\t\t\t\t\t\tclippedVerticesItems[s] = x;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 1] = y;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 2] = light.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 3] = light.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 4] = light.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 5] = light.a;\r\n\t\t\t\t\t\tlet c0 = x - x3, c1 = y - y3;\r\n\t\t\t\t\t\tlet a = (d0 * c0 + d1 * c1) * d;\r\n\t\t\t\t\t\tlet b = (d4 * c0 + d2 * c1) * d;\r\n\t\t\t\t\t\tlet c = 1 - a - b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1 * a + u2 * b + u3 * c;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1 * a + v2 * b + v3 * c;\r\n\t\t\t\t\t\tif (twoColor) {\r\n\t\t\t\t\t\t\tclippedVerticesItems[s + 8] = dark.r;\r\n\t\t\t\t\t\t\tclippedVerticesItems[s + 9] = dark.g;\r\n\t\t\t\t\t\t\tclippedVerticesItems[s + 10] = dark.b;\r\n\t\t\t\t\t\t\tclippedVerticesItems[s + 11] = dark.a;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ts += vertexSize;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ts = clippedTriangles.length;\r\n\t\t\t\t\tlet clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));\r\n\t\t\t\t\tclipOutputCount--;\r\n\t\t\t\t\tfor (let ii = 1; ii < clipOutputCount; ii++) {\r\n\t\t\t\t\t\tclippedTrianglesItems[s] = index;\r\n\t\t\t\t\t\tclippedTrianglesItems[s + 1] = (index + ii);\r\n\t\t\t\t\t\tclippedTrianglesItems[s + 2] = (index + ii + 1);\r\n\t\t\t\t\t\ts += 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tindex += clipOutputCount + 1;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * vertexSize);\r\n\t\t\t\t\tclippedVerticesItems[s] = x1;\r\n\t\t\t\t\tclippedVerticesItems[s + 1] = y1;\r\n\t\t\t\t\tclippedVerticesItems[s + 2] = light.r;\r\n\t\t\t\t\tclippedVerticesItems[s + 3] = light.g;\r\n\t\t\t\t\tclippedVerticesItems[s + 4] = light.b;\r\n\t\t\t\t\tclippedVerticesItems[s + 5] = light.a;\r\n\t\t\t\t\tif (!twoColor) {\r\n\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1;\r\n\r\n\t\t\t\t\t\tclippedVerticesItems[s + 8] = x2;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 9] = y2;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 10] = light.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 11] = light.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 12] = light.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 13] = light.a;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 14] = u2;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 15] = v2;\r\n\r\n\t\t\t\t\t\tclippedVerticesItems[s + 16] = x3;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 17] = y3;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 18] = light.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 19] = light.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 20] = light.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 21] = light.a;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 22] = u3;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 23] = v3;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 8] = dark.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 9] = dark.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 10] = dark.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 11] = dark.a;\r\n\r\n\t\t\t\t\t\tclippedVerticesItems[s + 12] = x2;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 13] = y2;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 14] = light.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 15] = light.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 16] = light.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 17] = light.a;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 18] = u2;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 19] = v2;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 20] = dark.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 21] = dark.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 22] = dark.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 23] = dark.a;\r\n\r\n\t\t\t\t\t\tclippedVerticesItems[s + 24] = x3;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 25] = y3;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 26] = light.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 27] = light.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 28] = light.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 29] = light.a;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 30] = u3;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 31] = v3;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 32] = dark.r;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 33] = dark.g;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 34] = dark.b;\r\n\t\t\t\t\t\tclippedVerticesItems[s + 35] = dark.a;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ts = clippedTriangles.length;\r\n\t\t\t\t\tlet clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);\r\n\t\t\t\t\tclippedTrianglesItems[s] = index;\r\n\t\t\t\t\tclippedTrianglesItems[s + 1] = (index + 1);\r\n\t\t\t\t\tclippedTrianglesItems[s + 2] = (index + 2);\r\n\t\t\t\t\tindex += 3;\r\n\t\t\t\t\tcontinue outer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\r\n\t * area, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list. */\r\n\tclip (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, clippingArea: Array<number>, output: Array<number>) {\r\n\t\tlet originalOutput = output;\r\n\t\tlet clipped = false;\r\n\r\n\t\t// Avoid copy at the end.\r\n\t\tlet input: Array<number>;\r\n\t\tif (clippingArea.length % 4 >= 2) {\r\n\t\t\tinput = output;\r\n\t\t\toutput = this.scratch;\r\n\t\t} else\r\n\t\t\tinput = this.scratch;\r\n\r\n\t\tinput.length = 0;\r\n\t\tinput.push(x1);\r\n\t\tinput.push(y1);\r\n\t\tinput.push(x2);\r\n\t\tinput.push(y2);\r\n\t\tinput.push(x3);\r\n\t\tinput.push(y3);\r\n\t\tinput.push(x1);\r\n\t\tinput.push(y1);\r\n\t\toutput.length = 0;\r\n\r\n\t\tlet clippingVertices = clippingArea;\r\n\t\tlet clippingVerticesLast = clippingArea.length - 4;\r\n\t\tfor (let i = 0; ; i += 2) {\r\n\t\t\tlet edgeX = clippingVertices[i], edgeY = clippingVertices[i + 1];\r\n\t\t\tlet edgeX2 = clippingVertices[i + 2], edgeY2 = clippingVertices[i + 3];\r\n\t\t\tlet deltaX = edgeX - edgeX2, deltaY = edgeY - edgeY2;\r\n\r\n\t\t\tlet inputVertices = input;\r\n\t\t\tlet inputVerticesLength = input.length - 2, outputStart = output.length;\r\n\t\t\tfor (let ii = 0; ii < inputVerticesLength; ii += 2) {\r\n\t\t\t\tlet inputX = inputVertices[ii], inputY = inputVertices[ii + 1];\r\n\t\t\t\tlet inputX2 = inputVertices[ii + 2], inputY2 = inputVertices[ii + 3];\r\n\t\t\t\tlet side2 = deltaX * (inputY2 - edgeY2) - deltaY * (inputX2 - edgeX2) > 0;\r\n\t\t\t\tif (deltaX * (inputY - edgeY2) - deltaY * (inputX - edgeX2) > 0) {\r\n\t\t\t\t\tif (side2) { // v1 inside, v2 inside\r\n\t\t\t\t\t\toutput.push(inputX2);\r\n\t\t\t\t\t\toutput.push(inputY2);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// v1 inside, v2 outside\r\n\t\t\t\t\tlet c0 = inputY2 - inputY, c2 = inputX2 - inputX;\r\n\t\t\t\t\tlet s = c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY);\r\n\t\t\t\t\tif (Math.abs(s) > 0.000001) {\r\n\t\t\t\t\t\tlet ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / s;\r\n\t\t\t\t\t\toutput.push(edgeX + (edgeX2 - edgeX) * ua);\r\n\t\t\t\t\t\toutput.push(edgeY + (edgeY2 - edgeY) * ua);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toutput.push(edgeX);\r\n\t\t\t\t\t\toutput.push(edgeY);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (side2) { // v1 outside, v2 inside\r\n\t\t\t\t\tlet c0 = inputY2 - inputY, c2 = inputX2 - inputX;\r\n\t\t\t\t\tlet s = c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY);\r\n\t\t\t\t\tif (Math.abs(s) > 0.000001) {\r\n\t\t\t\t\t\tlet ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / s;\r\n\t\t\t\t\t\toutput.push(edgeX + (edgeX2 - edgeX) * ua);\r\n\t\t\t\t\t\toutput.push(edgeY + (edgeY2 - edgeY) * ua);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toutput.push(edgeX);\r\n\t\t\t\t\t\toutput.push(edgeY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutput.push(inputX2);\r\n\t\t\t\t\toutput.push(inputY2);\r\n\t\t\t\t}\r\n\t\t\t\tclipped = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (outputStart == output.length) { // All edges outside.\r\n\t\t\t\toriginalOutput.length = 0;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\toutput.push(output[0]);\r\n\t\t\toutput.push(output[1]);\r\n\r\n\t\t\tif (i == clippingVerticesLast) break;\r\n\t\t\tlet temp = output;\r\n\t\t\toutput = input;\r\n\t\t\toutput.length = 0;\r\n\t\t\tinput = temp;\r\n\t\t}\r\n\r\n\t\tif (originalOutput != output) {\r\n\t\t\toriginalOutput.length = 0;\r\n\t\t\tfor (let i = 0, n = output.length - 2; i < n; i++)\r\n\t\t\t\toriginalOutput[i] = output[i];\r\n\t\t} else\r\n\t\t\toriginalOutput.length = originalOutput.length - 2;\r\n\r\n\t\treturn clipped;\r\n\t}\r\n\r\n\tpublic static makeClockwise (polygon: NumberArrayLike) {\r\n\t\tlet vertices = polygon;\r\n\t\tlet verticeslength = polygon.length;\r\n\r\n\t\tlet area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1], p1x = 0, p1y = 0, p2x = 0, p2y = 0;\r\n\t\tfor (let i = 0, n = verticeslength - 3; i < n; i += 2) {\r\n\t\t\tp1x = vertices[i];\r\n\t\t\tp1y = vertices[i + 1];\r\n\t\t\tp2x = vertices[i + 2];\r\n\t\t\tp2y = vertices[i + 3];\r\n\t\t\tarea += p1x * p2y - p2x * p1y;\r\n\t\t}\r\n\t\tif (area < 0) return;\r\n\r\n\t\tfor (let i = 0, lastX = verticeslength - 2, n = verticeslength >> 1; i < n; i += 2) {\r\n\t\t\tlet x = vertices[i], y = vertices[i + 1];\r\n\t\t\tlet other = lastX - i;\r\n\t\t\tvertices[i] = vertices[other];\r\n\t\t\tvertices[i + 1] = vertices[other + 1];\r\n\t\t\tvertices[other] = x;\r\n\t\t\tvertices[other + 1] = y;\r\n\t\t}\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Animation, Timeline, AttachmentTimeline, RGBATimeline, RGBTimeline, AlphaTimeline, RGBA2Timeline, RGB2Timeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, CurveTimeline1, CurveTimeline2, CurveTimeline } from \"./Animation.js\";\r\nimport { VertexAttachment, Attachment } from \"./attachments/Attachment.js\";\r\nimport { AttachmentLoader } from \"./attachments/AttachmentLoader.js\";\r\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\r\nimport { BoneData, TransformMode } from \"./BoneData.js\";\r\nimport { EventData } from \"./EventData.js\";\r\nimport { Event } from \"./Event.js\";\r\nimport { IkConstraintData } from \"./IkConstraintData.js\";\r\nimport { PathConstraintData, PositionMode, SpacingMode, RotateMode } from \"./PathConstraintData.js\";\r\nimport { SkeletonData } from \"./SkeletonData.js\";\r\nimport { Skin } from \"./Skin.js\";\r\nimport { SlotData, BlendMode } from \"./SlotData.js\";\r\nimport { TransformConstraintData } from \"./TransformConstraintData.js\";\r\nimport { Utils, Color, NumberArrayLike } from \"./Utils.js\";\r\nimport { Sequence, SequenceMode } from \"./attachments/Sequence.js\";\r\nimport { SequenceTimeline } from \"./Animation.js\";\r\nimport { HasTextureRegion } from \"./attachments/HasTextureRegion.js\";\r\n\r\n/** Loads skeleton data in the Spine JSON format.\r\n *\r\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\r\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\r\n * Runtimes Guide. */\r\nexport class SkeletonJson {\r\n\tattachmentLoader: AttachmentLoader;\r\n\r\n\t/** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\r\n\t * runtime than were used in Spine.\r\n\t *\r\n\t * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\r\n\tscale = 1;\r\n\tprivate linkedMeshes = new Array<LinkedMesh>();\r\n\r\n\tconstructor (attachmentLoader: AttachmentLoader) {\r\n\t\tthis.attachmentLoader = attachmentLoader;\r\n\t}\r\n\r\n\treadSkeletonData (json: string | any): SkeletonData {\r\n\t\tlet scale = this.scale;\r\n\t\tlet skeletonData = new SkeletonData();\r\n\t\tlet root = typeof (json) === \"string\" ? JSON.parse(json) : json;\r\n\r\n\t\t// Skeleton\r\n\t\tlet skeletonMap = root.skeleton;\r\n\t\tif (skeletonMap) {\r\n\t\t\tskeletonData.hash = skeletonMap.hash;\r\n\t\t\tskeletonData.version = skeletonMap.spine;\r\n\t\t\tskeletonData.x = skeletonMap.x;\r\n\t\t\tskeletonData.y = skeletonMap.y;\r\n\t\t\tskeletonData.width = skeletonMap.width;\r\n\t\t\tskeletonData.height = skeletonMap.height;\r\n\t\t\tskeletonData.fps = skeletonMap.fps;\r\n\t\t\tskeletonData.imagesPath = skeletonMap.images;\r\n\t\t}\r\n\r\n\t\t// Bones\r\n\t\tif (root.bones) {\r\n\t\t\tfor (let i = 0; i < root.bones.length; i++) {\r\n\t\t\t\tlet boneMap = root.bones[i];\r\n\r\n\t\t\t\tlet parent: BoneData | null = null;\r\n\t\t\t\tlet parentName: string = getValue(boneMap, \"parent\", null);\r\n\t\t\t\tif (parentName) parent = skeletonData.findBone(parentName);\r\n\t\t\t\tlet data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\r\n\t\t\t\tdata.length = getValue(boneMap, \"length\", 0) * scale;\r\n\t\t\t\tdata.x = getValue(boneMap, \"x\", 0) * scale;\r\n\t\t\t\tdata.y = getValue(boneMap, \"y\", 0) * scale;\r\n\t\t\t\tdata.rotation = getValue(boneMap, \"rotation\", 0);\r\n\t\t\t\tdata.scaleX = getValue(boneMap, \"scaleX\", 1);\r\n\t\t\t\tdata.scaleY = getValue(boneMap, \"scaleY\", 1);\r\n\t\t\t\tdata.shearX = getValue(boneMap, \"shearX\", 0);\r\n\t\t\t\tdata.shearY = getValue(boneMap, \"shearY\", 0);\r\n\t\t\t\tdata.transformMode = Utils.enumValue(TransformMode, getValue(boneMap, \"transform\", \"Normal\"));\r\n\t\t\t\tdata.skinRequired = getValue(boneMap, \"skin\", false);\r\n\r\n\t\t\t\tlet color = getValue(boneMap, \"color\", null);\r\n\t\t\t\tif (color) data.color.setFromString(color);\r\n\r\n\t\t\t\tskeletonData.bones.push(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Slots.\r\n\t\tif (root.slots) {\r\n\t\t\tfor (let i = 0; i < root.slots.length; i++) {\r\n\t\t\t\tlet slotMap = root.slots[i];\r\n\t\t\t\tlet boneData = skeletonData.findBone(slotMap.bone);\r\n\t\t\t\tif (!boneData) throw new Error(`Couldn't find bone ${slotMap.bone} for slot ${slotMap.name}`);\r\n\t\t\t\tlet data = new SlotData(skeletonData.slots.length, slotMap.name, boneData);\r\n\r\n\t\t\t\tlet color: string = getValue(slotMap, \"color\", null);\r\n\t\t\t\tif (color) data.color.setFromString(color);\r\n\r\n\t\t\t\tlet dark: string = getValue(slotMap, \"dark\", null);\r\n\t\t\t\tif (dark) data.darkColor = Color.fromString(dark);\r\n\r\n\t\t\t\tdata.attachmentName = getValue(slotMap, \"attachment\", null);\r\n\t\t\t\tdata.blendMode = Utils.enumValue(BlendMode, getValue(slotMap, \"blend\", \"normal\"));\r\n\t\t\t\tskeletonData.slots.push(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// IK constraints\r\n\t\tif (root.ik) {\r\n\t\t\tfor (let i = 0; i < root.ik.length; i++) {\r\n\t\t\t\tlet constraintMap = root.ik[i];\r\n\t\t\t\tlet data = new IkConstraintData(constraintMap.name);\r\n\t\t\t\tdata.order = getValue(constraintMap, \"order\", 0);\r\n\t\t\t\tdata.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n\t\t\t\tfor (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n\t\t\t\t\tlet bone = skeletonData.findBone(constraintMap.bones[ii]);\r\n\t\t\t\t\tif (!bone) throw new Error(`Couldn't find bone ${constraintMap.bones[ii]} for IK constraint ${constraintMap.name}.`);\r\n\t\t\t\t\tdata.bones.push(bone);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet target = skeletonData.findBone(constraintMap.target);;\r\n\t\t\t\tif (!target) throw new Error(`Couldn't find target bone ${constraintMap.target} for IK constraint ${constraintMap.name}.`);\r\n\t\t\t\tdata.target = target;\r\n\r\n\t\t\t\tdata.mix = getValue(constraintMap, \"mix\", 1);\r\n\t\t\t\tdata.softness = getValue(constraintMap, \"softness\", 0) * scale;\r\n\t\t\t\tdata.bendDirection = getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\r\n\t\t\t\tdata.compress = getValue(constraintMap, \"compress\", false);\r\n\t\t\t\tdata.stretch = getValue(constraintMap, \"stretch\", false);\r\n\t\t\t\tdata.uniform = getValue(constraintMap, \"uniform\", false);\r\n\r\n\t\t\t\tskeletonData.ikConstraints.push(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Transform constraints.\r\n\t\tif (root.transform) {\r\n\t\t\tfor (let i = 0; i < root.transform.length; i++) {\r\n\t\t\t\tlet constraintMap = root.transform[i];\r\n\t\t\t\tlet data = new TransformConstraintData(constraintMap.name);\r\n\t\t\t\tdata.order = getValue(constraintMap, \"order\", 0);\r\n\t\t\t\tdata.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n\t\t\t\tfor (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n\t\t\t\t\tlet boneName = constraintMap.bones[ii];\r\n\t\t\t\t\tlet bone = skeletonData.findBone(boneName);\r\n\t\t\t\t\tif (!bone) throw new Error(`Couldn't find bone ${boneName} for transform constraint ${constraintMap.name}.`);\r\n\t\t\t\t\tdata.bones.push(bone);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet targetName: string = constraintMap.target;\r\n\t\t\t\tlet target = skeletonData.findBone(targetName);\r\n\t\t\t\tif (!target) throw new Error(`Couldn't find target bone ${targetName} for transform constraint ${constraintMap.name}.`);\r\n\t\t\t\tdata.target = target;\r\n\r\n\t\t\t\tdata.local = getValue(constraintMap, \"local\", false);\r\n\t\t\t\tdata.relative = getValue(constraintMap, \"relative\", false);\r\n\t\t\t\tdata.offsetRotation = getValue(constraintMap, \"rotation\", 0);\r\n\t\t\t\tdata.offsetX = getValue(constraintMap, \"x\", 0) * scale;\r\n\t\t\t\tdata.offsetY = getValue(constraintMap, \"y\", 0) * scale;\r\n\t\t\t\tdata.offsetScaleX = getValue(constraintMap, \"scaleX\", 0);\r\n\t\t\t\tdata.offsetScaleY = getValue(constraintMap, \"scaleY\", 0);\r\n\t\t\t\tdata.offsetShearY = getValue(constraintMap, \"shearY\", 0);\r\n\r\n\t\t\t\tdata.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\r\n\t\t\t\tdata.mixX = getValue(constraintMap, \"mixX\", 1);\r\n\t\t\t\tdata.mixY = getValue(constraintMap, \"mixY\", data.mixX);\r\n\t\t\t\tdata.mixScaleX = getValue(constraintMap, \"mixScaleX\", 1);\r\n\t\t\t\tdata.mixScaleY = getValue(constraintMap, \"mixScaleY\", data.mixScaleX);\r\n\t\t\t\tdata.mixShearY = getValue(constraintMap, \"mixShearY\", 1);\r\n\r\n\t\t\t\tskeletonData.transformConstraints.push(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Path constraints.\r\n\t\tif (root.path) {\r\n\t\t\tfor (let i = 0; i < root.path.length; i++) {\r\n\t\t\t\tlet constraintMap = root.path[i];\r\n\t\t\t\tlet data = new PathConstraintData(constraintMap.name);\r\n\t\t\t\tdata.order = getValue(constraintMap, \"order\", 0);\r\n\t\t\t\tdata.skinRequired = getValue(constraintMap, \"skin\", false);\r\n\r\n\t\t\t\tfor (let ii = 0; ii < constraintMap.bones.length; ii++) {\r\n\t\t\t\t\tlet boneName = constraintMap.bones[ii];\r\n\t\t\t\t\tlet bone = skeletonData.findBone(boneName);\r\n\t\t\t\t\tif (!bone) throw new Error(`Couldn't find bone ${boneName} for path constraint ${constraintMap.name}.`);\r\n\t\t\t\t\tdata.bones.push(bone);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet targetName: string = constraintMap.target;\r\n\t\t\t\tlet target = skeletonData.findSlot(targetName);\r\n\t\t\t\tif (!target) throw new Error(`Couldn't find target slot ${targetName} for path constraint ${constraintMap.name}.`);\r\n\t\t\t\tdata.target = target;\r\n\r\n\t\t\t\tdata.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, \"positionMode\", \"Percent\"));\r\n\t\t\t\tdata.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, \"spacingMode\", \"Length\"));\r\n\t\t\t\tdata.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, \"rotateMode\", \"Tangent\"));\r\n\t\t\t\tdata.offsetRotation = getValue(constraintMap, \"rotation\", 0);\r\n\t\t\t\tdata.position = getValue(constraintMap, \"position\", 0);\r\n\t\t\t\tif (data.positionMode == PositionMode.Fixed) data.position *= scale;\r\n\t\t\t\tdata.spacing = getValue(constraintMap, \"spacing\", 0);\r\n\t\t\t\tif (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\r\n\t\t\t\tdata.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\r\n\t\t\t\tdata.mixX = getValue(constraintMap, \"mixX\", 1);\r\n\t\t\t\tdata.mixY = getValue(constraintMap, \"mixY\", data.mixX);\r\n\r\n\t\t\t\tskeletonData.pathConstraints.push(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Skins.\r\n\t\tif (root.skins) {\r\n\t\t\tfor (let i = 0; i < root.skins.length; i++) {\r\n\t\t\t\tlet skinMap = root.skins[i]\r\n\t\t\t\tlet skin = new Skin(skinMap.name);\r\n\r\n\t\t\t\tif (skinMap.bones) {\r\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.bones.length; ii++) {\r\n\t\t\t\t\t\tlet boneName = skinMap.bones[ii];\r\n\t\t\t\t\t\tlet bone = skeletonData.findBone(boneName);\r\n\t\t\t\t\t\tif (!bone) throw new Error(`Couldn't find bone ${boneName} for skin ${skinMap.name}.`);\r\n\t\t\t\t\t\tskin.bones.push(bone);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (skinMap.ik) {\r\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.ik.length; ii++) {\r\n\t\t\t\t\t\tlet constraintName = skinMap.ik[ii];\r\n\t\t\t\t\t\tlet constraint = skeletonData.findIkConstraint(constraintName);\r\n\t\t\t\t\t\tif (!constraint) throw new Error(`Couldn't find IK constraint ${constraintName} for skin ${skinMap.name}.`);\r\n\t\t\t\t\t\tskin.constraints.push(constraint);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (skinMap.transform) {\r\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.transform.length; ii++) {\r\n\t\t\t\t\t\tlet constraintName = skinMap.transform[ii];\r\n\t\t\t\t\t\tlet constraint = skeletonData.findTransformConstraint(constraintName);\r\n\t\t\t\t\t\tif (!constraint) throw new Error(`Couldn't find transform constraint ${constraintName} for skin ${skinMap.name}.`);\r\n\t\t\t\t\t\tskin.constraints.push(constraint);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (skinMap.path) {\r\n\t\t\t\t\tfor (let ii = 0; ii < skinMap.path.length; ii++) {\r\n\t\t\t\t\t\tlet constraintName = skinMap.path[ii];\r\n\t\t\t\t\t\tlet constraint = skeletonData.findPathConstraint(constraintName);\r\n\t\t\t\t\t\tif (!constraint) throw new Error(`Couldn't find path constraint ${constraintName} for skin ${skinMap.name}.`);\r\n\t\t\t\t\t\tskin.constraints.push(constraint);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let slotName in skinMap.attachments) {\r\n\t\t\t\t\tlet slot = skeletonData.findSlot(slotName);\r\n\t\t\t\t\tif (!slot) throw new Error(`Couldn't find slot ${slotName} for skin ${skinMap.name}.`);\r\n\t\t\t\t\tlet slotMap = skinMap.attachments[slotName];\r\n\t\t\t\t\tfor (let entryName in slotMap) {\r\n\t\t\t\t\t\tlet attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\r\n\t\t\t\t\t\tif (attachment) skin.setAttachment(slot.index, entryName, attachment);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tskeletonData.skins.push(skin);\r\n\t\t\t\tif (skin.name == \"default\") skeletonData.defaultSkin = skin;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Linked meshes.\r\n\t\tfor (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\r\n\t\t\tlet linkedMesh = this.linkedMeshes[i];\r\n\t\t\tlet skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\r\n\t\t\tif (!skin) throw new Error(`Skin not found: ${linkedMesh.skin}`);\r\n\t\t\tlet parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\r\n\t\t\tif (!parent) throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);\r\n\t\t\tlinkedMesh.mesh.timelineAttachment = linkedMesh.inheritTimeline ? <VertexAttachment>parent : <VertexAttachment>linkedMesh.mesh;\r\n\t\t\tlinkedMesh.mesh.setParentMesh(<MeshAttachment>parent);\r\n\t\t\tif (linkedMesh.mesh.region != null) linkedMesh.mesh.updateRegion();\r\n\t\t}\r\n\t\tthis.linkedMeshes.length = 0;\r\n\r\n\t\t// Events.\r\n\t\tif (root.events) {\r\n\t\t\tfor (let eventName in root.events) {\r\n\t\t\t\tlet eventMap = root.events[eventName];\r\n\t\t\t\tlet data = new EventData(eventName);\r\n\t\t\t\tdata.intValue = getValue(eventMap, \"int\", 0);\r\n\t\t\t\tdata.floatValue = getValue(eventMap, \"float\", 0);\r\n\t\t\t\tdata.stringValue = getValue(eventMap, \"string\", \"\");\r\n\t\t\t\tdata.audioPath = getValue(eventMap, \"audio\", null);\r\n\t\t\t\tif (data.audioPath) {\r\n\t\t\t\t\tdata.volume = getValue(eventMap, \"volume\", 1);\r\n\t\t\t\t\tdata.balance = getValue(eventMap, \"balance\", 0);\r\n\t\t\t\t}\r\n\t\t\t\tskeletonData.events.push(data);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Animations.\r\n\t\tif (root.animations) {\r\n\t\t\tfor (let animationName in root.animations) {\r\n\t\t\t\tlet animationMap = root.animations[animationName];\r\n\t\t\t\tthis.readAnimation(animationMap, animationName, skeletonData);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn skeletonData;\r\n\t}\r\n\r\n\treadAttachment (map: any, skin: Skin, slotIndex: number, name: string, skeletonData: SkeletonData): Attachment | null {\r\n\t\tlet scale = this.scale;\r\n\t\tname = getValue(map, \"name\", name);\r\n\r\n\t\tswitch (getValue(map, \"type\", \"region\")) {\r\n\t\t\tcase \"region\": {\r\n\t\t\t\tlet path = getValue(map, \"path\", name);\r\n\t\t\t\tlet sequence = this.readSequence(getValue(map, \"sequence\", null));\r\n\t\t\t\tlet region = this.attachmentLoader.newRegionAttachment(skin, name, path, sequence);\r\n\t\t\t\tif (!region) return null;\r\n\t\t\t\tregion.path = path;\r\n\t\t\t\tregion.x = getValue(map, \"x\", 0) * scale;\r\n\t\t\t\tregion.y = getValue(map, \"y\", 0) * scale;\r\n\t\t\t\tregion.scaleX = getValue(map, \"scaleX\", 1);\r\n\t\t\t\tregion.scaleY = getValue(map, \"scaleY\", 1);\r\n\t\t\t\tregion.rotation = getValue(map, \"rotation\", 0);\r\n\t\t\t\tregion.width = map.width * scale;\r\n\t\t\t\tregion.height = map.height * scale;\r\n\t\t\t\tregion.sequence = sequence;\r\n\r\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\r\n\t\t\t\tif (color) region.color.setFromString(color);\r\n\r\n\t\t\t\tif (region.region != null) region.updateRegion();\r\n\t\t\t\treturn region;\r\n\t\t\t}\r\n\t\t\tcase \"boundingbox\": {\r\n\t\t\t\tlet box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n\t\t\t\tif (!box) return null;\r\n\t\t\t\tthis.readVertices(map, box, map.vertexCount << 1);\r\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\r\n\t\t\t\tif (color) box.color.setFromString(color);\r\n\t\t\t\treturn box;\r\n\t\t\t}\r\n\t\t\tcase \"mesh\":\r\n\t\t\tcase \"linkedmesh\": {\r\n\t\t\t\tlet path = getValue(map, \"path\", name);\r\n\t\t\t\tlet sequence = this.readSequence(getValue(map, \"sequence\", null));\r\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);\r\n\t\t\t\tif (!mesh) return null;\r\n\t\t\t\tmesh.path = path;\r\n\r\n\t\t\t\tlet color = getValue(map, \"color\", null);\r\n\t\t\t\tif (color) mesh.color.setFromString(color);\r\n\r\n\t\t\t\tmesh.width = getValue(map, \"width\", 0) * scale;\r\n\t\t\t\tmesh.height = getValue(map, \"height\", 0) * scale;\r\n\t\t\t\tmesh.sequence = sequence;\r\n\r\n\t\t\t\tlet parent: string = getValue(map, \"parent\", null);\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tthis.linkedMeshes.push(new LinkedMesh(mesh, <string>getValue(map, \"skin\", null), slotIndex, parent, getValue(map, \"timelines\", true)));\r\n\t\t\t\t\treturn mesh;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet uvs: Array<number> = map.uvs;\r\n\t\t\t\tthis.readVertices(map, mesh, uvs.length);\r\n\t\t\t\tmesh.triangles = map.triangles;\r\n\t\t\t\tmesh.regionUVs = uvs;\r\n\t\t\t\tif (mesh.region != null) mesh.updateRegion();\r\n\r\n\t\t\t\tmesh.edges = getValue(map, \"edges\", null);\r\n\t\t\t\tmesh.hullLength = getValue(map, \"hull\", 0) * 2;\r\n\t\t\t\treturn mesh;\r\n\t\t\t}\r\n\t\t\tcase \"path\": {\r\n\t\t\t\tlet path = this.attachmentLoader.newPathAttachment(skin, name);\r\n\t\t\t\tif (!path) return null;\r\n\t\t\t\tpath.closed = getValue(map, \"closed\", false);\r\n\t\t\t\tpath.constantSpeed = getValue(map, \"constantSpeed\", true);\r\n\r\n\t\t\t\tlet vertexCount = map.vertexCount;\r\n\t\t\t\tthis.readVertices(map, path, vertexCount << 1);\r\n\r\n\t\t\t\tlet lengths: Array<number> = Utils.newArray(vertexCount / 3, 0);\r\n\t\t\t\tfor (let i = 0; i < map.lengths.length; i++)\r\n\t\t\t\t\tlengths[i] = map.lengths[i] * scale;\r\n\t\t\t\tpath.lengths = lengths;\r\n\r\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\r\n\t\t\t\tif (color) path.color.setFromString(color);\r\n\t\t\t\treturn path;\r\n\t\t\t}\r\n\t\t\tcase \"point\": {\r\n\t\t\t\tlet point = this.attachmentLoader.newPointAttachment(skin, name);\r\n\t\t\t\tif (!point) return null;\r\n\t\t\t\tpoint.x = getValue(map, \"x\", 0) * scale;\r\n\t\t\t\tpoint.y = getValue(map, \"y\", 0) * scale;\r\n\t\t\t\tpoint.rotation = getValue(map, \"rotation\", 0);\r\n\r\n\t\t\t\tlet color = getValue(map, \"color\", null);\r\n\t\t\t\tif (color) point.color.setFromString(color);\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\t\t\tcase \"clipping\": {\r\n\t\t\t\tlet clip = this.attachmentLoader.newClippingAttachment(skin, name);\r\n\t\t\t\tif (!clip) return null;\r\n\r\n\t\t\t\tlet end = getValue(map, \"end\", null);\r\n\t\t\t\tif (end) clip.endSlot = skeletonData.findSlot(end);\r\n\r\n\t\t\t\tlet vertexCount = map.vertexCount;\r\n\t\t\t\tthis.readVertices(map, clip, vertexCount << 1);\r\n\r\n\t\t\t\tlet color: string = getValue(map, \"color\", null);\r\n\t\t\t\tif (color) clip.color.setFromString(color);\r\n\t\t\t\treturn clip;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\treadSequence (map: any) {\r\n\t\tif (map == null) return null;\r\n\t\tlet sequence = new Sequence(getValue(map, \"count\", 0));\r\n\t\tsequence.start = getValue(map, \"start\", 1);\r\n\t\tsequence.digits = getValue(map, \"digits\", 0);\r\n\t\tsequence.setupIndex = getValue(map, \"setup\", 0);\r\n\t\treturn sequence;\r\n\t}\r\n\r\n\treadVertices (map: any, attachment: VertexAttachment, verticesLength: number) {\r\n\t\tlet scale = this.scale;\r\n\t\tattachment.worldVerticesLength = verticesLength;\r\n\t\tlet vertices: Array<number> = map.vertices;\r\n\t\tif (verticesLength == vertices.length) {\r\n\t\t\tlet scaledVertices = Utils.toFloatArray(vertices);\r\n\t\t\tif (scale != 1) {\r\n\t\t\t\tfor (let i = 0, n = vertices.length; i < n; i++)\r\n\t\t\t\t\tscaledVertices[i] *= scale;\r\n\t\t\t}\r\n\t\t\tattachment.vertices = scaledVertices;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet weights = new Array<number>();\r\n\t\tlet bones = new Array<number>();\r\n\t\tfor (let i = 0, n = vertices.length; i < n;) {\r\n\t\t\tlet boneCount = vertices[i++];\r\n\t\t\tbones.push(boneCount);\r\n\t\t\tfor (let nn = i + boneCount * 4; i < nn; i += 4) {\r\n\t\t\t\tbones.push(vertices[i]);\r\n\t\t\t\tweights.push(vertices[i + 1] * scale);\r\n\t\t\t\tweights.push(vertices[i + 2] * scale);\r\n\t\t\t\tweights.push(vertices[i + 3]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tattachment.bones = bones;\r\n\t\tattachment.vertices = Utils.toFloatArray(weights);\r\n\t}\r\n\r\n\treadAnimation (map: any, name: string, skeletonData: SkeletonData) {\r\n\t\tlet scale = this.scale;\r\n\t\tlet timelines = new Array<Timeline>();\r\n\r\n\t\t// Slot timelines.\r\n\t\tif (map.slots) {\r\n\t\t\tfor (let slotName in map.slots) {\r\n\t\t\t\tlet slotMap = map.slots[slotName];\r\n\t\t\t\tlet slot = skeletonData.findSlot(slotName);\r\n\t\t\t\tif (!slot) throw new Error(\"Slot not found: \" + slotName);\r\n\t\t\t\tlet slotIndex = slot.index;\r\n\t\t\t\tfor (let timelineName in slotMap) {\r\n\t\t\t\t\tlet timelineMap = slotMap[timelineName];\r\n\t\t\t\t\tif (!timelineMap) continue;\r\n\t\t\t\t\tlet frames = timelineMap.length;\r\n\t\t\t\t\tif (timelineName == \"attachment\") {\r\n\t\t\t\t\t\tlet timeline = new AttachmentTimeline(frames, slotIndex);\r\n\t\t\t\t\t\tfor (let frame = 0; frame < frames; frame++) {\r\n\t\t\t\t\t\t\tlet keyMap = timelineMap[frame];\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, getValue(keyMap, \"time\", 0), getValue(keyMap, \"name\", null));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\r\n\t\t\t\t\t} else if (timelineName == \"rgba\") {\r\n\t\t\t\t\t\tlet timeline = new RGBATimeline(frames, frames << 2, slotIndex);\r\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\r\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.color);\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b, color.a);\r\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\r\n\t\t\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.color);\r\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\t\t\tif (curve) {\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tcolor = newColor;\r\n\t\t\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\r\n\t\t\t\t\t} else if (timelineName == \"rgb\") {\r\n\t\t\t\t\t\tlet timeline = new RGBTimeline(frames, frames * 3, slotIndex);\r\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\r\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.color);\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b);\r\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\r\n\t\t\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.color);\r\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\t\t\tif (curve) {\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tcolor = newColor;\r\n\t\t\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\r\n\t\t\t\t\t} else if (timelineName == \"alpha\") {\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, new AlphaTimeline(frames, frames, slotIndex), 0, 1));\r\n\t\t\t\t\t} else if (timelineName == \"rgba2\") {\r\n\t\t\t\t\t\tlet timeline = new RGBA2Timeline(frames, frames * 7, slotIndex);\r\n\r\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\r\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.light);\r\n\t\t\t\t\t\tlet color2 = Color.fromString(keyMap.dark);\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);\r\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\r\n\t\t\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.light);\r\n\t\t\t\t\t\t\tlet newColor2 = Color.fromString(nextMap.dark);\r\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\t\t\tif (curve) {\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tcolor = newColor;\r\n\t\t\t\t\t\t\tcolor2 = newColor2;\r\n\t\t\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\r\n\t\t\t\t\t} else if (timelineName == \"rgb2\") {\r\n\t\t\t\t\t\tlet timeline = new RGB2Timeline(frames, frames * 6, slotIndex);\r\n\r\n\t\t\t\t\t\tlet keyMap = timelineMap[0];\r\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\t\t\tlet color = Color.fromString(keyMap.light);\r\n\t\t\t\t\t\tlet color2 = Color.fromString(keyMap.dark);\r\n\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);\r\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\r\n\t\t\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\t\t\tlet newColor = Color.fromString(nextMap.light);\r\n\t\t\t\t\t\t\tlet newColor2 = Color.fromString(nextMap.dark);\r\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\t\t\tif (curve) {\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tcolor = newColor;\r\n\t\t\t\t\t\t\tcolor2 = newColor2;\r\n\t\t\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Bone timelines.\r\n\t\tif (map.bones) {\r\n\t\t\tfor (let boneName in map.bones) {\r\n\t\t\t\tlet boneMap = map.bones[boneName];\r\n\t\t\t\tlet bone = skeletonData.findBone(boneName);\r\n\t\t\t\tif (!bone) throw new Error(\"Bone not found: \" + boneName);\r\n\t\t\t\tlet boneIndex = bone.index;\r\n\t\t\t\tfor (let timelineName in boneMap) {\r\n\t\t\t\t\tlet timelineMap = boneMap[timelineName];\r\n\t\t\t\t\tlet frames = timelineMap.length;\r\n\t\t\t\t\tif (frames == 0) continue;\r\n\r\n\t\t\t\t\tif (timelineName === \"rotate\") {\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, new RotateTimeline(frames, frames, boneIndex), 0, 1));\r\n\t\t\t\t\t} else if (timelineName === \"translate\") {\r\n\t\t\t\t\t\tlet timeline = new TranslateTimeline(frames, frames << 1, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, scale));\r\n\t\t\t\t\t} else if (timelineName === \"translatex\") {\r\n\t\t\t\t\t\tlet timeline = new TranslateXTimeline(frames, frames, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, scale));\r\n\t\t\t\t\t} else if (timelineName === \"translatey\") {\r\n\t\t\t\t\t\tlet timeline = new TranslateYTimeline(frames, frames, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, scale));\r\n\t\t\t\t\t} else if (timelineName === \"scale\") {\r\n\t\t\t\t\t\tlet timeline = new ScaleTimeline(frames, frames << 1, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 1, 1));\r\n\t\t\t\t\t} else if (timelineName === \"scalex\") {\r\n\t\t\t\t\t\tlet timeline = new ScaleXTimeline(frames, frames, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 1, 1));\r\n\t\t\t\t\t} else if (timelineName === \"scaley\") {\r\n\t\t\t\t\t\tlet timeline = new ScaleYTimeline(frames, frames, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 1, 1));\r\n\t\t\t\t\t} else if (timelineName === \"shear\") {\r\n\t\t\t\t\t\tlet timeline = new ShearTimeline(frames, frames << 1, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, 1));\r\n\t\t\t\t\t} else if (timelineName === \"shearx\") {\r\n\t\t\t\t\t\tlet timeline = new ShearXTimeline(frames, frames, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, 1));\r\n\t\t\t\t\t} else if (timelineName === \"sheary\") {\r\n\t\t\t\t\t\tlet timeline = new ShearYTimeline(frames, frames, boneIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// IK constraint timelines.\r\n\t\tif (map.ik) {\r\n\t\t\tfor (let constraintName in map.ik) {\r\n\t\t\t\tlet constraintMap = map.ik[constraintName];\r\n\t\t\t\tlet keyMap = constraintMap[0];\r\n\t\t\t\tif (!keyMap) continue;\r\n\r\n\t\t\t\tlet constraint = skeletonData.findIkConstraint(constraintName);\r\n\t\t\t\tif (!constraint) throw new Error(\"IK Constraint not found: \" + constraintName);\r\n\t\t\t\tlet constraintIndex = skeletonData.ikConstraints.indexOf(constraint);\r\n\t\t\t\tlet timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);\r\n\r\n\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\tlet mix = getValue(keyMap, \"mix\", 1);\r\n\t\t\t\tlet softness = getValue(keyMap, \"softness\", 0) * scale;\r\n\r\n\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\ttimeline.setFrame(frame, time, mix, softness, getValue(keyMap, \"bendPositive\", true) ? 1 : -1, getValue(keyMap, \"compress\", false), getValue(keyMap, \"stretch\", false));\r\n\t\t\t\t\tlet nextMap = constraintMap[frame + 1];\r\n\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\tlet mix2 = getValue(nextMap, \"mix\", 1);\r\n\t\t\t\t\tlet softness2 = getValue(nextMap, \"softness\", 0) * scale;\r\n\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\tif (curve) {\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttime = time2;\r\n\t\t\t\t\tmix = mix2;\r\n\t\t\t\t\tsoftness = softness2;\r\n\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t}\r\n\t\t\t\ttimelines.push(timeline);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Transform constraint timelines.\r\n\t\tif (map.transform) {\r\n\t\t\tfor (let constraintName in map.transform) {\r\n\t\t\t\tlet timelineMap = map.transform[constraintName];\r\n\t\t\t\tlet keyMap = timelineMap[0];\r\n\t\t\t\tif (!keyMap) continue;\r\n\r\n\t\t\t\tlet constraint = skeletonData.findTransformConstraint(constraintName);\r\n\t\t\t\tif (!constraint) throw new Error(\"Transform constraint not found: \" + constraintName);\r\n\t\t\t\tlet constraintIndex = skeletonData.transformConstraints.indexOf(constraint);\r\n\t\t\t\tlet timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length * 6, constraintIndex);\r\n\r\n\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\tlet mixRotate = getValue(keyMap, \"mixRotate\", 1);\r\n\t\t\t\tlet mixX = getValue(keyMap, \"mixX\", 1);\r\n\t\t\t\tlet mixY = getValue(keyMap, \"mixY\", mixX);\r\n\t\t\t\tlet mixScaleX = getValue(keyMap, \"mixScaleX\", 1);\r\n\t\t\t\tlet mixScaleY = getValue(keyMap, \"mixScaleY\", mixScaleX);\r\n\t\t\t\tlet mixShearY = getValue(keyMap, \"mixShearY\", 1);\r\n\r\n\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\r\n\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\r\n\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\tlet mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\r\n\t\t\t\t\tlet mixX2 = getValue(nextMap, \"mixX\", 1);\r\n\t\t\t\t\tlet mixY2 = getValue(nextMap, \"mixY\", mixX2);\r\n\t\t\t\t\tlet mixScaleX2 = getValue(nextMap, \"mixScaleX\", 1);\r\n\t\t\t\t\tlet mixScaleY2 = getValue(nextMap, \"mixScaleY\", mixScaleX2);\r\n\t\t\t\t\tlet mixShearY2 = getValue(nextMap, \"mixShearY\", 1);\r\n\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\tif (curve) {\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\r\n\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttime = time2;\r\n\t\t\t\t\tmixRotate = mixRotate2;\r\n\t\t\t\t\tmixX = mixX2;\r\n\t\t\t\t\tmixY = mixY2;\r\n\t\t\t\t\tmixScaleX = mixScaleX2;\r\n\t\t\t\t\tmixScaleY = mixScaleY2;\r\n\t\t\t\t\tmixScaleX = mixScaleX2;\r\n\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t}\r\n\t\t\t\ttimelines.push(timeline);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Path constraint timelines.\r\n\t\tif (map.path) {\r\n\t\t\tfor (let constraintName in map.path) {\r\n\t\t\t\tlet constraintMap = map.path[constraintName];\r\n\t\t\t\tlet constraint = skeletonData.findPathConstraint(constraintName);\r\n\t\t\t\tif (!constraint) throw new Error(\"Path constraint not found: \" + constraintName);\r\n\t\t\t\tlet constraintIndex = skeletonData.pathConstraints.indexOf(constraint);\r\n\t\t\t\tfor (let timelineName in constraintMap) {\r\n\t\t\t\t\tlet timelineMap = constraintMap[timelineName];\r\n\t\t\t\t\tlet keyMap = timelineMap[0];\r\n\t\t\t\t\tif (!keyMap) continue;\r\n\r\n\t\t\t\t\tlet frames = timelineMap.length;\r\n\t\t\t\t\tif (timelineName === \"position\") {\r\n\t\t\t\t\t\tlet timeline = new PathConstraintPositionTimeline(frames, frames, constraintIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));\r\n\t\t\t\t\t} else if (timelineName === \"spacing\") {\r\n\t\t\t\t\t\tlet timeline = new PathConstraintSpacingTimeline(frames, frames, constraintIndex);\r\n\t\t\t\t\t\ttimelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));\r\n\t\t\t\t\t} else if (timelineName === \"mix\") {\r\n\t\t\t\t\t\tlet timeline = new PathConstraintMixTimeline(frames, frames * 3, constraintIndex);\r\n\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\t\t\tlet mixRotate = getValue(keyMap, \"mixRotate\", 1);\r\n\t\t\t\t\t\tlet mixX = getValue(keyMap, \"mixX\", 1);\r\n\t\t\t\t\t\tlet mixY = getValue(keyMap, \"mixY\", mixX);\r\n\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\ttimeline.setFrame(frame, time, mixRotate, mixX, mixY);\r\n\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\r\n\t\t\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\t\t\tlet mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\r\n\t\t\t\t\t\t\tlet mixX2 = getValue(nextMap, \"mixX\", 1);\r\n\t\t\t\t\t\t\tlet mixY2 = getValue(nextMap, \"mixY\", mixX2);\r\n\t\t\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\t\t\tif (curve) {\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\r\n\t\t\t\t\t\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\tmixRotate = mixRotate2;\r\n\t\t\t\t\t\t\tmixX = mixX2;\r\n\t\t\t\t\t\t\tmixY = mixY2;\r\n\t\t\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Attachment timelines.\r\n\t\tif (map.attachments) {\r\n\t\t\tfor (let attachmentsName in map.attachments) {\r\n\t\t\t\tlet attachmentsMap = map.attachments[attachmentsName];\r\n\t\t\t\tlet skin = skeletonData.findSkin(attachmentsName);\r\n\t\t\t\tif (!skin) throw new Error(\"Skin not found: \" + attachmentsName);\r\n\t\t\t\tfor (let slotMapName in attachmentsMap) {\r\n\t\t\t\t\tlet slotMap = attachmentsMap[slotMapName];\r\n\t\t\t\t\tlet slot = skeletonData.findSlot(slotMapName);\r\n\t\t\t\t\tif (!slot) throw new Error(\"Slot not found: \" + slotMapName);\r\n\t\t\t\t\tlet slotIndex = slot.index;\r\n\t\t\t\t\tfor (let attachmentMapName in slotMap) {\r\n\t\t\t\t\t\tlet attachmentMap = slotMap[attachmentMapName];\r\n\t\t\t\t\t\tlet attachment = <VertexAttachment>skin.getAttachment(slotIndex, attachmentMapName);\r\n\r\n\t\t\t\t\t\tfor (let timelineMapName in attachmentMap) {\r\n\t\t\t\t\t\t\tlet timelineMap = attachmentMap[timelineMapName];\r\n\t\t\t\t\t\t\tlet keyMap = timelineMap[0];\r\n\t\t\t\t\t\t\tif (!keyMap) continue;\r\n\r\n\t\t\t\t\t\t\tif (timelineMapName == \"deform\") {\r\n\t\t\t\t\t\t\t\tlet weighted = attachment.bones;\r\n\t\t\t\t\t\t\t\tlet vertices = attachment.vertices;\r\n\t\t\t\t\t\t\t\tlet deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\r\n\r\n\t\t\t\t\t\t\t\tlet timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);\r\n\t\t\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\t\t\t\t\tfor (let frame = 0, bezier = 0; ; frame++) {\r\n\t\t\t\t\t\t\t\t\tlet deform: NumberArrayLike;\r\n\t\t\t\t\t\t\t\t\tlet verticesValue: Array<Number> = getValue(keyMap, \"vertices\", null);\r\n\t\t\t\t\t\t\t\t\tif (!verticesValue)\r\n\t\t\t\t\t\t\t\t\t\tdeform = weighted ? Utils.newFloatArray(deformLength) : vertices;\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tdeform = Utils.newFloatArray(deformLength);\r\n\t\t\t\t\t\t\t\t\t\tlet start = <number>getValue(keyMap, \"offset\", 0);\r\n\t\t\t\t\t\t\t\t\t\tUtils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\r\n\t\t\t\t\t\t\t\t\t\tif (scale != 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tfor (let i = start, n = i + verticesValue.length; i < n; i++)\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeform[i] *= scale;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!weighted) {\r\n\t\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < deformLength; i++)\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeform[i] += vertices[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\ttimeline.setFrame(frame, time, deform);\r\n\t\t\t\t\t\t\t\t\tlet nextMap = timelineMap[frame + 1];\r\n\t\t\t\t\t\t\t\t\tif (!nextMap) {\r\n\t\t\t\t\t\t\t\t\t\ttimeline.shrink(bezier);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\t\t\t\t\t\t\t\tlet curve = keyMap.curve;\r\n\t\t\t\t\t\t\t\t\tif (curve) bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);\r\n\t\t\t\t\t\t\t\t\ttime = time2;\r\n\t\t\t\t\t\t\t\t\tkeyMap = nextMap;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\t\t} else if (timelineMapName == \"sequence\") {\r\n\t\t\t\t\t\t\t\tlet timeline = new SequenceTimeline(timelineMap.length, slotIndex, attachment as unknown as HasTextureRegion);\r\n\t\t\t\t\t\t\t\tlet lastDelay = 0;\r\n\t\t\t\t\t\t\t\tfor (let frame = 0; frame < timelineMap.length; frame++) {\r\n\t\t\t\t\t\t\t\t\tlet delay = getValue(keyMap, \"delay\", lastDelay);\r\n\t\t\t\t\t\t\t\t\tlet time = getValue(keyMap, \"time\", 0);\r\n\t\t\t\t\t\t\t\t\tlet mode = SequenceMode[getValue(keyMap, \"mode\", \"hold\")] as unknown as number;\r\n\t\t\t\t\t\t\t\t\tlet index = getValue(keyMap, \"index\", 0);\r\n\t\t\t\t\t\t\t\t\ttimeline.setFrame(frame, time, mode, index, delay);\r\n\t\t\t\t\t\t\t\t\tlastDelay = delay;\r\n\t\t\t\t\t\t\t\t\tkeyMap = timelineMap[frame + 1];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttimelines.push(timeline);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Draw order timelines.\r\n\t\tif (map.drawOrder) {\r\n\t\t\tlet timeline = new DrawOrderTimeline(map.drawOrder.length);\r\n\t\t\tlet slotCount = skeletonData.slots.length;\r\n\t\t\tlet frame = 0;\r\n\t\t\tfor (let i = 0; i < map.drawOrder.length; i++, frame++) {\r\n\t\t\t\tlet drawOrderMap = map.drawOrder[i];\r\n\t\t\t\tlet drawOrder: Array<number> | null = null;\r\n\t\t\t\tlet offsets = getValue(drawOrderMap, \"offsets\", null);\r\n\t\t\t\tif (offsets) {\r\n\t\t\t\t\tdrawOrder = Utils.newArray<number>(slotCount, -1);\r\n\t\t\t\t\tlet unchanged = Utils.newArray<number>(slotCount - offsets.length, 0);\r\n\t\t\t\t\tlet originalIndex = 0, unchangedIndex = 0;\r\n\t\t\t\t\tfor (let ii = 0; ii < offsets.length; ii++) {\r\n\t\t\t\t\t\tlet offsetMap = offsets[ii];\r\n\t\t\t\t\t\tlet slot = skeletonData.findSlot(offsetMap.slot);\r\n\t\t\t\t\t\tif (!slot) throw new Error(\"Slot not found: \" + slot);\r\n\t\t\t\t\t\tlet slotIndex = slot.index;\r\n\t\t\t\t\t\t// Collect unchanged items.\r\n\t\t\t\t\t\twhile (originalIndex != slotIndex)\r\n\t\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\r\n\t\t\t\t\t\t// Set changed items.\r\n\t\t\t\t\t\tdrawOrder[originalIndex + offsetMap.offset] = originalIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Collect remaining unchanged items.\r\n\t\t\t\t\twhile (originalIndex < slotCount)\r\n\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\r\n\t\t\t\t\t// Fill in unchanged items.\r\n\t\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\r\n\t\t\t\t\t\tif (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n\t\t\t\t}\r\n\t\t\t\ttimeline.setFrame(frame, getValue(drawOrderMap, \"time\", 0), drawOrder);\r\n\t\t\t}\r\n\t\t\ttimelines.push(timeline);\r\n\t\t}\r\n\r\n\t\t// Event timelines.\r\n\t\tif (map.events) {\r\n\t\t\tlet timeline = new EventTimeline(map.events.length);\r\n\t\t\tlet frame = 0;\r\n\t\t\tfor (let i = 0; i < map.events.length; i++, frame++) {\r\n\t\t\t\tlet eventMap = map.events[i];\r\n\t\t\t\tlet eventData = skeletonData.findEvent(eventMap.name);\r\n\t\t\t\tif (!eventData) throw new Error(\"Event not found: \" + eventMap.name);\r\n\t\t\t\tlet event = new Event(Utils.toSinglePrecision(getValue(eventMap, \"time\", 0)), eventData);\r\n\t\t\t\tevent.intValue = getValue(eventMap, \"int\", eventData.intValue);\r\n\t\t\t\tevent.floatValue = getValue(eventMap, \"float\", eventData.floatValue);\r\n\t\t\t\tevent.stringValue = getValue(eventMap, \"string\", eventData.stringValue);\r\n\t\t\t\tif (event.data.audioPath) {\r\n\t\t\t\t\tevent.volume = getValue(eventMap, \"volume\", 1);\r\n\t\t\t\t\tevent.balance = getValue(eventMap, \"balance\", 0);\r\n\t\t\t\t}\r\n\t\t\t\ttimeline.setFrame(frame, event);\r\n\t\t\t}\r\n\t\t\ttimelines.push(timeline);\r\n\t\t}\r\n\r\n\t\tlet duration = 0;\r\n\t\tfor (let i = 0, n = timelines.length; i < n; i++)\r\n\t\t\tduration = Math.max(duration, timelines[i].getDuration());\r\n\t\tskeletonData.animations.push(new Animation(name, timelines, duration));\r\n\t}\r\n}\r\n\r\nclass LinkedMesh {\r\n\tparent: string; skin: string;\r\n\tslotIndex: number;\r\n\tmesh: MeshAttachment;\r\n\tinheritTimeline: boolean;\r\n\r\n\tconstructor (mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\r\n\t\tthis.mesh = mesh;\r\n\t\tthis.skin = skin;\r\n\t\tthis.slotIndex = slotIndex;\r\n\t\tthis.parent = parent;\r\n\t\tthis.inheritTimeline = inheritDeform;\r\n\t}\r\n}\r\n\r\nfunction readTimeline1 (keys: any[], timeline: CurveTimeline1, defaultValue: number, scale: number) {\r\n\tlet keyMap = keys[0];\r\n\tlet time = getValue(keyMap, \"time\", 0);\r\n\tlet value = getValue(keyMap, \"value\", defaultValue) * scale;\r\n\tlet bezier = 0;\r\n\tfor (let frame = 0; ; frame++) {\r\n\t\ttimeline.setFrame(frame, time, value);\r\n\t\tlet nextMap = keys[frame + 1];\r\n\t\tif (!nextMap) {\r\n\t\t\ttimeline.shrink(bezier);\r\n\t\t\treturn timeline;\r\n\t\t}\r\n\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\tlet value2 = getValue(nextMap, \"value\", defaultValue) * scale;\r\n\t\tif (keyMap.curve) bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);\r\n\t\ttime = time2;\r\n\t\tvalue = value2;\r\n\t\tkeyMap = nextMap;\r\n\t}\r\n}\r\n\r\nfunction readTimeline2 (keys: any[], timeline: CurveTimeline2, name1: string, name2: string, defaultValue: number, scale: number) {\r\n\tlet keyMap = keys[0];\r\n\tlet time = getValue(keyMap, \"time\", 0);\r\n\tlet value1 = getValue(keyMap, name1, defaultValue) * scale;\r\n\tlet value2 = getValue(keyMap, name2, defaultValue) * scale;\r\n\tlet bezier = 0;\r\n\tfor (let frame = 0; ; frame++) {\r\n\t\ttimeline.setFrame(frame, time, value1, value2);\r\n\t\tlet nextMap = keys[frame + 1];\r\n\t\tif (!nextMap) {\r\n\t\t\ttimeline.shrink(bezier);\r\n\t\t\treturn timeline;\r\n\t\t}\r\n\t\tlet time2 = getValue(nextMap, \"time\", 0);\r\n\t\tlet nvalue1 = getValue(nextMap, name1, defaultValue) * scale;\r\n\t\tlet nvalue2 = getValue(nextMap, name2, defaultValue) * scale;\r\n\t\tlet curve = keyMap.curve;\r\n\t\tif (curve) {\r\n\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);\r\n\t\t\tbezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);\r\n\t\t}\r\n\t\ttime = time2;\r\n\t\tvalue1 = nvalue1;\r\n\t\tvalue2 = nvalue2;\r\n\t\tkeyMap = nextMap;\r\n\t}\r\n}\r\n\r\nfunction readCurve (curve: any, timeline: CurveTimeline, bezier: number, frame: number, value: number, time1: number, time2: number,\r\n\tvalue1: number, value2: number, scale: number) {\r\n\tif (curve == \"stepped\") {\r\n\t\ttimeline.setStepped(frame);\r\n\t\treturn bezier;\r\n\t}\r\n\tlet i = value << 2;\r\n\tlet cx1 = curve[i];\r\n\tlet cy1 = curve[i + 1] * scale;\r\n\tlet cx2 = curve[i + 2];\r\n\tlet cy2 = curve[i + 3] * scale;\r\n\ttimeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);\r\n\treturn bezier + 1;\r\n}\r\n\r\nfunction getValue (map: any, property: string, defaultValue: any) {\r\n\treturn map[property] !== undefined ? map[property] : defaultValue;\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\n(() => {\r\n\tif (typeof Math.fround === \"undefined\") {\r\n\t\tMath.fround = (function (array) {\r\n\t\t\treturn function (x: number) {\r\n\t\t\t\treturn array[0] = x, array[0];\r\n\t\t\t};\r\n\t\t})(new Float32Array(1));\r\n\t}\r\n})();\r\n\r\nexport { }\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Texture, TextureFilter, TextureWrap } from \"@esotericsoftware/spine-core\";\r\n\r\nexport class CanvasTexture extends Texture {\r\n\tconstructor (image: HTMLImageElement | ImageBitmap) {\r\n\t\tsuper(image);\r\n\t}\r\n\r\n\tsetFilters (minFilter: TextureFilter, magFilter: TextureFilter) { }\r\n\tsetWraps (uWrap: TextureWrap, vWrap: TextureWrap) { }\r\n\tdispose () { }\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { AssetManagerBase, Downloader } from \"@esotericsoftware/spine-core\"\r\nimport { CanvasTexture } from \"./CanvasTexture.js\";\r\n\r\nexport class AssetManager extends AssetManagerBase {\r\n\tconstructor (pathPrefix: string = \"\", downloader: Downloader = new Downloader()) {\r\n\t\tsuper((image: HTMLImageElement | ImageBitmap) => { return new CanvasTexture(image); }, pathPrefix, downloader);\r\n\t}\r\n}\r\n", "/******************************************************************************\r\n * Spine Runtimes License Agreement\r\n * Last updated July 28, 2023. Replaces all prior versions.\r\n *\r\n * Copyright (c) 2013-2023, Esoteric Software LLC\r\n *\r\n * Integration of the Spine Runtimes into software or otherwise creating\r\n * derivative works of the Spine Runtimes is permitted under the terms and\r\n * conditions of Section 2 of the Spine Editor License Agreement:\r\n * http://esotericsoftware.com/spine-editor-license\r\n *\r\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\r\n * otherwise create derivative works of the Spine Runtimes (collectively,\r\n * \"Products\"), provided that each user of the Products must obtain their own\r\n * Spine Editor license and redistribution of the Products in any form must\r\n * include this license and copyright notice.\r\n *\r\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\r\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\r\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\r\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\n\r\nimport { Utils, Color, Skeleton, RegionAttachment, BlendMode, MeshAttachment, Slot, TextureRegion, TextureAtlasRegion } from \"@esotericsoftware/spine-core\";\r\nimport { CanvasTexture } from \"./CanvasTexture.js\";\r\n\r\nconst worldVertices = Utils.newFloatArray(8);\r\n\r\nexport class SkeletonRenderer {\r\n\tstatic QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\r\n\tstatic VERTEX_SIZE = 2 + 2 + 4;\r\n\r\n\tprivate ctx: CanvasRenderingContext2D;\r\n\r\n\tpublic triangleRendering = false;\r\n\tpublic debugRendering = false;\r\n\tprivate vertices = Utils.newFloatArray(8 * 1024);\r\n\tprivate tempColor = new Color();\r\n\r\n\tconstructor (context: CanvasRenderingContext2D) {\r\n\t\tthis.ctx = context;\r\n\t}\r\n\r\n\tdraw (skeleton: Skeleton) {\r\n\t\tif (this.triangleRendering) this.drawTriangles(skeleton);\r\n\t\telse this.drawImages(skeleton);\r\n\t}\r\n\r\n\tprivate drawImages (skeleton: Skeleton) {\r\n\t\tlet ctx = this.ctx;\r\n\t\tlet color = this.tempColor;\r\n\t\tlet skeletonColor = skeleton.color;\r\n\t\tlet drawOrder = skeleton.drawOrder;\r\n\r\n\t\tif (this.debugRendering) ctx.strokeStyle = \"green\";\r\n\r\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\r\n\t\t\tlet slot = drawOrder[i];\r\n\t\t\tlet bone = slot.bone;\r\n\t\t\tif (!bone.active) continue;\r\n\r\n\t\t\tlet attachment = slot.getAttachment();\r\n\t\t\tif (!(attachment instanceof RegionAttachment)) continue;\r\n\t\t\tattachment.computeWorldVertices(slot, worldVertices, 0, 2);\r\n\t\t\tlet region: TextureRegion = <TextureRegion>attachment.region;\r\n\r\n\t\t\tlet image: HTMLImageElement = (<CanvasTexture>region.texture).getImage() as HTMLImageElement;\r\n\r\n\t\t\tlet slotColor = slot.color;\r\n\t\t\tlet regionColor = attachment.color;\r\n\t\t\tcolor.set(skeletonColor.r * slotColor.r * regionColor.r,\r\n\t\t\t\tskeletonColor.g * slotColor.g * regionColor.g,\r\n\t\t\t\tskeletonColor.b * slotColor.b * regionColor.b,\r\n\t\t\t\tskeletonColor.a * slotColor.a * regionColor.a);\r\n\r\n\t\t\tctx.save();\r\n\t\t\tctx.transform(bone.a, bone.c, bone.b, bone.d, bone.worldX, bone.worldY);\r\n\t\t\tctx.translate(attachment.offset[0], attachment.offset[1]);\r\n\t\t\tctx.rotate(attachment.rotation * Math.PI / 180);\r\n\r\n\t\t\tlet atlasScale = attachment.width / region.originalWidth;\r\n\t\t\tctx.scale(atlasScale * attachment.scaleX, atlasScale * attachment.scaleY);\r\n\r\n\t\t\tlet w = region.width, h = region.height;\r\n\t\t\tctx.translate(w / 2, h / 2);\r\n\t\t\tif (attachment.region!.degrees == 90) {\r\n\t\t\t\tlet t = w;\r\n\t\t\t\tw = h;\r\n\t\t\t\th = t;\r\n\t\t\t\tctx.rotate(-Math.PI / 2);\r\n\t\t\t}\r\n\t\t\tctx.scale(1, -1);\r\n\t\t\tctx.translate(-w / 2, -h / 2);\r\n\r\n\t\t\tctx.globalAlpha = color.a;\r\n\t\t\tctx.drawImage(image, image.width * region.u, image.height * region.v, w, h, 0, 0, w, h);\r\n\t\t\tif (this.debugRendering) ctx.strokeRect(0, 0, w, h);\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate drawTriangles (skeleton: Skeleton) {\r\n\t\tlet ctx = this.ctx;\r\n\t\tlet color = this.tempColor;\r\n\t\tlet skeletonColor = skeleton.color;\r\n\t\tlet drawOrder = skeleton.drawOrder;\r\n\r\n\t\tlet blendMode: BlendMode | null = null;\r\n\t\tlet vertices: ArrayLike<number> = this.vertices;\r\n\t\tlet triangles: Array<number> | null = null;\r\n\r\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\r\n\t\t\tlet slot = drawOrder[i];\r\n\t\t\tlet attachment = slot.getAttachment();\r\n\r\n\t\t\tlet texture: HTMLImageElement;\r\n\t\t\tlet region: TextureAtlasRegion;\r\n\t\t\tif (attachment instanceof RegionAttachment) {\r\n\t\t\t\tlet regionAttachment = <RegionAttachment>attachment;\r\n\t\t\t\tvertices = this.computeRegionVertices(slot, regionAttachment, false);\r\n\t\t\t\ttriangles = SkeletonRenderer.QUAD_TRIANGLES;\r\n\t\t\t\ttexture = (<CanvasTexture>regionAttachment.region!.texture).getImage() as HTMLImageElement;\r\n\t\t\t} else if (attachment instanceof MeshAttachment) {\r\n\t\t\t\tlet mesh = <MeshAttachment>attachment;\r\n\t\t\t\tvertices = this.computeMeshVertices(slot, mesh, false);\r\n\t\t\t\ttriangles = mesh.triangles;\r\n\t\t\t\ttexture = (<CanvasTexture>mesh.region!.texture).getImage() as HTMLImageElement;\r\n\t\t\t} else\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tif (texture) {\r\n\t\t\t\tif (slot.data.blendMode != blendMode) blendMode = slot.data.blendMode;\r\n\r\n\t\t\t\tlet slotColor = slot.color;\r\n\t\t\t\tlet attachmentColor = attachment.color;\r\n\t\t\t\tcolor.set(skeletonColor.r * slotColor.r * attachmentColor.r,\r\n\t\t\t\t\tskeletonColor.g * slotColor.g * attachmentColor.g,\r\n\t\t\t\t\tskeletonColor.b * slotColor.b * attachmentColor.b,\r\n\t\t\t\t\tskeletonColor.a * slotColor.a * attachmentColor.a);\r\n\r\n\t\t\t\tctx.globalAlpha = color.a;\r\n\r\n\t\t\t\tfor (var j = 0; j < triangles.length; j += 3) {\r\n\t\t\t\t\tlet t1 = triangles[j] * 8, t2 = triangles[j + 1] * 8, t3 = triangles[j + 2] * 8;\r\n\r\n\t\t\t\t\tlet x0 = vertices[t1], y0 = vertices[t1 + 1], u0 = vertices[t1 + 6], v0 = vertices[t1 + 7];\r\n\t\t\t\t\tlet x1 = vertices[t2], y1 = vertices[t2 + 1], u1 = vertices[t2 + 6], v1 = vertices[t2 + 7];\r\n\t\t\t\t\tlet x2 = vertices[t3], y2 = vertices[t3 + 1], u2 = vertices[t3 + 6], v2 = vertices[t3 + 7];\r\n\r\n\t\t\t\t\tthis.drawTriangle(texture, x0, y0, u0, v0, x1, y1, u1, v1, x2, y2, u2, v2);\r\n\r\n\t\t\t\t\tif (this.debugRendering) {\r\n\t\t\t\t\t\tctx.strokeStyle = \"green\";\r\n\t\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\t\tctx.moveTo(x0, y0);\r\n\t\t\t\t\t\tctx.lineTo(x1, y1);\r\n\t\t\t\t\t\tctx.lineTo(x2, y2);\r\n\t\t\t\t\t\tctx.lineTo(x0, y0);\r\n\t\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.ctx.globalAlpha = 1;\r\n\t}\r\n\r\n\t// Adapted from http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\t// Apache 2 licensed\r\n\tprivate drawTriangle (img: HTMLImageElement, x0: number, y0: number, u0: number, v0: number,\r\n\t\tx1: number, y1: number, u1: number, v1: number,\r\n\t\tx2: number, y2: number, u2: number, v2: number) {\r\n\t\tlet ctx = this.ctx;\r\n\r\n\t\tu0 *= img.width;\r\n\t\tv0 *= img.height;\r\n\t\tu1 *= img.width;\r\n\t\tv1 *= img.height;\r\n\t\tu2 *= img.width;\r\n\t\tv2 *= img.height;\r\n\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(x0, y0);\r\n\t\tctx.lineTo(x1, y1);\r\n\t\tctx.lineTo(x2, y2);\r\n\t\tctx.closePath();\r\n\r\n\t\tx1 -= x0;\r\n\t\ty1 -= y0;\r\n\t\tx2 -= x0;\r\n\t\ty2 -= y0;\r\n\r\n\t\tu1 -= u0;\r\n\t\tv1 -= v0;\r\n\t\tu2 -= u0;\r\n\t\tv2 -= v0;\r\n\r\n\t\tvar det = 1 / (u1 * v2 - u2 * v1),\r\n\r\n\t\t\t// linear transformation\r\n\t\t\ta = (v2 * x1 - v1 * x2) * det,\r\n\t\t\tb = (v2 * y1 - v1 * y2) * det,\r\n\t\t\tc = (u1 * x2 - u2 * x1) * det,\r\n\t\t\td = (u1 * y2 - u2 * y1) * det,\r\n\r\n\t\t\t// translation\r\n\t\t\te = x0 - a * u0 - c * v0,\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\tctx.save();\r\n\t\tctx.transform(a, b, c, d, e, f);\r\n\t\tctx.clip();\r\n\t\tctx.drawImage(img, 0, 0);\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\tprivate computeRegionVertices (slot: Slot, region: RegionAttachment, pma: boolean) {\r\n\t\tlet skeletonColor = slot.bone.skeleton.color;\r\n\t\tlet slotColor = slot.color;\r\n\t\tlet regionColor = region.color;\r\n\t\tlet alpha = skeletonColor.a * slotColor.a * regionColor.a;\r\n\t\tlet multiplier = pma ? alpha : 1;\r\n\t\tlet color = this.tempColor;\r\n\t\tcolor.set(skeletonColor.r * slotColor.r * regionColor.r * multiplier,\r\n\t\t\tskeletonColor.g * slotColor.g * regionColor.g * multiplier,\r\n\t\t\tskeletonColor.b * slotColor.b * regionColor.b * multiplier,\r\n\t\t\talpha);\r\n\r\n\t\tregion.computeWorldVertices(slot, this.vertices, 0, SkeletonRenderer.VERTEX_SIZE);\r\n\r\n\t\tlet vertices = this.vertices;\r\n\t\tlet uvs = region.uvs;\r\n\r\n\t\tvertices[RegionAttachment.C1R] = color.r;\r\n\t\tvertices[RegionAttachment.C1G] = color.g;\r\n\t\tvertices[RegionAttachment.C1B] = color.b;\r\n\t\tvertices[RegionAttachment.C1A] = color.a;\r\n\t\tvertices[RegionAttachment.U1] = uvs[0];\r\n\t\tvertices[RegionAttachment.V1] = uvs[1];\r\n\r\n\t\tvertices[RegionAttachment.C2R] = color.r;\r\n\t\tvertices[RegionAttachment.C2G] = color.g;\r\n\t\tvertices[RegionAttachment.C2B] = color.b;\r\n\t\tvertices[RegionAttachment.C2A] = color.a;\r\n\t\tvertices[RegionAttachment.U2] = uvs[2];\r\n\t\tvertices[RegionAttachment.V2] = uvs[3];\r\n\r\n\t\tvertices[RegionAttachment.C3R] = color.r;\r\n\t\tvertices[RegionAttachment.C3G] = color.g;\r\n\t\tvertices[RegionAttachment.C3B] = color.b;\r\n\t\tvertices[RegionAttachment.C3A] = color.a;\r\n\t\tvertices[RegionAttachment.U3] = uvs[4];\r\n\t\tvertices[RegionAttachment.V3] = uvs[5];\r\n\r\n\t\tvertices[RegionAttachment.C4R] = color.r;\r\n\t\tvertices[RegionAttachment.C4G] = color.g;\r\n\t\tvertices[RegionAttachment.C4B] = color.b;\r\n\t\tvertices[RegionAttachment.C4A] = color.a;\r\n\t\tvertices[RegionAttachment.U4] = uvs[6];\r\n\t\tvertices[RegionAttachment.V4] = uvs[7];\r\n\r\n\t\treturn vertices;\r\n\t}\r\n\r\n\tprivate computeMeshVertices (slot: Slot, mesh: MeshAttachment, pma: boolean) {\r\n\t\tlet skeletonColor = slot.bone.skeleton.color;\r\n\t\tlet slotColor = slot.color;\r\n\t\tlet regionColor = mesh.color;\r\n\t\tlet alpha = skeletonColor.a * slotColor.a * regionColor.a;\r\n\t\tlet multiplier = pma ? alpha : 1;\r\n\t\tlet color = this.tempColor;\r\n\t\tcolor.set(skeletonColor.r * slotColor.r * regionColor.r * multiplier,\r\n\t\t\tskeletonColor.g * slotColor.g * regionColor.g * multiplier,\r\n\t\t\tskeletonColor.b * slotColor.b * regionColor.b * multiplier,\r\n\t\t\talpha);\r\n\r\n\t\tlet vertexCount = mesh.worldVerticesLength / 2;\r\n\t\tlet vertices = this.vertices;\r\n\t\tif (vertices.length < mesh.worldVerticesLength) this.vertices = vertices = Utils.newFloatArray(mesh.worldVerticesLength);\r\n\t\tmesh.computeWorldVertices(slot, 0, mesh.worldVerticesLength, vertices, 0, SkeletonRenderer.VERTEX_SIZE);\r\n\r\n\t\tlet uvs = mesh.uvs;\r\n\t\tfor (let i = 0, u = 0, v = 2; i < vertexCount; i++) {\r\n\t\t\tvertices[v++] = color.r;\r\n\t\t\tvertices[v++] = color.g;\r\n\t\t\tvertices[v++] = color.b;\r\n\t\t\tvertices[v++] = color.a;\r\n\t\t\tvertices[v++] = uvs[u++];\r\n\t\t\tvertices[v++] = uvs[u++];\r\n\t\t\tv += 2;\r\n\t\t}\r\n\r\n\t\treturn vertices;\r\n\t}\r\n}\r\n"],
  "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",
  "names": ["worldVertices", "v", "SequenceMode", "MixBlend", "MixDirection", "x", "y", "i", "vertexAttachment", "i", "n", "timeline", "EventType", "TextureFilter", "TextureWrap", "page", "worldVertices", "worldVertices", "TransformMode", "PositionMode", "SpacingMode", "RotateMode", "closed", "pathLength", "multiplier", "BlendMode", "closed", "AttachmentType", "n", "LinkedMesh", "readTimeline1", "readTimeline2"]
}
